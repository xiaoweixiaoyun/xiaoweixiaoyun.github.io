<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第二曲线创新</title>
      <link href="/2024/01/17/book-2/"/>
      <url>/2024/01/17/book-2/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>《第二曲线创新》是混沌学园创始人李善友教授关于创业的一阶课程的文字版总结。这本书不仅仅讲述了企业第二曲线如何打造，还讲述了与之交错的若干知识。通过阅读这本书，我对第二曲线创新有了更深入的理解。</p></blockquote><h1 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h1><p>首先，作者解释了商业为什么是S型曲线发展。S型曲线在开始时呈下降趋势，说明此时的投入高于产出；突破了破局点之后，曲线的上升幅度明显增强；靠近曲线上方时，增长速度开始放缓，虽然还保持着增长态势，但相较之前的高速增长已远远不足；曲线由上而下的翻转点就是极限点，此后曲线便走向下坡路。任何一条增长的S曲线，都会滑过抛物线的顶点（极限点），持续增长的秘密是在第一条曲线消失之前，开始一条新的S曲线。</p><p>其次，作者阐述了第一曲线创新和第二曲线创新的关系。第一曲线创新是对现有产品和服务的改良，可以带来10%甚至百分之几十的增长；而第二曲线创新是重新开启新的曲线，可以带来10倍速的增长。第二曲线创新并不是对第一曲线的改良，而是重新开启新的曲线。这个理论虽然美好，但是两条曲线中间存在鸿沟，我称之为非连续性鸿沟。企业在第一曲线越成功，就越难以转换到第二曲线，我将其称为人类思维的阿喀琉斯之踵。</p><p>《第二曲线创新》这本书让我明白了，企业要想持续发展，就不能一直停留在原有的产品和服务的改善上，而要寻找新的增长点，这就是所谓的第二曲线创新。作者通过S型曲线的发展规律，告诉我们任何一条增长的S曲线，都会滑过抛物线的顶点（极限点），持续增长的秘密是在第一条曲线消失之前，开始一条新的S曲线。</p><p>书中还提到了第一曲线创新和第二曲线创新的关系。第一曲线创新是对现有产品和服务的改良，可以带来10%甚至百分之几十的增长；而第二曲线创新是重新开启新的曲线，可以带来10倍速的增长。但是，从第一曲线转换到第二曲线并不容易，因为它们之间存在一个非连续性鸿沟。</p><p>为了跨越这个非连续性鸿沟，作者提出了第一性原理的方法论。第一性原理就是从哲科先贤提出的经典理论中汲取营养，它们提供的是新鲜的思维视角。通过学习这些经典理论，我们可以找到非连续性事物之间的连续性桥梁。</p><p>最后，我觉得这本书对于我们了解和创新的人来说，是非常有帮助的。它让我明白了，要想在竞争激烈的市场中脱颖而出，就要不断学习新的思维方式，寻找新的增长点，这样才能在第一条曲线消失之前，开启一条新的S曲线，实现持续增长。</p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书籍,读后感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好战略，坏战略</title>
      <link href="/2024/01/08/book-1/"/>
      <url>/2024/01/08/book-1/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>《好战略，坏战略》是一部厘清近20年“战略”管理思想的经典作品。</p></blockquote><p>十几年来，关于战略的图书汗牛充栋，概念泛滥，混淆不清。本书重新让“战略”回归本质，分析了构成一个好战略的基本逻辑，即三个核心要素：</p><blockquote><p>调查分析：分析形势，认清竞争优势和态势，了解竞争对手；<br>指导方针：为了克服障碍而制定整体性策略；<br>连贯性活动：采取统一连贯性的行动；</p></blockquote><p>围绕这个基本逻辑，《好战略，坏战略》通过剖析包含苹果、IBM、星巴克、英伟达、宜家、沃尔玛等诸多企业的经典商业案例与熟悉的热点事件，深入浅出地分析了好战略与坏战略的区别，并从9个方面阐述了制定好战略的详尽方法论。这些方法包括：发挥杠杆作用、制定近似目标、强化短板、秉持动态视角、利用惯性等。</p><h1 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h1><p>第一次读这种战略的书籍，一方面觉得用不上，另一方面觉得还不够资历。抱着一种自我学习、增长眼界的这种心态去读这本书。<br>从简介来说，我认为的战略可以分为三部分：前期（调研）、中期（设计）、后期（执行）。  </p><p>首先，书中明确了战略的真正含义：为了应对重大挑战而做出的连贯性反应。这包括分析、理念、方针、论证和行动。战略不是一个简单的决策或目标，而是一系列应对高风险挑战的连贯性行动。  </p><p>接下来，书中详细分析了坏战略的四个特征：空话、不能直面挑战、把目标当成战略、糟糕的战略目标。这些特征揭示了坏战略的无效性和危害性。例如，空话是伪装成战略理念的没有信息含量的话，无法解决实际问题。而不能直面挑战则是因为无法识别真正的挑战和问题所在。把目标当成战略则只有愿景、愿望，没有具体的、可执行的计划。糟糕的战略目标则是无法解决关键问题，或者各个战略目标之间相互冲突。   </p><p>相反，好战略具有三个特征：战略聚焦、扬长避短、战术协同。战略聚焦意味着放弃一些不重要的方面，专注于关键的目标。扬长避短则是充分发挥自己的优势，避免与竞争对手的优势直接竞争，而是通过找到对自己有利的战场，将对手的优势变为劣势。战术协同则是在战略思考中避免被一开始的想法锁死，避免从众心理，以及避免被对手的优势误导。  </p><p>通过阅读这本书，我深刻认识到制定好战略的重要性和不易之处。好战略需要建立在调查分析的基础之上，充分理解外界的机遇与威胁、自身与竞争对手的优势与劣势，然后集中有限而宝贵的资源，在少数几个关键点上取得突破，并设置环环相扣的战略体系，以获得最大化的收益和竞争优势。  </p><p>总之，这本书提供了对战略制定的有益指导和方法，对于希望成为优秀领导者的读者来说，是一本非常实用的参考书籍。通过学习好战略的制定方法，我们可以更好地应对挑战，实现个人和组织的目标。</p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书籍,读后感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统架构设计师-学习第三天</title>
      <link href="/2024/01/03/architecture-3/"/>
      <url>/2024/01/03/architecture-3/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机系统基础知识"><a href="#计算机系统基础知识" class="headerlink" title="计算机系统基础知识"></a>计算机系统基础知识</h1><h2 id="计算机系统概述"><a href="#计算机系统概述" class="headerlink" title="计算机系统概述"></a>计算机系统概述</h2><p> <img src="/img/md/architecture/image3.png" alt="典型计算机系统的组成"><br> <img src="/img/md/architecture/image4.png" alt="计算机系统的分类示意图"></p><h2 id="计算机硬件"><a href="#计算机硬件" class="headerlink" title="计算机硬件"></a>计算机硬件</h2><h3 id="计算机硬件组成"><a href="#计算机硬件组成" class="headerlink" title="计算机硬件组成"></a>计算机硬件组成</h3><ul><li>处理器</li><li>存储器</li><li>总线</li><li>接口</li><li>外部设备</li></ul><h3 id="处理器（CPU）"><a href="#处理器（CPU）" class="headerlink" title="处理器（CPU）"></a>处理器（CPU）</h3><blockquote><p>作为计算机系统运算和控制的核心部件，经历了长期演化过程</p></blockquote><p><img src="/img/md/architecture/image5.png" alt="典型的处理器体系结构示意图"></p><h3 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h3><blockquote><p>利用半导体、磁、光等介质制成用于存储数据的电子设备</p></blockquote><ol><li>片上缓存：在处理器核心中直接集成的缓存，一般为SRAM结构，实现数据的快速读取。它容量较小一般为16kB-512kB，按照不同的设计可能划分为一级或二级。</li><li>片外缓存：在处理器核心外的缓存，需要经过交换互联开发访问，一般也是由SRAM构成，容量较片上缓存略大，可以为256kB-4MB。按照层次被称为L2Cache或L3Cache，或者成为平台Cache。</li><li>主存（内存）：通常采用DRAM结构，以独立的部件&#x2F;芯片存在，通过总线与处理器链接。DRAM依赖不断充电维持其中的数据，容量在数百MB至数十GB之间。</li><li>外存：可以是磁带、磁盘、光盘和各类Flash等介质器件，这类设备访问速度慢，但容量大，且在掉点后能够保持其数据。</li></ol><h3 id="总线（Bus）"><a href="#总线（Bus）" class="headerlink" title="总线（Bus）"></a>总线（Bus）</h3><blockquote><p>是指计算机部件间遵循某一特定协议实现数据交换的形式，即以一种特定格式按照规定的控制逻辑实现部件间的数据传输。</p></blockquote><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><blockquote><p>是指同意计算机不同功能层之间的通信规则</p></blockquote><h3 id="外部设备"><a href="#外部设备" class="headerlink" title="外部设备"></a>外部设备</h3><blockquote><p>也成为外围设备，是计算机的非必要设备</p></blockquote><h2 id="计算机软件"><a href="#计算机软件" class="headerlink" title="计算机软件"></a>计算机软件</h2>]]></content>
      
      
      <categories>
          
          <category> 软考知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习,软考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统架构设计师-学习第二天</title>
      <link href="/2024/01/02/architecture-2/"/>
      <url>/2024/01/02/architecture-2/</url>
      
        <content type="html"><![CDATA[<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><blockquote><p>系统架构设计师（System Architecture Designer），决定系统健壮性和生命周期的长短。</p></blockquote><h2 id="系统架构设计师概述"><a href="#系统架构设计师概述" class="headerlink" title="系统架构设计师概述"></a>系统架构设计师概述</h2><blockquote><p>是项目开发活动中的众多角色之一，它可以是一个人或一个小组，也可以是一个团队。</p></blockquote><h3 id="架构设计师的定义、职责和任务"><a href="#架构设计师的定义、职责和任务" class="headerlink" title="架构设计师的定义、职责和任务"></a>架构设计师的定义、职责和任务</h3><h4 id="架构设计师、架构设计和架构的关系图"><a href="#架构设计师、架构设计和架构的关系图" class="headerlink" title="架构设计师、架构设计和架构的关系图"></a>架构设计师、架构设计和架构的关系图</h4><p><img src="/img/md/architecture/image1.jpg" alt="架构设计师、架构设计和架构的关系图"></p><h4 id="系统架构师的任务"><a href="#系统架构师的任务" class="headerlink" title="系统架构师的任务"></a>系统架构师的任务</h4><ol><li>领导与协调整个项目中的技术活动（分析、设计和实施）。</li><li>推动主要的技术决策并最终表达为系统架构。</li><li>确定系统架构，并促使其架构设计的文档化，整理的文档化应包含需求、设计、实施和部署等“视图”。</li></ol><h3 id="架构设计师应具备的专业素质"><a href="#架构设计师应具备的专业素质" class="headerlink" title="架构设计师应具备的专业素质"></a>架构设计师应具备的专业素质</h3><ol><li>掌握业务领域的知识</li><li>掌握技术知识</li><li>掌握设计技能</li><li>具有编程能力</li><li>具备沟通能力</li><li>具有决策力</li><li>知道组织策略</li><li>应是谈判专家</li></ol><h3 id="架构设计师的知识结构"><a href="#架构设计师的知识结构" class="headerlink" title="架构设计师的知识结构"></a>架构设计师的知识结构</h3><ol><li>战略规划能力</li><li>业务流程建模能力</li><li>信息数据架构能力</li><li>技术架构设计和实现能力</li><li>应用系统架构的解决和实现能力</li><li>基本IT知识及基础设施、资源调配能力</li><li>信息安全技术支持与管理保障能力</li><li>IT审计、治理与基本需求的分析和获取能力</li><li>面向软件系统可靠性与系统生命周期的质量保障服务能力</li><li>对新技术与新概念的理解、掌握和分析能力</li></ol><h2 id="如何成为一名好的系统架构设计师"><a href="#如何成为一名好的系统架构设计师" class="headerlink" title="如何成为一名好的系统架构设计师"></a>如何成为一名好的系统架构设计师</h2><ol><li>作为领导者</li><li>作为开发者</li><li>作为系统综合者</li><li>具备企业家思维</li><li>具备战略技术专家的权威思维和战术思维</li><li>具备良好的沟通能力</li></ol><h2 id="系统架构师的演化"><a href="#系统架构师的演化" class="headerlink" title="系统架构师的演化"></a>系统架构师的演化</h2><ol><li>工程师</li><li>高级工程师</li><li>技术专家</li><li>系统架构师（初级）</li><li>系统架构师（中级）</li><li>系统架构师（高级）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 软考知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习,软考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统架构设计师-学习第一天</title>
      <link href="/2023/12/27/architecture-1/"/>
      <url>/2023/12/27/architecture-1/</url>
      
        <content type="html"><![CDATA[<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><blockquote><p>系统架构设计师（System Architecture Designer），决定系统健壮性和生命周期的长短。</p></blockquote><h2 id="系统架构概述"><a href="#系统架构概述" class="headerlink" title="系统架构概述"></a>系统架构概述</h2><ul><li>1946年世界第一台计算机诞生</li><li>电子数字积分器和计算机（ENIAC）</li><li>离散变量自动电子计算机（EDVAC）（冯.若依曼）<h3 id="系统架构的定义及发展历程"><a href="#系统架构的定义及发展历程" class="headerlink" title="系统架构的定义及发展历程"></a>系统架构的定义及发展历程</h3><blockquote><p>是系统的一种整体的高层次的结构表示，是系统的骨架和根基，支撑和链接各个部分，我们通常把架构设计作为系统开发过程中需求分析阶段后的一个关键步骤，也不是不可或缺的工作要点。</p></blockquote></li></ul><ol><li>软件架构发展阶段</li></ol><ul><li>基础研究阶段（1968-1994年）</li><li>概念体系和核心技术形成阶段（1999-2000年）</li><li>理论体系完善与发展阶段（1996年至今）</li><li>普及应用阶段（2000年至今）</li></ul><ol start="2"><li>架构设计的作用</li></ol><ul><li>解决相对复杂的需求分析问题</li><li>解决非功能属性在系统占据重要位置的设计问题</li><li>解决生命周期长、扩展性需求高的系统整体结果问题</li><li>解决系统基于组件需要的集成问题</li><li>解决业务流程再造难得问题</li></ul><ol start="3"><li>模块化开发规则</li></ol><ul><li>最高模块内聚</li><li>最低耦合</li><li>模块大小适度</li><li>模块调用链的深度不可过多</li><li>接口简单、精炼，具有信息隐藏能力</li><li>尽可能地复用已有模块</li></ul><p><img src="/img/md/architecture/image2.png" alt="传统MIS系统软甲架构"></p><ol start="4"><li>软件架构影响软件开发的各个阶段</li></ol><ul><li>需求阶段：把软件架构有的概念引入需求分析阶段，有助于保证需求规约和系统收割机之间的可追踪性和一致性。</li><li>设计阶段：设计阶段是软件架构最早和最多的阶段。</li><li>实现阶段：将设计阶段设计的算法及数据类型用程序设计语言进行表示，满足设计、架构和需求分析的要求，从而得到满足设计需求的目标系统。</li><li>维护阶段：为了保证软具有良好的维护性，在软件架构中针对维护性目标进行分析时，需要对一些有关维护性的属性（如可扩展性、可替换性）进行规定。</li></ul><h3 id="软件架构的常用分类和建模方式"><a href="#软件架构的常用分类和建模方式" class="headerlink" title="软件架构的常用分类和建模方式"></a>软件架构的常用分类和建模方式</h3><ol><li>软件架构的常用分类</li></ol><ul><li><p>分层结构（最常见的四层结构，也是事实上的标准架构）</p><ul><li>表现层：用户界面，负责视觉和用户互动</li><li>业务层：实行业务逻辑</li><li>持久层：提供数据，SQL语句就放在这一层</li><li>数据库：保存数据<blockquote><p>有的项目在逻辑层和持久层中间加了一层服务层（Service），提供不同业务逻辑需要的一些通用接口。用户的请求将依次通过这四层的处理，不能跳过其中的任何一层。</p></blockquote></li></ul></li><li><p>事件驱动架构（Event-driven Architecture：是通过事件进行通信的软件架构）</p><ul><li>事件队列（Event Queue）：接受事件的入口。</li><li>分发器（Event Mediator）：将不同的事件分发到不同的业务逻辑单元。</li><li>事件通道（Event Channel）：分发器与处理器中间的联系渠道。</li><li>事件处理器（Event Processor）：实现业务逻辑，处理完成后会发出事件，触发下一步操作。<blockquote><p>对于简单的项目，事件队列、分发器和事件通道可以合为一体，整个软件就分成事件代理和事件处理器两部分。</p></blockquote></li></ul></li><li><p>微核架构（Microkernel Architecture：又称为插件架构（Plug-in Architecture），是指软件内核相对较小，主要功能和业务逻辑都通过插件实现）</p><blockquote><p>内核（Core）通常只包含系统运行的最小功能。插件则是相互独立的，插件之间的通信减少到最低，避免出现互相依赖的问题。</p></blockquote></li><li><p>微服务架构（Microservices Architecture：每一个服务就是一个独立的部署单元，这些单元是分布式的，互相解耦，通过远程通信协议（比如REST、SOAP）联系）。</p><ul><li>RESTFUL API模式：服务通过API提供，云服务就属于这一类；</li><li>RESTFUL 应用模式：服务通过传统的网路协议或者应用协议提供，背后通常是一个多功能的应用程序，常见于企业内部。</li><li>集中消息模式：采用消息代理（Message Broker）可以实现消息队列、负载均衡、统一日志和异常处理，缺点是会出现单点失败，消息代理可能要做集群。</li></ul></li><li><p>云架构（Cloud Architecture：主要解决扩展性和比并发的问题，也是最容易扩展的架构；由于每个处理都在内存里，需要进行数据持久化。）</p><ul><li>处理单元（Processing Unit）：实现业务逻辑。</li><li>虚拟中间件（Virtualized Middleware）：负责通信、保持回话控制（sessions）、数据复制、分布式处理和处理单元的部署。<ul><li>消息中间件（Messaging Grid）：管理用户请求和回话控制（sessions），当一个请求进来以后，它决定分配给哪一个处理单元。</li><li>数据中间件（Data Grid）：将数据复制到每一个处理单元，即数据同步。</li><li>处理中间件（Processing Grid）：可选，如果一个请求涉及不同类型的处理单元，该中间件负责协调处理单元。</li><li>部署中间件（Deploement Manager）：负责处理单元的启动和关闭，监控负载和响应时间，当负载增加，就新启动处理单元，负载减少，就关闭处理单元。</li></ul></li></ul></li></ul><ol start="2"><li>系统架构的常用建模方法</li></ol><ul><li>结构模型</li><li>框架模型</li><li>动态模型</li><li>过程模型</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软考知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习,软考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现在CS端调用本地打印机服务打印PDF的功能</title>
      <link href="/2023/11/07/java-print/"/>
      <url>/2023/11/07/java-print/</url>
      
        <content type="html"><![CDATA[<h2 id="项目描述"><a href="#项目描述" class="headerlink" title="项目描述"></a>项目描述</h2><p>实现在CS端调用本地打印机服务打印PDF的功能</p><h2 id="依赖项"><a href="#依赖项" class="headerlink" title="依赖项"></a>依赖项</h2><blockquote><ol><li>运行环境：jdk8及以上</li><li>导入依赖：<a href="https://github.com/apache/pdfbox/tree/trunk/pdfbox">pdfbox</a></li><li>导入工具类：PrintUtil.java</li></ol></blockquote><p>maven导入依赖示例：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.pdfbox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pdfbox<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><h3 id="获取打印机服务列表"><a href="#获取打印机服务列表" class="headerlink" title="获取打印机服务列表"></a>获取打印机服务列表</h3><blockquote><p>调用工具类<code>PrintUtil.java</code>中<code>PrintUtil.selectPrintService()</code>的方法</p></blockquote><h3 id="执行打印"><a href="#执行打印" class="headerlink" title="执行打印"></a>执行打印</h3><blockquote><p>调用工具类<code>PrintUtil.java</code>中<code>PrintUtil.print()</code>的方法</p></blockquote><p>参数说明：</p><table><thead><tr><th>参数</th><th>类型</th><th>值</th><th>是否必须</th><th>说明</th></tr></thead><tbody><tr><td>filepath</td><td>String</td><td>例：”test.pdf”</td><td>Yes</td><td>文件地址</td></tr><tr><td>printService</td><td>PrintService</td><td>-</td><td>Yes</td><td>打印服务</td></tr><tr><td>scaling</td><td>Scaling</td><td>实际大小：Scaling.ACTUAL_SIZE； 缩小：Scaling.SHRINK_TO_FIT； 拉伸：Scaling.STRETCH_TO_FIT； 适应：Scaling.SCALE_TO_FIT</td><td>Yes</td><td>缩放形式</td></tr><tr><td>copies</td><td>Integer</td><td>例：1</td><td>Yes</td><td>打印份数</td></tr><tr><td>orientation</td><td>int</td><td>竖：PageFormat.PORTRAIT；横：PageFormat.LANDSCAPE；反转：PageFormat.REVERSE_LANDSCAPE</td><td>Yes</td><td>方向</td></tr><tr><td>sides</td><td>Attribute</td><td>单面打印：Sides.ONE_SIDED；双面打印：Sides.DUPLEX；</td><td>Yes</td><td>单双页</td></tr><tr><td>mediaSizeName</td><td>Attribute</td><td>纸张大小：MediaSizeName.ISO_A4；……</td><td>Yes</td><td>纸张大小</td></tr><tr><td>width</td><td>int</td><td>例：595（A4）</td><td>Yes</td><td>纸张宽度像素</td></tr><tr><td>height</td><td>int</td><td>例：842（A4）</td><td>Yes</td><td>纸张高度像素</td></tr><tr><td>marginLeft</td><td>int</td><td>例：12</td><td>Yes</td><td>距左边距离</td></tr><tr><td>marginRight</td><td>int</td><td>例：12</td><td>Yes</td><td>距右边距离</td></tr><tr><td>marginTop</td><td>int</td><td>例：12</td><td>Yes</td><td>距上边距离</td></tr><tr><td>marginBottom</td><td>int</td><td>例：12</td><td>Yes</td><td>距下边距离</td></tr></tbody></table><p>返回说明：</p><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>true</td><td>打印成功</td></tr><tr><td>false</td><td>打印失败</td></tr></tbody></table><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.获取服务列表</span></span><br><span class="line">HashMap&lt;String, PrintService&gt; printServiceHashMap = PrintUtil.selectPrintService();</span><br><span class="line"><span class="comment">// 2.调用打印</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> PrintUtil.print(filepath, printServiceHashMap.get(<span class="string">&quot;导出为WPS PDF&quot;</span>), Scaling.ACTUAL_SIZE, <span class="number">1</span>,</span><br><span class="line">        PageFormat.PORTRAIT, Sides.ONE_SIDED,</span><br><span class="line">        MediaSizeName.ISO_A4, <span class="number">595</span>, <span class="number">842</span>,</span><br><span class="line">        <span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>);</span><br><span class="line"><span class="comment">// 3.返回结果</span></span><br><span class="line">System.out.println(flag);</span><br></pre></td></tr></table></figure><h2 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h2><p><a href="/file/Printer.zip">Printer.zip</a></p><h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><p><img src="/img/md/java-print/Dingtalk_20231120144615.jpg" alt="Dingtalk_20231120144615.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java,打印机，打印，自定义打印，打印参数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>int(1)和int(10)有区别吗</title>
      <link href="/2023/11/07/mysql-int/"/>
      <url>/2023/11/07/mysql-int/</url>
      
        <content type="html"><![CDATA[<h2 id="先给答案"><a href="#先给答案" class="headerlink" title="先给答案"></a>先给答案</h2><p>没有区别</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>工作中不乏见过定义各种类型像varchar(4),char(2)等,里面的数字一般指的是字符长度。所以很多人也会觉得int(1)里面只能存1位数，殊不知是理解错了。下面具体讲解一下！</p></blockquote><h2 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h2><p>INT[(M)] [UNSIGNED] [ZEROFILL]<br>普通大小的整数。<br>带符号的范围是-2147483648到2147483647<br>无符号的范围是0到4294967295。<br>INT(1) 和 INT(10)本身没有区别，但是加上(M)值后，会有显示宽度的设置。</p><h3 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test(id <span class="type">int</span>(<span class="number">3</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test <span class="keyword">values</span>(<span class="number">12</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> test <span class="keyword">values</span>(<span class="number">1234</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">12</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1234</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br></pre></td></tr></table></figure><p>从这个测试可以看出定义的id int(3)是可以存下1234的，接着带上ZEROFILL做测试。</p><h3 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h3><p>和测试1一样创建一个表，也是定义id int(3) 带上zerofill，测试结果如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> test1(id <span class="type">int</span>(<span class="number">3</span>) zerofill);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.52</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> test1 <span class="keyword">value</span>(<span class="number">12</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.15</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> test1 <span class="keyword">value</span>(<span class="number">1234</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.16</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> test1 <span class="keyword">value</span>(<span class="number">666666</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.14</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> id     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">012</span> <span class="operator">|</span> # 这个地方不够三位宽度会自动补零</span><br><span class="line"><span class="operator">|</span>   <span class="number">1234</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">666666</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="测试3"><a href="#测试3" class="headerlink" title="测试3"></a>测试3</h3><p>利用 test表（不带zerofill）和 test1表（带zerofill） 测试插入负数看看。</p><p>test表(可以正常存进去)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> test <span class="keyword">value</span>(<span class="number">-1234</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.07</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">12</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1234</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">-1234</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>test1表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span>  <span class="keyword">insert</span> <span class="keyword">into</span> test1 <span class="keyword">value</span>(<span class="number">-1234</span>);</span><br><span class="line">ERROR <span class="number">1264</span> (<span class="number">22003</span>): <span class="keyword">Out</span> <span class="keyword">of</span> <span class="keyword">range</span> <span class="keyword">value</span> <span class="keyword">for</span> <span class="keyword">column</span> <span class="string">&#x27;id&#x27;</span> <span class="keyword">at</span> <span class="type">row</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>从这个测试可以发现添加zerofill的时候，无法添加负数到表里。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span>  <span class="keyword">insert</span> <span class="keyword">into</span> test1 <span class="keyword">value</span>(<span class="number">0</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.10</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test1;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span> id     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">012</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>   <span class="number">1234</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">666666</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">000</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>以上测试中用到的 zerofill 翻译过来就是 零填充。</p><p>int后面的数字不能表示字段的长度，int(num)一般加上zerofill，才有效果。zerofill的作用一般可以用在一些编号相关的数字中，比如学生的编号 001 002 … 999这种，如果mysql没有零填充的功能，但是你又要格式化输出等长的数字编号时，那么你只能自己处理了。</p>]]></content>
      
      
      <categories>
          
          <category> 每日一问 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试,问答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot整合Hutool自定义注解实现数据脱敏</title>
      <link href="/2023/11/02/spring-boot-data-desensitization/"/>
      <url>/2023/11/02/spring-boot-data-desensitization/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是数据脱敏"><a href="#什么是数据脱敏" class="headerlink" title="什么是数据脱敏"></a>什么是数据脱敏</h1><p>数据脱敏（Data Masking），也称为数据遮蔽或数据隐藏，是一种数据保护技术，用于处理和存储敏感数据时，以减少或消除数据中的敏感信息，从而保护数据的隐私和安全。数据脱敏的主要目的是在保持数据可用性的同时，减少数据泄露和滥用的风险。<br>数据脱敏一般指数据库正常存储，返回前端时进行数据库处理！</p><h1 id="Hutool简介"><a href="#Hutool简介" class="headerlink" title="Hutool简介"></a>Hutool简介</h1><p>Hutool是一个小而全的Java工具类库，通过静态方法封装，降低相关API的学习成本，提高工作效率，使Java拥有函数式语言般的优雅。<br>Hutool是项目中“util”包友好的替代，它节省了开发人员对项目中公用类和公用工具方法的封装时间，使开发专注于业务，同时可以最大限度的避免封装不完善带来的bug。<br>虽然Hutool可能会有一些bug，比起小编写的还是强上不少的，所以选定它来！<br>现在最新版为：5.8.16，我们直接使用最新的，bug会少一些，功能会完善一些！<br>支持的脱敏规则：</p><ul><li>用户id</li><li>中文姓名</li><li>身份证号</li><li>座机号</li><li>手机号</li><li>地址</li><li>电子邮件</li><li>密码</li><li>中国大陆车牌，包含普通车辆、新能源车辆</li><li>银行卡</li></ul><h1 id="实战整合"><a href="#实战整合" class="headerlink" title="实战整合"></a>实战整合</h1><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><p>@JsonSerialize(using &#x3D; SensitiveInfoSerializer.class)用于指定在序列化时应该使用哪个自定义序列化器类<br>需要和下面的注解搭配使用SensitiveInfoSerializer我们自定义的序列化器才会生效<br>@JacksonAnnotationsInside 主要用于标记其他自定义注解，这意味着你可以在一个 Jackson 注解内部使用其他自定义注解，以组合各种注解来实现更复杂的序列化和反序列化逻辑。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JacksonAnnotationsInside</span></span><br><span class="line"><span class="meta">@JsonSerialize(using = SensitiveInfoSerializer.class)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Desensitization &#123;</span><br><span class="line"></span><br><span class="line">    DesensitizationType <span class="title function_">type</span><span class="params">()</span> <span class="keyword">default</span> DesensitizationType.DEFAULT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置不需要打码的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">prefixLen</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后置不需要打码的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">suffixLen</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遮罩字符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">maskingChar</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;*&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="支持类型枚举"><a href="#支持类型枚举" class="headerlink" title="支持类型枚举"></a>支持类型枚举</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">DesensitizationType</span> &#123;</span><br><span class="line">    <span class="comment">// 自定义规则</span></span><br><span class="line">    CUSTOMIZE_RULE,</span><br><span class="line">    <span class="comment">// 默认的</span></span><br><span class="line">    DEFAULT,</span><br><span class="line">    <span class="comment">//用户id</span></span><br><span class="line">    USER_ID,</span><br><span class="line">    <span class="comment">//中文名</span></span><br><span class="line">    CHINESE_NAME,</span><br><span class="line">    <span class="comment">//身份证号</span></span><br><span class="line">    ID_CARD,</span><br><span class="line">    <span class="comment">//座机号</span></span><br><span class="line">    FIXED_PHONE,</span><br><span class="line">    <span class="comment">//手机号</span></span><br><span class="line">    MOBILE_PHONE,</span><br><span class="line">    <span class="comment">//地址</span></span><br><span class="line">    ADDRESS,</span><br><span class="line">    <span class="comment">//电子邮件</span></span><br><span class="line">    EMAIL,</span><br><span class="line">    <span class="comment">//密码</span></span><br><span class="line">    PASSWORD,</span><br><span class="line">    <span class="comment">//中国大陆车牌，包含普通车辆、新能源车辆</span></span><br><span class="line">    CAR_LICENSE,</span><br><span class="line">    <span class="comment">//银行卡</span></span><br><span class="line">    BANK_CARD</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义序列化器"><a href="#自定义序列化器" class="headerlink" title="自定义序列化器"></a>自定义序列化器</h2><p>关于自定义的规则，大家可以根据自己的需求来写工具类，我这里简单使用Hutool的工具来了！<br>StrUtil.replace(value, prefixLen, suffixLen, maskingChar)<br>StrUtil.hide(value, prefixLen, suffixLen)<br>createContextual 方法首先在序列化过程开始时被调用，返回的序列化器实例将用于后续的序列化过程。<br>serialize 方法责实际的序列化逻辑，将字段的值转换为JSON，并可以在其中执行自定义的脱敏逻辑。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据脱敏序列化器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SensitiveInfoSerializer</span> <span class="keyword">extends</span> <span class="title class_">JsonSerializer</span>&lt;String&gt; <span class="keyword">implements</span> <span class="title class_">ContextualSerializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">useMasking</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> DesensitizationType type;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> prefixLen;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> suffixLen;</span><br><span class="line">    <span class="keyword">private</span> String maskingChar;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(String value, JsonGenerator gen, SerializerProvider serializers)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (useMasking &amp;&amp; value != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">                <span class="keyword">case</span> MOBILE_PHONE:</span><br><span class="line">                    gen.writeString(DesensitizedUtil.mobilePhone(value));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ID_CARD:</span><br><span class="line">                    gen.writeString(DesensitizedUtil.idCardNum(value, prefixLen, suffixLen));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> CUSTOMIZE_RULE:</span><br><span class="line"><span class="comment">//                    gen.writeString(StrUtil.replace(value, prefixLen, suffixLen, maskingChar));</span></span><br><span class="line">                    gen.writeString(StrUtil.hide(value, prefixLen, suffixLen));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> CHINESE_NAME:</span><br><span class="line">                    gen.writeString(DesensitizedUtil.chineseName(value));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> DEFAULT:</span><br><span class="line">                    gen.writeString(value);</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    gen.writeString(value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            gen.writeObject(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> JsonSerializer&lt;?&gt; createContextual(SerializerProvider prov, BeanProperty property) &#123;</span><br><span class="line">        <span class="keyword">if</span> (property != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Desensitization</span> <span class="variable">desensitization</span> <span class="operator">=</span> property.getAnnotation(Desensitization.class);</span><br><span class="line">            <span class="keyword">if</span> (desensitization != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.type = desensitization.type();</span><br><span class="line">                <span class="built_in">this</span>.prefixLen = desensitization.prefixLen();</span><br><span class="line">                <span class="built_in">this</span>.suffixLen = desensitization.suffixLen();</span><br><span class="line">                <span class="built_in">this</span>.maskingChar = desensitization.maskingChar();</span><br><span class="line">                useMasking = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实体类应用"><a href="#实体类应用" class="headerlink" title="实体类应用"></a>实体类应用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Desensitization(type = DesensitizationType.ID_CARD,prefixLen = 6,suffixLen = 16)</span></span><br><span class="line">    <span class="keyword">private</span> String cardId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Desensitization(type = DesensitizationType.CHINESE_NAME)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Desensitization(type = DesensitizationType.MOBILE_PHONE)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Desensitization(type = DesensitizationType.CUSTOMIZE_RULE,prefixLen = 3,suffixLen = 6)</span></span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文通过Spring Boot与Hutool库的结合使用自定义注解，提供了一个简单而强大的方式来实现数据脱敏。希望能帮助到你，成功地实现数据脱敏功能，并提高应用程序的安全性。</p><p>本次例子脱敏选项没有演示全，大家可以自行补充完成，成为你们需要的数据脱敏策略，从而完美的处理用户数据脱敏问题！</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA,SPRINGBOOT,脱敏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins自动部署（远程编译、部署）</title>
      <link href="/2023/08/15/jenkins-gitlab/"/>
      <url>/2023/08/15/jenkins-gitlab/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a3957b9fde46a209d21e2fd8e18b8a29fbba63554c59a2e9228043f3c939d557"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins,部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring如何解决循环依赖</title>
      <link href="/2023/08/14/spring-circular-dependency/"/>
      <url>/2023/08/14/spring-circular-dependency/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Spring的解决循环依赖是有前置条件的，要解决循环依赖我们首先要了解Spring Bean对象的创建过程和依赖注入的方式。</p><h1 id="什么是循环依赖"><a href="#什么是循环依赖" class="headerlink" title="什么是循环依赖"></a>什么是循环依赖</h1><p>通俗来讲，就是A依赖B或者B依赖A，或者C依赖自己本身，或是三个以上，例如A依赖B，B依赖C，C又依赖A。如下图：<br><img src="/img/md/spring-circular-dependency/efbac14bcc9445d48308403ce0edf80b.png" alt="循环依赖图解"></p><h1 id="Spring实例Bean的本质"><a href="#Spring实例Bean的本质" class="headerlink" title="Spring实例Bean的本质"></a>Spring实例Bean的本质</h1><p>Spring在实例化一个bean的时候，是首先递归的实例化其所依赖的所有bean，直到某个bean没有依赖其他bean，此时就会将该实例返回，然后反递归的将获取到的bean设置为各个上层bean的属性的。</p><h1 id="循环依赖主要场景"><a href="#循环依赖主要场景" class="headerlink" title="循环依赖主要场景"></a>循环依赖主要场景</h1><p><img src="/img/md/spring-circular-dependency/fe206631c4b046a0a058b20461dbb318.png" alt="循环依赖场景"></p><h1 id="什么情况下循环依赖可以被解决"><a href="#什么情况下循环依赖可以被解决" class="headerlink" title="什么情况下循环依赖可以被解决"></a>什么情况下循环依赖可以被解决</h1><blockquote><p>Spring解决循环依赖是有前置条件的</p></blockquote><p>出现循环依赖的Bean必须要是单例(singleton)，如果依赖prototype则完全不会有此需求。<br>依赖注入的方式不能全是构造器注入的方式。<br><img src="/img/md/spring-circular-dependency/d1a61853fd3348fb94b65ab10dc9fdf3.png" alt="循环依赖解决情况"></p><h1 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h1><p>Spring是通过三级缓存来解决上述问题的：</p><p>一级缓存： singletonObjects存储的是所有创建好了的单例Bean<br>二级缓存：earlySingletonObjects完成实例化，但是还未进行属性注入及初始化的对象<br>三级缓存：singletonFactories提前暴露的一个单例工厂，二级缓存中存储的就是从这个工厂中获取到的对象。</p><p>三级缓存解决循环依赖流程：</p><ol><li>获取A时首先会尝试从一级缓存singletonObjects 中获取；</li><li>获取不到就再从二级缓存earlySingletonObjects中获取；</li><li>若是还没有则尝试从三级缓存singletonFactories获取；</li><li>还是没有获取到则再尝试创建A对象</li><li>会执行doGetBean-&gt;createBean-&gt;createBeanInstance并使用构造器实例化</li><li>在尝试给A进行初始化时，由于B不存在无法完成初始化，则将半成品A放入第二级缓存中，进入B的创建流程。</li><li>与先前过程相似，在第三级缓存中放入beanName和表达式sharedInstance，进入B的初始化过程</li><li>由于在第二级缓存中可以找到A，则B可以完成初始化，将成品Bean放入一级缓存中备用，删除三级缓存中的B</li><li>同时完成A的初始化，并删除二级缓存中的半成品A</li></ol><p>具体流程图如下：<br><img src="/img/md/spring-circular-dependency/e0842591fdcd47c282f3649fe565859b.png" alt="循环依赖解决情况"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Spring通过三级缓存解决了循环依赖，其中一级缓存为单例池（singletonObjects），二级缓存为早期曝光对象earlySingletonObjects，三级缓存为早期曝光对象工厂（singletonFactories）。<br>当A、B两个类发生循环引用时，在A完成实例化后，就使用实例化后的对象去创建一个对象工厂，添加到三级缓存中，如果A被AOP代理，那么通过这个工厂获取到的就是A代理后的对象，如果A没有被AOP代理，那么这个工厂获取到的就是A实例化的对象。<br>当A进行属性注入时，会去创建B，同时B又依赖了A，所以创建B的同时又会去调用getBean(a)来获取需要的依赖，此时的getBean(a)会从缓存中获取。</p><ul><li>先获取到三级缓存中的工厂；</li><li>调用对象工工厂的getObject方法来获取到对应的对象，得到这个对象后将其注入到B中。紧接着B会走完它的生命周期流程，包括初始化、后置处理器等。</li><li>当B创建完后，会将B再注入到A中，此时A再完成它的整个生命周期。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA,SPRING,循环依赖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jar包docker镜像作成</title>
      <link href="/2023/08/07/docker-jar/"/>
      <url>/2023/08/07/docker-jar/</url>
      
        <content type="html"><![CDATA[<h1 id="jar项目打包成docker镜像部署"><a href="#jar项目打包成docker镜像部署" class="headerlink" title="jar项目打包成docker镜像部署"></a>jar项目打包成docker镜像部署</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>部署jar项目，可以mvn clean package之后，直接放到启动路径下即可，今天给大家介绍创建docker镜像，使用docker镜像启动容器运行部署jar项目的方式，可以尝试尝试，原理和使用直接拖动部署一样，不过是使用的docker容器而已，内部还是使用的是jdk作为基础镜像。</p><h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><p>可以参考<a href="https://xiaoweixiaoyun.github.io/2022/08/07/docker-install/">docker-linux安装教程</a></p><h2 id="编写dockerfile并发布"><a href="#编写dockerfile并发布" class="headerlink" title="编写dockerfile并发布"></a>编写dockerfile并发布</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM maven:3.6.3-openjdk-11-slim  AS builder</span><br><span class="line"></span><br><span class="line">WORKDIR &quot;/server&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主要文件</span></span><br><span class="line">COPY ./settings.xml /tmp/ck-web-back/settings.xml</span><br><span class="line">COPY ./pom.xml /tmp/ck-web-back/pom.xml</span><br><span class="line">COPY ./src /tmp/ck-web-back/src/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">package jar</span></span><br><span class="line">RUN cd /tmp/ck-web-back &amp;&amp; mvn clean package --settings ./settings.xml -Dmaven.test.skip=true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Second stage: minimal runtime environment</span></span><br><span class="line">FROM openjdk:11.0.16</span><br><span class="line"></span><br><span class="line">RUN ln -snf /usr/share/zoneinfo/Asia/Tokyo /etc/localtime &amp;&amp; echo Asia/Tokyo &gt; /etc/timezone</span><br><span class="line">RUN sed -i &#x27;s/TLSv1, TLSv1.1,//&#x27; /usr/local/openjdk-11/conf/security/java.security</span><br><span class="line">RUN sed -i &#x27;s/3DES_EDE_CBC,//&#x27; /usr/local/openjdk-11/conf/security/java.security</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">copy jar from the first stage</span></span><br><span class="line">COPY --from=builder /tmp/ck-web-back/target/centralkitchen.jar /root/centralkitchen.jar</span><br><span class="line"></span><br><span class="line">CMD [ &quot;java&quot;, &quot;-jar&quot;, &quot;/root/centralkitchen.jar&quot; ]</span><br><span class="line"></span><br><span class="line">EXPOSE 8083</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="创建Docker镜像"><a href="#创建Docker镜像" class="headerlink" title="创建Docker镜像"></a>创建Docker镜像</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build . -t dokcerImage:last</span><br></pre></td></tr></table></figure><ul><li>docker build 创建Docker镜像</li><li>. 使用当前目录下的Dockerfile文件</li><li>-t 使用tag 标记版本</li><li>dockerImage:last 创建名为dockerImage的镜像，并标记为last（最新）版本</li></ul><h2 id="创建Docker-容器"><a href="#创建Docker-容器" class="headerlink" title="创建Docker 容器"></a>创建Docker 容器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 80:80 --name dockerContainer dockerImage:last</span><br></pre></td></tr></table></figure><ul><li>docker run :创建并运行docker容器</li><li>-d 后台运行</li><li>80:80 将当前服务的80端口（冒号前的80），映射到容器的80端口（冒号后的80）</li><li>–name 给容器命名，便于之后定位容器</li><li>dockerImage:last 基于dockerImage 最新版本镜像创建的容器</li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker,打包,镜像 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组对象分组引发的思考</title>
      <link href="/2023/08/06/js-array-group/"/>
      <url>/2023/08/06/js-array-group/</url>
      
        <content type="html"><![CDATA[<h1 id="通常做法"><a href="#通常做法" class="headerlink" title="通常做法"></a>通常做法</h1><blockquote><p>循环数组，找到指定相同的key，进行分组</p></blockquote><p>比如下面的代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> people = [</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;test1&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">sex</span>:<span class="string">&#x27;male&#x27;</span>, <span class="attr">tel</span>: <span class="string">&#x27;17853538076&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;test2&#x27;</span>, <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">sex</span>:<span class="string">&#x27;female&#x27;</span>, <span class="attr">tel</span>: <span class="string">&#x27;17853538071&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;test3&#x27;</span>, <span class="attr">age</span>: <span class="number">22</span>, <span class="attr">sex</span>:<span class="string">&#x27;male&#x27;</span>, <span class="attr">tel</span>: <span class="string">&#x27;17853538072&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;test4&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">sex</span>:<span class="string">&#x27;female&#x27;</span>, <span class="attr">tel</span>: <span class="string">&#x27;17853538073&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;test5&#x27;</span>, <span class="attr">age</span>: <span class="number">22</span>, <span class="attr">sex</span>:<span class="string">&#x27;male&#x27;</span>, <span class="attr">tel</span>: <span class="string">&#x27;17853538077&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">groupBy</span>(<span class="params">arr, propName</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = item[propName];</span><br><span class="line">    <span class="keyword">if</span> (!result[key]) &#123;</span><br><span class="line">      result[key] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    result[key].<span class="title function_">push</span>(item);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 根据姓名分组</span></span><br><span class="line"><span class="title function_">groupBy</span>(people, <span class="string">&#x27;sex&#x27;</span>);</span><br><span class="line"><span class="comment">// 根据年龄分组</span></span><br><span class="line"><span class="title function_">groupBy</span>(people, <span class="string">&#x27;age&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="针对数组对象组合式分组怎么去做？"><a href="#针对数组对象组合式分组怎么去做？" class="headerlink" title="针对数组对象组合式分组怎么去做？"></a>针对数组对象组合式分组怎么去做？</h1><blockquote><p>我们发现共同方法里面变化的值主要是key，那我们可以动态的去找key，利用函数的方式，最后参数归一化处理，利用基本数据类型判断即可。</p></blockquote><p>比如下面的代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> people = [</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;test1&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">sex</span>:<span class="string">&#x27;male&#x27;</span>, <span class="attr">tel</span>: <span class="string">&#x27;17853538076&#x27;</span>, <span class="attr">address</span>: &#123;</span><br><span class="line">    <span class="attr">provice</span>: <span class="string">&#x27;山东省&#x27;</span>,</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&#x27;聊城市&#x27;</span></span><br><span class="line">  &#125;&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;test2&#x27;</span>, <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">sex</span>:<span class="string">&#x27;female&#x27;</span>, <span class="attr">tel</span>: <span class="string">&#x27;17853538071&#x27;</span>, <span class="attr">address</span>: &#123;</span><br><span class="line">    <span class="attr">provice</span>: <span class="string">&#x27;山东省&#x27;</span>,</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&#x27;烟台市&#x27;</span></span><br><span class="line">  &#125;&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;test3&#x27;</span>, <span class="attr">age</span>: <span class="number">22</span>, <span class="attr">sex</span>:<span class="string">&#x27;male&#x27;</span>, <span class="attr">tel</span>: <span class="string">&#x27;17853538072&#x27;</span>, <span class="attr">address</span>: &#123;</span><br><span class="line">    <span class="attr">provice</span>: <span class="string">&#x27;山东省&#x27;</span>,</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&#x27;聊城市&#x27;</span></span><br><span class="line">  &#125;&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;test4&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">sex</span>:<span class="string">&#x27;female&#x27;</span>, <span class="attr">tel</span>: <span class="string">&#x27;17853538073&#x27;</span>, <span class="attr">address</span>: &#123;</span><br><span class="line">    <span class="attr">provice</span>: <span class="string">&#x27;山东省&#x27;</span>,</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&#x27;聊城市&#x27;</span></span><br><span class="line">  &#125;&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;test5&#x27;</span>, <span class="attr">age</span>: <span class="number">22</span>, <span class="attr">sex</span>:<span class="string">&#x27;male&#x27;</span>, <span class="attr">tel</span>: <span class="string">&#x27;17853538077&#x27;</span>, <span class="attr">address</span>: &#123;</span><br><span class="line">    <span class="attr">provice</span>: <span class="string">&#x27;山东省&#x27;</span>,</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&#x27;烟台市&#x27;</span></span><br><span class="line">  &#125;&#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">groupBy</span>(<span class="params">arr, generateKey</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> generateKey === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> propName = generateKey;</span><br><span class="line">    generateKey = <span class="function">(<span class="params">item</span>) =&gt;</span> item[propName];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> result = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = <span class="title function_">generateKey</span>(item);</span><br><span class="line">    <span class="keyword">if</span> (!result[key]) &#123;</span><br><span class="line">      result[key] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    result[key].<span class="title function_">push</span>(item);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 根据年龄分组</span></span><br><span class="line"><span class="title function_">groupBy</span>(people, <span class="string">&#x27;age&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据年龄性别分组</span></span><br><span class="line"><span class="title function_">groupBy</span>(people, <span class="function">(<span class="params">item</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;item.age&#125;</span>-<span class="subst">$&#123;item.sex&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据省份分组</span></span><br><span class="line"><span class="title function_">groupBy</span>(people, <span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">address</span>.<span class="property">provice</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据城市分组</span></span><br><span class="line"><span class="title function_">groupBy</span>(people, <span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">address</span>.<span class="property">city</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端,JS,闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP</title>
      <link href="/2023/08/02/spring-aop/"/>
      <url>/2023/08/02/spring-aop/</url>
      
        <content type="html"><![CDATA[<h1 id="AOP的定义"><a href="#AOP的定义" class="headerlink" title="AOP的定义"></a>AOP的定义</h1><p>AOP （Aspect Orient Programming）,直译过来就是 面向切面编程,AOP 是一种编程思想，是面向对象编程（OOP）的一种补充。</p><p>面向切面编程，实现在不修改源代码的情况下给程序动态统一添加额外功能的一种技术，如下图所示：<br><img src="/img/md/spring-aop/d353c269ee2b4228b29cc70b049877ea.png" alt="AOP图解"></p><p>AOP可以拦截指定的方法并且对方法增强，而且无需侵入到业务代码中，使业务与非业务处理逻辑分离，比如Spring的事务，通过事务的注解配置，Spring会自动在业务方法中开启、提交业务，并且在业务处理失败时，执行相应的回滚策略。</p><h1 id="AOP的作用"><a href="#AOP的作用" class="headerlink" title="AOP的作用"></a>AOP的作用</h1><p>AOP 采取横向抽取机制（动态代理），取代了传统纵向继承机制的重复性代码，其应用主要体现在事务处理、日志管理、权限控制、异常处理等方面。</p><p>主要作用是分离功能性需求和非功能性需求，使开发人员可以集中处理某一个关注点或者横切逻辑，减少对业务代码的侵入，增强代码的可读性和可维护性。</p><p>简单的说，AOP 的作用就是保证开发者在不修改源代码的前提下，为系统中的业务组件添加某种通用功能。</p><h1 id="AOP的应用场景"><a href="#AOP的应用场景" class="headerlink" title="AOP的应用场景"></a>AOP的应用场景</h1><p>AOP可以拦截指定的方法，并且对方法增强，比如：事务、日志、权限、性能监测等增强，而且无需侵入到业务代码中，使业务与非业务处理逻辑分离。</p><h1 id="AOP核心概念"><a href="#AOP核心概念" class="headerlink" title="AOP核心概念"></a>AOP核心概念</h1><p><img src="/img/md/spring-aop/299bbecec9784800a4a1690653814b68.png" alt="AOP术语"></p><h1 id="AOP通知分类"><a href="#AOP通知分类" class="headerlink" title="AOP通知分类"></a>AOP通知分类</h1><p><img src="/img/md/spring-aop/502119ede09f499fa52a920794e413d7.png" alt="AOP通知"></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA,SPRING,AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是浏览器缓存</title>
      <link href="/2023/05/07/brower-caching/"/>
      <url>/2023/05/07/brower-caching/</url>
      
        <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>浏览器缓存(Brower Caching)是浏览器在本地磁盘对用户最近请求过的文档进行存储，当访问者再次访问同一页面时，浏览器就可以直接从本地磁盘加载文档。</p></blockquote><h1 id="浏览器是如何判断是否使用缓存的"><a href="#浏览器是如何判断是否使用缓存的" class="headerlink" title="浏览器是如何判断是否使用缓存的"></a>浏览器是如何判断是否使用缓存的</h1><p><img src="/img/md/pictures/6038331-613485beb848e6a0.png" alt="缓存机制"></p><p>1.浏览器第一次加载资源，服务器返回200，浏览器将资源文件从服务器上请求下载下来，并把response header及该请求的返回时间一并缓存；</p><p>2.下一次加载资源时，先比较当前时间和上一次返回200时的时间差，如果没有超过cache-control设置的max-age，则没有过期，命中强缓存，不发请求直接从本地缓存读取该文件（如果浏览器不支持HTTP1.1，则用expires判断是否过期）；如果时间过期，则向服务器发送header带有If-None-Match和If-Modified-Since的请求</p><p>3.服务器收到请求后，优先根据Etag的值判断被请求的文件有没有做修改，Etag值一致则没有修改，命中协商缓存，返回304；如果不一致则有改动，直接返回新的资源文件带上新的Etag值并返回200；；</p><p>4.如果服务器收到的请求没有Etag值，则将If-Modified-Since和被请求文件的最后修改时间做比对，一致则命中协商缓存，返回304；不一致则返回新的last-modified和文件并返回200；</p><h1 id="浏览器缓存的优点"><a href="#浏览器缓存的优点" class="headerlink" title="浏览器缓存的优点"></a>浏览器缓存的优点</h1><ol><li>减少了冗余的数据传输，节省了网费</li><li>减少了服务器的负担，大大提升了网站的性能</li><li>加快了客户端加载网页的速度</li></ol><h1 id="浏览器缓存的分类"><a href="#浏览器缓存的分类" class="headerlink" title="浏览器缓存的分类"></a>浏览器缓存的分类</h1><blockquote><p>缓存协商和彻底缓存，也有称之为协商缓存和强缓存。</p></blockquote><h2 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h2><blockquote><p>不会向服务器发送请求，直接从缓存中读取资源，在chrome控制台的network选项中可以看到该请求返回200的状态码;</p></blockquote><p>Expires：response header里的过期时间，浏览器再次加载资源时，如果在这个过期时间内，则命中强缓存。</p><p>Cache-Control：当值设为max-age&#x3D;300时，则代表在这个请求正确返回时间（浏览器也会记录下来）的5分钟内再次加载资源，就会命中强缓存。</p><p>cache-control除了该字段外，还有下面几个比较常用的设置值：</p><p>-no-cache：不使用本地缓存。需要使用缓存协商，先与服务器确认返回的响应是否被更改，如果之前的响应中存在ETag，那么请求的时候会与服务端验证，如果资源未被更改，则可以避免重新下载。</p><p>-no-store：直接禁止浏览器缓存数据，每次用户请求该资源，都会向服务器发送一个请求，每次都会下载完整的资源。</p><p>-public：可以被所有的用户缓存，包括终端用户和CDN等中间代理服务器。</p><p>-private：只能被终端用户的浏览器缓存，不允许CDN等中继缓存服务器对其缓存。</p><h2 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h2><blockquote><p>向服务器发送请求，服务器会根据这个请求的request header的一些参数来判断是否命中协商缓存，如果命中，则返回304状态码并带上新的response header通知浏览器从缓存中读取资源；</p></blockquote><p>Last-Modify&#x2F;If-Modify-Since：浏览器第一次请求一个资源的时候，服务器返回的header中会加上Last-Modify，Last-modify是一个时间标识该资源的最后修改时间；当浏览器再次请求该资源时，request的请求头中会包含If-Modify-Since，该值为缓存之前返回的Last-Modify。服务器收到If-Modify-Since后，根据资源的最后修改时间判断是否命中缓存</p><p>Etag&#x2F;If-None-Match：web服务器响应请求时，告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器决定）。If-None-Match：发现资源具有Etage声明，则再次向web服务器请求时带上头If-None-Match （Etag的值）。web服务器收到请求后发现有头If-None-Match 则与被请求资源的相应校验串进行比对，决定是否命中协商缓存；</p><h2 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h2><blockquote><p>都是从客户端缓存中读取资源；区别是强缓存不会发请求，协商缓存会发请求。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试,缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>for 循环与 forEach 的区别?</title>
      <link href="/2023/02/08/for-forEach/"/>
      <url>/2023/02/08/for-forEach/</url>
      
        <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ol><li>for 循环可以使用 break 跳出循环，但 forEach 不能。</li><li>for 循环可以控制循环起点（i初始化的数字决定循环的起点）， forEach 只能默认从索引 0 开始。</li><li>for 循环过程中支持修改索引（修改 i ），但 forEach 做不到（底层控制 index 自增，无法左右它）。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 每日一问 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试,问答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是事件轮询(EventLoop)</title>
      <link href="/2023/02/07/event-loop/"/>
      <url>/2023/02/07/event-loop/</url>
      
        <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>一个用来等待和发送消息和事件的程序结构。</p></blockquote><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ol><li>所有任务都在主线程上执行，形成一个执行栈。</li><li>主线程发现有异步任务，如果是微任务就把他放到微任务的消息队列里，如果是宏任务就把他放到宏任务的消息队列里。</li><li>执行栈所有同步任务执行完毕。</li><li>执行微任务队列，之后再执行宏任务队列。</li><li>轮询第 4 步。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 每日一问 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试,问答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是PromiseLike</title>
      <link href="/2023/02/06/promise-like/"/>
      <url>/2023/02/06/promise-like/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><blockquote><p>如何判断一个值是不是PromiseLike？</p></blockquote><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断一个值是不是PromiseLike</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isPromiseLike</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (value !== <span class="literal">null</span> </span><br><span class="line">  &amp;&amp; (<span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">typeof</span> value === <span class="string">&#x27;function&#x27;</span>) </span><br><span class="line">  &amp;&amp; <span class="keyword">typeof</span> value.<span class="property">then</span> === <span class="string">&#x27;function&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 每日一问 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试、问答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端代码docker镜像作成</title>
      <link href="/2022/12/07/docker-web/"/>
      <url>/2022/12/07/docker-web/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue项目打包成docker镜像部署-以vue举例"><a href="#Vue项目打包成docker镜像部署-以vue举例" class="headerlink" title="Vue项目打包成docker镜像部署(以vue举例)"></a>Vue项目打包成docker镜像部署(以vue举例)</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>部署Vue项目，可以build之后，直接放到nginx下面即可，今天给大家介绍创建docker镜像，使用docker镜像启动容器运行部署Vue项目的方式，可以尝试尝试，原理和使用nginx部署一样，不过是使用的docker容器而已，内部还是使用的是nginx作为基础镜像。</p><h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><p>可以参考<a href="https://xiaoweixiaoyun.github.io/2022/08/07/docker-install/">docker-linux安装教程</a></p><h2 id="编写dockerfile并发布"><a href="#编写dockerfile并发布" class="headerlink" title="编写dockerfile并发布"></a>编写dockerfile并发布</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dokcerfile</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">build stage</span></span><br><span class="line">FROM node:lts-alpine as build-stage</span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY package*.json ./</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sass单独设置拉取地址（速度快的话可以不用）</span></span><br><span class="line">RUN npm set sass_binary_site https://npm.taobao.org/mirrors/node-sass</span><br><span class="line">RUN npm config set registry https://registry.npm.taobao.org/</span><br><span class="line">RUN npm install</span><br><span class="line">COPY . .</span><br><span class="line">RUN npm run build</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">production stafe</span> </span><br><span class="line">FROM nginx:stable-alpine as production-stage</span><br><span class="line">COPY --from=build-stage /app/dist /usr/share/nginx/html</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除原本的默认配置</span></span><br><span class="line">RUN rm /etc/nginx/conf.d/default.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从名为builder的阶段，复制nginx配置文件到/etc/nginx/conf.d/</span></span><br><span class="line">COPY --from=builder /app/nginx.conf /etc/nginx/conf.d/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment"># 添加时区环境变量，亚洲，上海</span></span></span><br><span class="line">ENV TimeZone=Asia/Shanghai</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD [&quot;nginx&quot;,&quot;-g&quot;,&quot;Daemon off;&quot;]</span><br></pre></td></tr></table></figure><ul><li>FROM node:lts-alpine as build-stage 基于node lst-alpine(版本号) 版本镜像 并通过构建阶段命名为build-stage</li><li>WORKDIR &#x2F;app 将工作区设为app与其他系统文件隔离</li><li>COPY package*.json .&#x2F; 将package.json 与package-lock.json 到&#x2F;app目录</li><li>RUN npm install 运行npm install 在容器中安装依赖</li><li>COPY . . 拷贝其他文件到 &#x2F;app 分两次拷贝是因为要保持node_modules一致</li><li>RUN npm run build :运行npm run build（执行环境）</li></ul><p>将构建分为两个阶段，第一阶段基于node镜像，第二阶段基于Nginx 镜像</p><ul><li>FROM nginx:stable-alpine as production-stage 基于nginx stable-alpine 版本镜像 并将有nginx 的环境阶段命名为productuion-stage</li><li>COPY –from&#x3D;build-stage &#x2F;app&#x2F;dist &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html 通过–from 参数可以引用build-stage 阶段生成的产物，并将其复制到 &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</li><li>EXPOSE 80: 容器对外暴漏80端口</li><li>CMD [“nginx” ,”-g”,”daemon off”] 容器创建时运行 nginx -g daemon off 命令 一旦COM对映命令结束 容器就会被销毁 所以通过daemon off rang Nginx 一直在前台运行</li></ul><h2 id="编写nginx默认配置"><a href="#编写nginx默认配置" class="headerlink" title="编写nginx默认配置"></a>编写nginx默认配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       9099;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    client_max_body_size 10M;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    gzip_buffers 16 64k;</span><br><span class="line">    gzip_http_version 1.1;</span><br><span class="line">    gzip_comp_level 9;</span><br><span class="line">    gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml application/x-httpd-php image/jpeg image/gif image/png font/ttf font/otf image/svg+xml;</span><br><span class="line">    gzip_vary on;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建Docker镜像"><a href="#创建Docker镜像" class="headerlink" title="创建Docker镜像"></a>创建Docker镜像</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build . -t dokcerImage:last</span><br></pre></td></tr></table></figure><ul><li>docker build 创建Docker镜像</li><li>. 使用当前目录下的Dockerfile文件</li><li>-t 使用tag 标记版本</li><li>dockerImage:last 创建名为dockerImage的镜像，并标记为last（最新）版本</li></ul><h2 id="创建Docker-容器"><a href="#创建Docker-容器" class="headerlink" title="创建Docker 容器"></a>创建Docker 容器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 80:80 --name dockerContainer dockerImage:last</span><br></pre></td></tr></table></figure><ul><li>docker run :创建并运行docker容器</li><li>-d 后台运行</li><li>80:80 将当前服务的80端口（冒号前的80），映射到容器的80端口（冒号后的80）</li><li>–name 给容器命名，便于之后定位容器</li><li>dockerImage:last 基于dockerImage 最新版本镜像创建的容器</li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker,打包,镜像 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js中的this指向</title>
      <link href="/2022/09/16/js-this/"/>
      <url>/2022/09/16/js-this/</url>
      
        <content type="html"><![CDATA[<h1 id="函数内的this"><a href="#函数内的this" class="headerlink" title="函数内的this"></a>函数内的this</h1><blockquote><p>普通函数内的this分为两种情况，严格模式下和非严格模式下。</p></blockquote><h2 id="严格模式下"><a href="#严格模式下" class="headerlink" title="严格模式下"></a>严格模式下</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="string">&#x27;use strict&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(); <span class="comment">//undefined</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">test</span>(); <span class="comment">//window</span></span><br></pre></td></tr></table></figure><h2 id="非严格模式下"><a href="#非严格模式下" class="headerlink" title="非严格模式下"></a>非严格模式下</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(); <span class="comment">//window</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">test</span>(); <span class="comment">//window</span></span><br></pre></td></tr></table></figure><blockquote><p>在普通函数中this指向window、匿名函数的this也指向的是window</p></blockquote><h1 id="对象中的this"><a href="#对象中的this" class="headerlink" title="对象中的this"></a>对象中的this</h1><blockquote><p>对象内部方法的this指向调用这些方法的对象，也就是谁调用就指向谁</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">  <span class="attr">skill</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;test2&#x27;</span>,</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">skill</span>(); <span class="comment">//test</span></span><br></pre></td></tr></table></figure><blockquote><p>函数的定义位置不影响其this指向，this指向只和调用函数的对象有关。<br>多层嵌套的对象，内部方法的this指向离被调用函数最近的对象。</p></blockquote><h1 id="箭头函数中的this"><a href="#箭头函数中的this" class="headerlink" title="箭头函数中的this"></a>箭头函数中的this</h1><blockquote><p>箭头函数：this指向于函数作用域所用的对象。</p></blockquote><ul><li>箭头函数的重要特征：箭头函数中没有this和arguments，是真的没有！</li><li>箭头函数没有自己的this指向，它会捕获自己定义所处的外层执行环境，并且继承这个this值,指向当前定义时所在的对象。箭头函数的this指向在被定义的时候就确定了，之后永远都不会改变。即使使用call()、apply()、bind()等方法改变this指向也不可以。</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">  <span class="attr">functions</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">functions</span>(); <span class="comment">//window</span></span><br></pre></td></tr></table></figure><h1 id="构造函数中的this"><a href="#构造函数中的this" class="headerlink" title="构造函数中的this"></a>构造函数中的this</h1><blockquote><p>构造函数中的this是指向实例。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age,sex</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;wcc&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;boy&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>); <span class="comment">//wcc</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">age</span>); <span class="comment">//18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">sex</span>); <span class="comment">//boy</span></span><br></pre></td></tr></table></figure><h1 id="原型链中的this"><a href="#原型链中的this" class="headerlink" title="原型链中的this"></a>原型链中的this</h1><blockquote><p>this这个值在一个继承机制中，仍然是指向它原本属于的对象，而不是从原型链上找到它时，它所属于的对象。</p></blockquote><h1 id="改变this指向的方法"><a href="#改变this指向的方法" class="headerlink" title="改变this指向的方法"></a>改变this指向的方法</h1><h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><blockquote><p><code>call(a, b, c)</code>方法接收三个参数，第一个是this指向，第二个，三个是传递给函数的实参，可以是数字，字符串，数组等类型的数据类型都可以。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">n1,n2</span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  </span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(n1,n2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用call()方法</span></span><br><span class="line">fn.<span class="title function_">call</span>();<span class="comment">//=&gt;this:window;</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">fn</span>:fn&#125;;</span><br><span class="line">fn.<span class="title function_">call</span>(obj);<span class="comment">//=&gt;this:obj;n1,n2:undefined</span></span><br><span class="line">fn.<span class="title function_">call</span>(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//=&gt;this: 1;n1=2,n2=undefined;</span></span><br><span class="line">fn.<span class="title function_">call</span>(obj,<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//=&gt;this: obj;n1=1,n2=2;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Call方法的几个特殊属性</span></span><br><span class="line"><span class="comment">//非严格模式下</span></span><br><span class="line">fn.<span class="title function_">call</span>(<span class="literal">undefined</span>);<span class="comment">//this=&gt;window</span></span><br><span class="line">fn.<span class="title function_">call</span>(<span class="literal">null</span>);<span class="comment">//this=&gt;window</span></span><br><span class="line"><span class="comment">//严格模式下</span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span></span><br><span class="line">fn.<span class="title function_">call</span>(<span class="literal">undefined</span>);<span class="comment">//this=&gt;undefined</span></span><br><span class="line">fn.<span class="title function_">call</span>(<span class="literal">null</span>);<span class="comment">//this=&gt;null</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h2><blockquote><p><code>apply(a, [b])</code>和call基本上一致，唯一区别在于传参方式，apply把需要传递给fn()的参数放到一个数组（或者类数组）中传递进去，虽然写的是一个数组，但是也相当于给fn()一个个的传递。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//apply方法的使用和call方法基本相同，唯一的区别是，apply方法传参要求是数组类型的，数组内可以任意形式的数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span> (n1,n2)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n1,n2)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">fn</span>:fn&#125;;</span><br><span class="line"><span class="comment">//调用apply()方法</span></span><br><span class="line">fn.<span class="title function_">applay</span>(obj,[<span class="number">1</span>,<span class="number">2</span>]);</span><br><span class="line">fn.<span class="title function_">applay</span>(obj,<span class="number">1</span>,<span class="number">2</span>)；<span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line">fn.<span class="title function_">applay</span>(obj,[<span class="number">11</span>,<span class="string">&#x27;apply&#x27;</span>,&#123;<span class="attr">a</span>:<span class="number">123</span>&#125;]);<span class="comment">//注意第二个参数必须是数组，否则会报错</span></span><br></pre></td></tr></table></figure><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><blockquote><p>bind（a, b, c）：语法和call一模一样，区别在于立即执行还是等待执行，bind不兼容IE6~8<br>bind与call的唯一区别就是call直接改变函数test的指向，而bind是生成了一个新函数test2()，该函数改变了指向。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//call()方法：改变fn中的this，并且把fn立即执行</span></span><br><span class="line">fn.<span class="title function_">call</span>(obj, <span class="number">1</span>, <span class="number">2</span>); </span><br><span class="line"><span class="comment">//bind()方法：改变fn中的this，fn并不执行</span></span><br><span class="line">fn.<span class="title function_">bind</span>(obj, <span class="number">1</span>, <span class="number">2</span>); </span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//bind和call方法调用形式类似，但是原理完全不同</span></span><br><span class="line">fn.<span class="title function_">call</span>(obj,<span class="number">10</span>,<span class="number">20</span>);<span class="comment">//=&gt;fn先执行，将fn内的this指向obj，并且把参数10,20传递给fn</span></span><br><span class="line"></span><br><span class="line">fn.<span class="title function_">bind</span>(obj,<span class="number">10</span>,<span class="number">20</span>)<span class="comment">//bind是先将fn中的this指向obj，并且将参数10,20预先传递给fn，但是此时的fn并没有被执行，只有fn执行时this指向和传递参数才有作用</span></span><br><span class="line">fn.<span class="title function_">bind</span>(obj,<span class="number">10</span>,<span class="number">20</span>);<span class="comment">//=&gt;不会有任何输出</span></span><br><span class="line">fn.<span class="title function_">bind</span>(obj,<span class="number">10</span>,<span class="number">20</span>)();<span class="comment">//=&gt;调用后才会有输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//=&gt;需求：点击box这个盒子的时候，需要执行fn，并且让fn中的this指向obj</span></span><br><span class="line">oBox.<span class="property">onclick</span>=fn; <span class="comment">//=&gt;点击的时候执行了fn,但此时fn中的this是oBox</span></span><br><span class="line"></span><br><span class="line">oBox.<span class="property">onclick</span>=fn.<span class="title function_">call</span>(opp); <span class="comment">//=&gt;绑定事件的时候就已经把fn立即执行了(call本身就是立即执行函数),然后把fn执行的返回值绑定给事件</span></span><br><span class="line"></span><br><span class="line">oBox.<span class="property">onclick</span>=fn.<span class="title function_">bind</span>(opp);</span><br><span class="line"><span class="comment">//=&gt;fn.bind(opp)：fn调取Function.prototype上的bind方法，执行这个/* </span></span><br><span class="line"> * <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"> *     fn.<span class="title function_">call</span>(opp);</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">oBox.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="comment">//=&gt;this:oBox</span></span><br><span class="line">    fn.<span class="title function_">call</span>(opp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相同点：</p><ul><li>call、apply和bind都是JS函数的公有的内部方法，他们都是重置函数的this，改变函数的执行环节。</li></ul><p>不同点：</p><ul><li>bind是创建一个新的函数，而call和aplay是用来调用函数；</li><li>call和apply作用一样，只不过call为函数提供的参数是一个个地罗列出来，而apply为函数提供的参数是一个数组</li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端,JS,this </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-linux安装教程</title>
      <link href="/2022/08/07/docker-install/"/>
      <url>/2022/08/07/docker-install/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows操作系统的机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p><h1 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用<span class="string">&#x27;yum-utils&#x27;</span>来维护YUM并提高其性能</span></span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认安装最新版本（不指定版本的情况下）</span></span><br><span class="line">sudo yum -y install docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果想安装指定版本，查找指定的版本进行安装</span></span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 重启docker服务</span></span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 修改Daemon</span></span><br><span class="line">sudo vi /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;bip&quot;:&quot;172.31.0.1/16&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 创建docker用户组</span></span><br><span class="line">sudo groupadd docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4. 添加当前用户加入docker用户组</span></span><br><span class="line">sudo usermod -aG docker $&#123;USER&#125;</span><br><span class="line">sudo chown -R $&#123;USER&#125;:docker /var/run/docker.sock</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5. **注意：切换或者退出当前账户再从新登入**</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6. 开机自启动 设定</span></span><br><span class="line">sudo systemctl enable docker</span><br><span class="line">systemctl list-unit-files | grep docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">7. 重启docker服务</span></span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">8. docker 自带 compose 命令：docker compose --version</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建别名 和之前的【docker-compose】命令统一</span></span><br><span class="line"></span><br><span class="line">alias docker-compose=&#x27;docker compose&#x27;</span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><h1 id="docker-compose安装（上边第8步骤已经作业的情况下，下面就不用安装了）"><a href="#docker-compose安装（上边第8步骤已经作业的情况下，下面就不用安装了）" class="headerlink" title="docker-compose安装（上边第8步骤已经作业的情况下，下面就不用安装了）"></a>docker-compose安装（上边第8步骤已经作业的情况下，下面就不用安装了）</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看相应的版本</span></span><br><span class="line">https://github.com/docker/compose/releases</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载安装</span></span><br><span class="line">wget https://github.com/docker/compose/releases/download/v2.16.0/docker-compose-linux-x86_64</span><br><span class="line">sudo mv docker-compose-linux-x86_64 /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">赋运行权限</span></span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class="line">sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看版本</span></span><br><span class="line">sudo docker-compose version</span><br></pre></td></tr></table></figure><h1 id="docker命令卸载"><a href="#docker命令卸载" class="headerlink" title="docker命令卸载"></a>docker命令卸载</h1><ol><li><p>删除docker所在目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /etc/docker</span><br><span class="line">rm -rf /run/docker</span><br><span class="line">rm -rf /var/lib/dockershim</span><br><span class="line">rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure></li><li><p>Kill掉Docker进程</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef | grep docker</span><br><span class="line">kill -9 pid</span><br></pre></td></tr></table></figure></li><li><p>卸载docker相关包</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看相关包</span></span><br><span class="line">yum list installed | grep docker</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把匹配到的包执行 yum remove 删除</span></span><br><span class="line">yum remove  containerd.io.x86_64</span><br><span class="line">yum remove docker-ce.x86_64</span><br><span class="line">yum remove docker-ce-cli.x86_64</span><br><span class="line">yum remove docker-ce-rootless-extras.x86_64</span><br><span class="line">yum remove docker-compose-plugin.x86_64</span><br><span class="line">yum remove docker-scan-plugin.x86_64</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker,安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3 在哪些方面做了性能提升？</title>
      <link href="/2022/06/16/vue-vue3-optimization/"/>
      <url>/2022/06/16/vue-vue3-optimization/</url>
      
        <content type="html"><![CDATA[<h1 id="编译阶优化段"><a href="#编译阶优化段" class="headerlink" title="编译阶优化段"></a>编译阶优化段</h1><blockquote><p>在Vue2中，每个组件实例都对应一个 watcher 实例，它会在组件渲染的过程中把用到的数据property记录为依赖，当依赖发生改变，触发setter，则会通知watcher，从而使关联的组件重新渲染</p></blockquote><p><img src="/img/md/vue3-optimization/523224-763c89229f3c2925.webp" alt="watcher"></p><p>假如一个vue组件有如下模板结构：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>静态文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>静态文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>静态文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ...</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>静态文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>可以看到，组件内部只有一个动态节点，剩余一堆都是静态节点，所以这里很多 diff 和遍历其实都是不需要的，会造成性能浪费。因此，Vue3在编译阶段，做了进一步优化。</p></blockquote><h1 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h1><h2 id="diff算法优化"><a href="#diff算法优化" class="headerlink" title="diff算法优化"></a>diff算法优化</h2><blockquote><p>vue3在diff算法中相比vue2增加了静态标记关于这个静态标记，其作用是为了会发生变化的地方添加一个flag标记，下次发生变化的时候直接找该地方进行比较，如下图</p></blockquote><p><img src="/img/md/vue3-optimization/523224-a6ac51a05c59d316.webp" alt="diff"></p><h3 id="PatchFlag"><a href="#PatchFlag" class="headerlink" title="PatchFlag"></a>PatchFlag</h3><blockquote><p>PatchFlag 是对 Block Tree 进一步优化, 在对比单个节点的时, 会对比属性, 内容等等。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> enum <span class="title class_">PatchFlags</span> &#123;</span><br><span class="line">  <span class="variable constant_">TEXT</span> = <span class="number">1</span>,<span class="comment">// 动态的文本节点</span></span><br><span class="line">  <span class="variable constant_">CLASS</span> = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,  <span class="comment">// 2 动态的 class</span></span><br><span class="line">  <span class="variable constant_">STYLE</span> = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,  <span class="comment">// 4 动态的 style</span></span><br><span class="line">  <span class="variable constant_">PROPS</span> = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,  <span class="comment">// 8 动态属性，不包括类名和样式</span></span><br><span class="line">  <span class="variable constant_">FULL_PROPS</span> = <span class="number">1</span> &lt;&lt; <span class="number">4</span>,  <span class="comment">// 16 动态 key，当 key 变化时需要完整的 diff 算法做比较</span></span><br><span class="line">  <span class="variable constant_">HYDRATE_EVENTS</span> = <span class="number">1</span> &lt;&lt; <span class="number">5</span>,  <span class="comment">// 32 表示带有事件监听器的节点</span></span><br><span class="line">  <span class="variable constant_">STABLE_FRAGMENT</span> = <span class="number">1</span> &lt;&lt; <span class="number">6</span>,   <span class="comment">// 64 一个不会改变子节点顺序的 Fragment</span></span><br><span class="line">  <span class="variable constant_">KEYED_FRAGMENT</span> = <span class="number">1</span> &lt;&lt; <span class="number">7</span>, <span class="comment">// 128 带有 key 属性的 Fragment</span></span><br><span class="line">  <span class="variable constant_">UNKEYED_FRAGMENT</span> = <span class="number">1</span> &lt;&lt; <span class="number">8</span>, <span class="comment">// 256 子节点没有 key 的 Fragment</span></span><br><span class="line">  <span class="variable constant_">NEED_PATCH</span> = <span class="number">1</span> &lt;&lt; <span class="number">9</span>,   <span class="comment">// 512</span></span><br><span class="line">  <span class="variable constant_">DYNAMIC_SLOTS</span> = <span class="number">1</span> &lt;&lt; <span class="number">10</span>,  <span class="comment">// 动态 solt</span></span><br><span class="line">  <span class="variable constant_">HOISTED</span> = -<span class="number">1</span>,  <span class="comment">// 特殊标志是负整数表示永远不会用作 diff</span></span><br><span class="line">  <span class="variable constant_">BAIL</span> = -<span class="number">2</span> <span class="comment">// 一个特殊的标志，指代差异算法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>vue2 在单个节点对比时不知道那些是要对比的所以全部对比一次<br>vue3 就知道那些属性是动态的, 每次更新只对比动态的属性</p></blockquote><h2 id="静态提升"><a href="#静态提升" class="headerlink" title="静态提升"></a>静态提升</h2><blockquote><p>Vue3中对不参与更新的元素，会做静态提升，只会被创建一次，在渲染时直接复用这样就免去了重复的创建节点，大型应用会受益于这个改动，免去了重复的创建操作，优化了运行时候的内存占用</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;span&gt;你好&lt;/span&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>没有做静态提升之前</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">_ctx, _cache, $props, $setup, $data, $options</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="title function_">_openBlock</span>(), <span class="title function_">_createBlock</span>(_Fragment, <span class="literal">null</span>, [</span><br><span class="line">    <span class="title function_">_createVNode</span>(<span class="string">&quot;span&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;你好&quot;</span>),</span><br><span class="line">    <span class="title function_">_createVNode</span>(<span class="string">&quot;div&quot;</span>, <span class="literal">null</span>, <span class="title function_">_toDisplayString</span>(_ctx.<span class="property">message</span>), <span class="number">1</span> <span class="comment">/* TEXT */</span>)</span><br><span class="line">  ], <span class="number">64</span> <span class="comment">/* STABLE_FRAGMENT */</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _hoisted_1 = <span class="comment">/*#__PURE__*/</span><span class="title function_">_createVNode</span>(<span class="string">&quot;span&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;你好&quot;</span>, -<span class="number">1</span> <span class="comment">/* HOISTED */</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">_ctx, _cache, $props, $setup, $data, $options</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="title function_">_openBlock</span>(), <span class="title function_">_createBlock</span>(_Fragment, <span class="literal">null</span>, [</span><br><span class="line">    _hoisted_1,</span><br><span class="line">    <span class="title function_">_createVNode</span>(<span class="string">&quot;div&quot;</span>, <span class="literal">null</span>, <span class="title function_">_toDisplayString</span>(_ctx.<span class="property">message</span>), <span class="number">1</span> <span class="comment">/* TEXT */</span>)</span><br><span class="line">  ], <span class="number">64</span> <span class="comment">/* STABLE_FRAGMENT */</span>))</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Check the console for the AST</span></span><br></pre></td></tr></table></figure><blockquote><p>静态内容_hoisted_1被放置在render 函数外，每次渲染的时候只要取 _hoisted_1 即可同时 _hoisted_1 被打上了 PatchFlag ，静态标记值为 -1 ，特殊标志是负整数表示永远不会用于 Diff</p></blockquote><h2 id="预字符串化"><a href="#预字符串化" class="headerlink" title="预字符串化"></a>预字符串化</h2><blockquote><p>在平时vue开发过程中，组件当中没有特别多的动态元素，大多都是静态元素。比如：</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu-bar-container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>法医<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>menu<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>menu<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>menu<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>menu<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>menu<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个组件中，除了span元素是动态元素之外，其余都是静态节点，一般可以说是动静比，动态内容 &#x2F; 静态内容，比例越小，静态内容越多，比例越大，动态内容越多，vue3的编译器它会非常智能地发现这一点，当编译器遇到大量连续的静态内容，会直接将它编译为一个普通字符串节点，因为它知道这些内容永远不会变化，都是静态节点。</p><blockquote><p>注意：必须是大量连续的静态内容才可以预字符串化哦，切记！目前是连续20个静态节点才会预字符串化</p></blockquote><p>然而在vue2中，每个元素都会变成虚拟节点，一大堆的虚拟节点😱，这些全都是静态节点，在vue3中它会智能地发现这一点。如下图所示，我们可以很明显的感受到vue3的巨大性能提升</p><p><img src="/img/md/vue3-optimization/523224-76e4a864396e4a7e.webp" alt="虚拟节点"></p><h2 id="缓存事件处理函数"><a href="#缓存事件处理函数" class="headerlink" title="缓存事件处理函数"></a>缓存事件处理函数</h2><p>比如存在如下事件处理函数<br><code>&lt;button @click=&quot;count++&quot;&gt;plus&lt;/button&gt;</code></p><p>对比vue2和vue3的处理方式</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue2处理方式render(ctx)&#123;</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">createVNode</span>(<span class="string">&quot;button&quot;</span>,&#123;</span><br><span class="line">    <span class="attr">onclick</span>:<span class="keyword">function</span>(<span class="params">$event</span>)&#123;</span><br><span class="line">        ctx.<span class="property">count</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//vue3 处理方式render(ctx,_cache)&#123;</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">createVNode</span>(<span class="string">&quot;button&quot;</span>,&#123;</span><br><span class="line">    <span class="attr">onclick</span>:cache[<span class="number">0</span>] || (cache[<span class="number">0</span>] =&gt;<span class="function">(<span class="params">$event</span>) =&gt;</span>(ctx.<span class="property">count</span>++))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在vue2中创建一个虚拟节点button，属性里面多了一个事件onclick，内容就是count++。在vue3中会认为这里的事件处理是不会变化的，不是说这次渲染是事件函数，下次就变成别的，于是vue3会智能地发现这一点，会做缓存处理，它首先会看一看缓存里面有没有这个事件函数，有的话直接返回，没有的话就直接赋值为一个count++函数，保证事件处理函数只生成一次。</p><h2 id="SSR优化"><a href="#SSR优化" class="headerlink" title="SSR优化"></a>SSR优化</h2><blockquote><p>当静态内容大到一定量级时候，会用createStaticVNode方法在客户端去生成一个static node，这些静态node，会被直接innerHtml，就不需要创建对象，然后根据对象渲染。</p></blockquote><p>编译前</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> ...  // 很多个静态属性</span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编译后</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mergeProps <span class="keyword">as</span> _mergeProps &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span><span class="keyword">import</span> &#123; ssrRenderAttrs <span class="keyword">as</span> _ssrRenderAttrs, ssrInterpolate <span class="keyword">as</span> _ssrInterpolate &#125; <span class="keyword">from</span> <span class="string">&quot;@vue/server-renderer&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ssrRender</span>(<span class="params">_ctx, _push, _parent, _attrs, $props, $setup, $data, $options</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> _cssVars = &#123; <span class="attr">style</span>: &#123; <span class="attr">color</span>: _ctx.<span class="property">color</span> &#125;&#125;</span><br><span class="line">  <span class="title function_">_push</span>(<span class="string">`&lt;div<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">    _ssrRenderAttrs(_mergeProps(_attrs, _cssVars))</span></span></span><br><span class="line"><span class="subst"><span class="string">  &#125;</span>&gt;&lt;div&gt;&lt;span&gt;你好&lt;/span&gt;...&lt;div&gt;&lt;span&gt;你好&lt;/span&gt;&lt;div&gt;&lt;span&gt;<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">    _ssrInterpolate(_ctx.message)</span></span></span><br><span class="line"><span class="subst"><span class="string">  &#125;</span>&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="源码体积有优化"><a href="#源码体积有优化" class="headerlink" title="源码体积有优化"></a>源码体积有优化</h3><blockquote><p>与Vue2相比较，Vue3整体体积变小了，移除了一些比较冷门的feature：如 keyCode 支持作为 v-on 的修饰符、on、off 和 $once 实例方法、filter过滤、内联模板等。tree-shaking 依赖 ES2015 模块语法的静态结构（即 import 和 export），通过编译阶段的静态分析，找到没有引入的模块并打上标记。任何一个函数，如ref、reavtived、computed等，仅仅在用到的时候才打包，没用到的模块都被摇掉，打包的整体体积变小。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed, defineComponent, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params">props, context</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> age = <span class="title function_">ref</span>(<span class="number">18</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">let</span> state = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;test&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">const</span> readOnlyAge = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> age.<span class="property">value</span>++) <span class="comment">// 19</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            age,</span><br><span class="line">            state,</span><br><span class="line">            readOnlyAge</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="响应式实现优化"><a href="#响应式实现优化" class="headerlink" title="响应式实现优化"></a>响应式实现优化</h3><p>改用proxy api做数据劫持</p><ul><li>Vue.js 2.x 内部是通过 Object.defineProperty 这个 API 去劫持数据的 getter 和 setter 来实现响应式的。这个 API 有一些缺陷，它必须预先知道要拦截的 key 是什么，所以它并不能检测对象属性的添加和删除。</li><li>Vue.js 3.0 使用了 Proxy API 做数据劫持，它劫持的是整个对象，自然对于对象的属性的增加和删除都能检测到。</li></ul><p>响应式是惰性的</p><ul><li>在 Vue.js 2.x 中，对于一个深层属性嵌套的对象，要劫持它内部深层次的变化，就需要递归遍历这个对象，执行 Object.defineProperty 把每一层对象数据都变成响应式的，这无疑会有很大的性能消耗。</li><li>在 Vue.js 3.0 中，使用 Proxy API 并不能监听到对象内部深层次的属性变化，因此它的处理方式是在 getter 中去递归响应式，这样的好处是真正访问到的内部属性才会变成响应式，简单的可以说是按需实现响应式，就没有那么大的性能消耗。</li></ul><blockquote><p>另外除了以上几点，vue3.0能更好的支持TS 、<br>Custom Renderer API：暴露了自定义渲染API、<br>Fragment，Teleport(Protal)，Suspense：更先进的组件</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能,优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring设计模式-代理模式</title>
      <link href="/2022/02/18/spring-design-pattern-proxy/"/>
      <url>/2022/02/18/spring-design-pattern-proxy/</url>
      
        <content type="html"><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><blockquote><p>代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。动态代理是SpringAop的底层。</p></blockquote><h2 id="代理模式的分类"><a href="#代理模式的分类" class="headerlink" title="代理模式的分类"></a>代理模式的分类</h2><ol><li>静态代理<br>由程序员创建代理类或特定工具自动生成源代码再对其编译，在程序运行前代理类的 .class 文件就已经存在了。</li><li>动态代理<br>在程序运行时，运用反射机制动态创建而成。</li></ol><h2 id="代理模式的优点："><a href="#代理模式的优点：" class="headerlink" title="代理模式的优点："></a>代理模式的优点：</h2><ul><li>可以使真实角色的操作更加纯粹！不用关注一些公共的业务。</li><li>公共业务交给代理角色，实现了业务的分工</li><li>公共业务扩展的时候，方便集中管理。</li></ul><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><ol><li>定义一个接口；</li><li>被代理类实现接口；</li><li>代理类引用被代理类，并且通过被代理类的方法实现接口。</li></ol><p><img src="/img/md/pictures/2459242-20220927180428179-1120981026.png" alt="代理"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//租房接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">rental</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doRental</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">landlord</span> <span class="keyword">implements</span> <span class="title class_">rental</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doRental</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东要出租房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中介</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">intermediary</span> <span class="keyword">implements</span> <span class="title class_">rental</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> landlord landlord;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">intermediary</span><span class="params">(landlord landlord)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.landlord = landlord;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doRental</span><span class="params">()</span> &#123;</span><br><span class="line">        landlord.doRental();</span><br><span class="line">        seeHouse();</span><br><span class="line">        writeContract();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">seeHouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介带你看房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeContract</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介和你签合同&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//租客</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tenants</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">landlord</span> <span class="variable">landlord</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">landlord</span>();</span><br><span class="line">        <span class="type">intermediary</span> <span class="variable">intermediary</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">intermediary</span>(landlord);</span><br><span class="line">        intermediary.doRental();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态代理的缺点："><a href="#静态代理的缺点：" class="headerlink" title="静态代理的缺点："></a>静态代理的缺点：</h2><p>一个真实角色就会产生一个代理角色，代码量翻倍，开发效率变低。</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><ol><li>接口还是上面的rental接口；</li><li>代理类landlord实现接口与静态代理相同；</li><li>动态代理没有代理类，而是通过java.lang.reflect.InvocationHandler和java.lang.reflect.Proxy来实现</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTarget</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成得到代理类</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="built_in">this</span>.getClass().getClassLoader(),target.getClass().getInterfaces(),<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理代理实例并返回结果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        java.lang.<span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        seeHouse();</span><br><span class="line">        writeContract();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码适用于任何接口的动态代理，即拿即用。<br>我们在上面类中可以随意添加我们需要的方法，此处我将其修改如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTarget</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成得到代理类</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="built_in">this</span>.getClass().getClassLoader(),target.getClass().getInterfaces(),<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理代理实例并返回结果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        java.lang.<span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        seeHouse();</span><br><span class="line">        writeContract();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">seeHouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介带你看房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeContract</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介和你签合同&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体使用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tenants</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//被代理类</span></span><br><span class="line">        <span class="type">landlord</span> <span class="variable">landlord</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">landlord</span>();</span><br><span class="line">        <span class="type">ProxyInvocationHandler</span> <span class="variable">proxyInvocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyInvocationHandler</span>();</span><br><span class="line">        <span class="comment">//设置动态代理的接口</span></span><br><span class="line">        proxyInvocationHandler.setTarget(landlord);</span><br><span class="line">        <span class="comment">//获取接口</span></span><br><span class="line">        <span class="type">rental</span> <span class="variable">rental</span> <span class="operator">=</span> (rental) proxyInvocationHandler.getProxy();</span><br><span class="line">        <span class="comment">//执行具体操作</span></span><br><span class="line">        rental.doRental();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA,SPRING,设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue多语言-vue-i18n</title>
      <link href="/2022/02/16/vue-i18n/"/>
      <url>/2022/02/16/vue-i18n/</url>
      
        <content type="html"><![CDATA[<h1 id="安装vue-i18n"><a href="#安装vue-i18n" class="headerlink" title="安装vue-i18n"></a>安装vue-i18n</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install vue-i18n -S</span><br><span class="line">yarn add vue-i18n</span><br></pre></td></tr></table></figure><h1 id="创建多语言文件夹lang，并且创建index-js、zh-js"><a href="#创建多语言文件夹lang，并且创建index-js、zh-js" class="headerlink" title="创建多语言文件夹lang，并且创建index.js、zh.js"></a>创建多语言文件夹lang，并且创建index.js、zh.js</h1><p>index.js内容如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueI18</span>n <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Cookies</span> <span class="keyword">from</span> <span class="string">&#x27;js-cookie&#x27;</span></span><br><span class="line"><span class="keyword">import</span> elementZhLocale <span class="keyword">from</span> <span class="string">&#x27;element-ui/lib/locale/lang/zh-CN&#x27;</span><span class="comment">// element-ui lang</span></span><br><span class="line"><span class="keyword">import</span> zhLocale <span class="keyword">from</span> <span class="string">&#x27;./zh&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueI18</span>n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">DEFAULT_LOCALE_MSG</span> = &#123;</span><br><span class="line">  <span class="attr">zh</span>: &#123;</span><br><span class="line">    ...zhLocale,</span><br><span class="line">    ...elementZhLocale</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> messages = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, <span class="variable constant_">DEFAULT_LOCALE_MSG</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getLanguage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> chooseLanguage = <span class="title class_">Cookies</span>.<span class="title function_">get</span>(<span class="string">&#x27;language&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (chooseLanguage) <span class="keyword">return</span> chooseLanguage</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if has not choose language</span></span><br><span class="line">  <span class="keyword">const</span> language = (navigator.<span class="property">language</span> || navigator.<span class="property">browserLanguage</span>).<span class="title function_">toLowerCase</span>()</span><br><span class="line">  <span class="keyword">const</span> locales = <span class="title class_">Object</span>.<span class="title function_">keys</span>(messages)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> locale <span class="keyword">of</span> locales) &#123;</span><br><span class="line">    <span class="keyword">if</span> (language.<span class="title function_">indexOf</span>(locale) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> locale</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;zh&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i18n = <span class="keyword">new</span> <span class="title class_">VueI18</span>n(&#123;</span><br><span class="line">  <span class="attr">locale</span>: <span class="title function_">getLanguage</span>(),</span><br><span class="line">  messages</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18n</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>zh.js内容如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">loading</span>: &#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;正在加载数据，请稍候...&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="在main-js中引入vue-i18n"><a href="#在main-js中引入vue-i18n" class="headerlink" title="在main.js中引入vue-i18n"></a>在main.js中引入vue-i18n</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;@/lang&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>, &#123;</span><br><span class="line">  <span class="attr">i18n</span>: <span class="function">(<span class="params">key, value</span>) =&gt;</span> i18n.<span class="title function_">t</span>(key, value),</span><br><span class="line">  <span class="attr">size</span>:<span class="string">&#x27;mini&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  i18n</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="vuex管理多语言问题"><a href="#vuex管理多语言问题" class="headerlink" title="vuex管理多语言问题"></a>vuex管理多语言问题</h1><h2 id="在store文件夹下创建文件夹modules，并且创建index-js"><a href="#在store文件夹下创建文件夹modules，并且创建index-js" class="headerlink" title="在store文件夹下创建文件夹modules，并且创建index.js"></a>在store文件夹下创建文件夹modules，并且创建index.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> app <span class="keyword">from</span> <span class="string">&#x27;./modules/app&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加 modules 自动装配</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> modules = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> require_module = <span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&#x27;./modules&#x27;</span>, <span class="literal">false</span>, <span class="regexp">/.js$/</span>)</span><br><span class="line">require_module.<span class="title function_">keys</span>().<span class="title function_">forEach</span>(<span class="function">(<span class="params">file_name</span>) =&gt;</span> &#123;</span><br><span class="line">  modules[file_name.<span class="title function_">slice</span>(<span class="number">2</span>, -<span class="number">3</span>)] = require_module(file_name).<span class="property">default</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    app</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="在modules文件夹下创建app-js"><a href="#在modules文件夹下创建app-js" class="headerlink" title="在modules文件夹下创建app.js"></a>在modules文件夹下创建app.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Cookies</span> <span class="keyword">from</span> <span class="string">&#x27;js-cookie&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;getLanguage&#125; <span class="keyword">from</span> <span class="string">&#x27;@/lang&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">language</span>: <span class="title function_">getLanguage</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="attr">SET_LANGUAGE</span>: <span class="function">(<span class="params">state, language</span>) =&gt;</span> &#123;</span><br><span class="line">    state.<span class="property">language</span> = language</span><br><span class="line">    <span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&#x27;language&#x27;</span>, language)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="title function_">setLanguage</span>(<span class="params">&#123;commit&#125;, language</span>) &#123;</span><br><span class="line">    <span class="title function_">commit</span>(<span class="string">&#x27;SET_LANGUAGE&#x27;</span>, language)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="attr">language</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">language</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">  getters</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="语言切换"><a href="#语言切换" class="headerlink" title="语言切换"></a>语言切换</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;app/setLanguage&#x27;</span>, <span class="string">&#x27;zh&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="动态多语言文件-服务器加载"><a href="#动态多语言文件-服务器加载" class="headerlink" title="动态多语言文件(服务器加载)"></a>动态多语言文件(服务器加载)</h1><h2 id="在App-vue"><a href="#在App-vue" class="headerlink" title="在App.vue"></a>在App.vue</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;getMessageInfo&#125; <span class="keyword">from</span> <span class="string">&#x27;@/i18n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> lang = <span class="title function_">getLanguage</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前系统语言：&#x27;</span>, lang)</span><br><span class="line">  <span class="keyword">const</span> &#123;defaultLangObj, msgObj&#125; = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">loadSettingByLang</span>(lang)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$i18n</span>.<span class="title function_">setLocaleMessage</span>(lang, &#123;</span><br><span class="line">    ...defaultLangObj, ...msgObj</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">loadSettingByLang</span>(<span class="params">lang = <span class="string">&#x27;zh&#x27;</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> msgObjStr = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;local-data-mag&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> msgObj</span><br><span class="line">    <span class="keyword">if</span> (msgObjStr) &#123;</span><br><span class="line">      msgObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(msgObjStr)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// console.log(&#x27;从后台加载消息语言文件&#x27;, msgObjRes)</span></span><br><span class="line">      <span class="keyword">const</span> msgObjRes = <span class="keyword">await</span> <span class="title function_">getMessageInfo</span>(lang) <span class="comment">// 请求后台多语言API</span></span><br><span class="line">      msgObj = <span class="variable language_">this</span>.<span class="title function_">generateMsgObj</span>(msgObjRes)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> defaultLangObj = <span class="variable constant_">DEFAULT_LOCALE_MSG</span>[lang]</span><br><span class="line">    <span class="comment">// console.log(&#x27;原语言文件对象：&#x27;, defaultLangObj)</span></span><br><span class="line">    <span class="keyword">return</span> &#123;defaultLangObj, msgObj&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">generateMsgObj</span>(<span class="params">messageArray = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;local-data-mag&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(messageArray))</span><br><span class="line">    <span class="keyword">return</span> allMsgInfo</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">clearLanguageCache</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;local-data-mag&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><h2 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123; $t(<span class="string">&#x27;loading.msg&#x27;</span>) &#125;&#125;</span><br><span class="line"><span class="variable language_">this</span>.$t(<span class="string">&#x27;loading.msg&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="处理动态变量参数方法"><a href="#处理动态变量参数方法" class="headerlink" title="处理动态变量参数方法"></a>处理动态变量参数方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 替换双语消息提示中的变量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>&#123;<span class="type">String</span>&#125; data 双语字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>&#123;<span class="type">Array</span>&#125; <span class="variable">args</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span>&#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">convertVariateFromTips</span> = (<span class="params">data = <span class="string">&#x27;&#x27;</span>, args = []</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> regExp = <span class="regexp">/[#$]\d/gi</span></span><br><span class="line">  <span class="keyword">const</span> arr = data.<span class="title function_">match</span>(regExp)</span><br><span class="line">  <span class="keyword">const</span> newObj = &#123;&#125;</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    newObj[item] = args[<span class="built_in">parseInt</span>(item.<span class="title function_">replace</span>(<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;&#x27;</span>)) - <span class="number">1</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> data.<span class="title function_">replace</span>(regExp, <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> newObj[result]</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方式</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">convertVariateFromTips</span>(<span class="string">&#x27;$2在$1之前输入文字&#x27;</span>, [<span class="string">&#x27;a的位置&#x27;</span>,<span class="string">&#x27;请&#x27;</span>]))</span><br><span class="line"><span class="comment">//请在a的位置之前输入文字</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多语言,i18n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring设计模式-工厂模式</title>
      <link href="/2022/02/14/spring-design-pattern-factory/"/>
      <url>/2022/02/14/spring-design-pattern-factory/</url>
      
        <content type="html"><![CDATA[<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><blockquote><p>工厂模式是一种在工程中广泛应用的设计模式，对代码的解耦合起到了很大的作用。在Spring使用开发中，我们可以将Spring理解成封装了我们工程中大量重复代码的一种工具，Spring中最为重要的组件就是IOC，而IOC中非常重要的部分就是应用了工厂模式的代码。</p></blockquote><h2 id="工厂模式的分类"><a href="#工厂模式的分类" class="headerlink" title="工厂模式的分类"></a>工厂模式的分类</h2><ol><li>简单工厂模式（ simple Factory）<br>又叫做静态工厂方法（StaticFactory Method） 模式， 但不属于 23 种设计模式之一。<br>简单工厂模式的实质是由一个工厂类根据传入的参数， 动态决定应该创建哪一个产品类。</li><li>工厂方法模式（Factory Method）<br>通常由应用程序直接使用 new 创建新的对象， 为了将对象的创建和使用相分离， 采用工厂方法模式方法,即应用程序将对象的创建及初始化职责交给工厂对象</li><li>抽象工厂模式（abstract Factory）<br>主要创建一个产品族，不同工厂继承父类的抽象工厂创建不同的产品族。</li></ol><h3 id="1-简单工厂模式（-simple-Factory）"><a href="#1-简单工厂模式（-simple-Factory）" class="headerlink" title="1. 简单工厂模式（ simple Factory）"></a>1. 简单工厂模式（ simple Factory）</h3><p>接口类car</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Project</span>: spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:  实现车子的接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: sunkang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2018-08-29 23:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ModificationHistory</span> who      when       What</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有三个具体的实现类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Project</span>: spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:  奥迪车</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: sunkang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2018-08-29 23:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ModificationHistory</span> who      when       What</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Audi</span> <span class="keyword">implements</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;audi&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Project</span>: spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:奔驰车</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: sunkang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2018-08-29 23:08</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ModificationHistory</span> who      when       What</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Benz</span> <span class="keyword">implements</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;benz&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Project</span>: spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 宝马车</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: sunkang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2018-08-29 23:08</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ModificationHistory</span> who      when       What</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bmw</span> <span class="keyword">implements</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;bmw&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单工厂的方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Project</span>: spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 简单工厂 根据传入不同的参数得到不同对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: sunkang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2018-08-29 23:10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ModificationHistory</span> who      when       What</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFactory</span>  &#123;</span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">getCar</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;BMW&quot;</span>.equalsIgnoreCase(name))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bmw</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;Benz&quot;</span>.equalsIgnoreCase(name))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Benz</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;Audi&quot;</span>.equalsIgnoreCase(name))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Audi</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这个产品产不出来&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-工厂方法模式（Factory-Method）"><a href="#2-工厂方法模式（Factory-Method）" class="headerlink" title="2. 工厂方法模式（Factory Method）"></a>2. 工厂方法模式（Factory Method）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Project</span>: spring </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:  造车工厂的接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: sunkang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2018-08-30 22:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ModificationHistory</span> who      when       What</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">     Car <span class="title function_">getCar</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *生产奥迪的工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AudiFactory</span> <span class="keyword">implements</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">getCar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Audi</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *生产奔驰的工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BenzFactory</span> <span class="keyword">implements</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">getCar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Benz</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产宝马的工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BmwFactory</span> <span class="keyword">implements</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">getCar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bmw</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂方法的测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.首先先创建一个奥迪工厂出来</span></span><br><span class="line">        <span class="type">Factory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AudiFactory</span>();</span><br><span class="line">        <span class="comment">//2.然后根据工厂得到奥迪车，具体的造车工厂交给工厂来完成</span></span><br><span class="line">        System.out.println(factory.getCar());</span><br><span class="line">        factory = <span class="keyword">new</span> <span class="title class_">BmwFactory</span>();</span><br><span class="line">        System.out.println(factory.getCar());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-抽象工厂模式（abstract-Factory）"><a href="#3-抽象工厂模式（abstract-Factory）" class="headerlink" title="3. 抽象工厂模式（abstract Factory）"></a>3. 抽象工厂模式（abstract Factory）</h3><p>抽象工厂</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 得到奥迪的车</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> Car <span class="title function_">getAudiCar</span><span class="params">()</span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 得到奔驰的车</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> Car <span class="title function_">getBenzCar</span><span class="params">()</span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 得到宝马的车</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> Car <span class="title function_">getBmwCar</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象工厂的具体实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Project</span>: spring</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:  抽象工厂的具体实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: sunkang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2018-09-01 19:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ModificationHistory</span> who      when       What</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarFactory</span> <span class="keyword">extends</span>  <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">getAudiCar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Audi</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">getBenzCar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Benz</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">getBmwCar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bmw</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AbstractFactoryTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.先创建具体抽象工厂</span></span><br><span class="line">        <span class="type">AbstractFactory</span> <span class="variable">abstractFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CarFactory</span>();</span><br><span class="line">        <span class="comment">//2.根据具体的抽象工厂得到车</span></span><br><span class="line">        <span class="type">Car</span> <span class="variable">audi</span>  <span class="operator">=</span> abstractFactory.getAudiCar();</span><br><span class="line">        System.out.println(audi.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工厂模式在spring中的体现"><a href="#工厂模式在spring中的体现" class="headerlink" title="工厂模式在spring中的体现"></a>工厂模式在spring中的体现</h2><blockquote><p>Spring Bean 的创建是典型的工厂模式， 这一系列的 Bean 工厂， 也即 IOC 容器为开发者管理对象间的依赖关系提供了很多便利和基础服务， 在 Spring 中有许多的 IOC 容器的实现供用户选择和使用。</p></blockquote><h2 id="BeanFactory和FactoryBean的区别"><a href="#BeanFactory和FactoryBean的区别" class="headerlink" title="BeanFactory和FactoryBean的区别"></a>BeanFactory和FactoryBean的区别</h2><h3 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h3><blockquote><p>用于访问Spring bean容器的根接口。这是Spring bean容器的基本客户端视图。原来是获取Spring Bean的接口，也就是IoC容器。<br>原来我们更常用的ApplicationContext就是一个BeanFactory。我们通过bean的名称或者类型都可以从BeanFactory来获取bean。</p></blockquote><h3 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h3><blockquote><p>FactoryBean 也是接口，为IOC容器中Bean的实现提供了更加灵活的方式，FactoryBean在IOC容器的基础上给Bean的实现加上了一个简单的工厂模式和装饰模式，我们可以在getObject()方法中灵活配置。</p></blockquote><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><blockquote><p>FactoryBean是个Bean.在Spring中，所有的Bean都是由BeanFactory(也就是IOC容器)来进行管理的。但对FactoryBean而言，这个Bean不是简单的Bean，而是一个能生产或者修饰对象生成的工厂Bean,它的实现与设计模式中的工厂模式和修饰器模式类似。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA,SPRING,设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2 Element-UI 选择器优化</title>
      <link href="/2022/01/26/el-select-big-data/"/>
      <url>/2022/01/26/el-select-big-data/</url>
      
        <content type="html"><![CDATA[<h1 id="图示效果"><a href="#图示效果" class="headerlink" title="图示效果"></a>图示效果</h1><p><img src="/img/md/pictures/1557069758593-575ee124-6e4d-4198-8601-1e61b095313a.png" alt="开发图解"></p><p>注：基于select的下拉筛选，通过自定义事件来实现模糊搜索匹配。<br>一共两种方案：</p><ul><li>一是获取所有数据，通过输入的关键字自己对获取的数据进行过滤处理；</li><li>二是通过输入的关键字来动态请求后台接口，通过接口返回的数据来动态渲染下拉选项；</li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">title</span>=<span class="string">&quot;标题&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;relatedOpen&quot;</span> <span class="attr">:append-to-body</span>=<span class="string">&quot;true&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">&quot;16&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-select</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">filterable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">clearable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">style</span>=<span class="string">&quot;width:100%&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:loading</span>=<span class="string">&quot;searchLoad&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:filter-method</span>=<span class="string">&quot;filterMethod&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-el-select-loadmore</span>=<span class="string">&quot;loadMore(rangeNumber)&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">visible-change</span>=<span class="string">&quot;visibleChange&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">v-for</span>=<span class="string">&quot;item in options.slice(0, rangeNumber)&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.key&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;item.value&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;item.key&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;4&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>● 「v-el-select-loadmore」为自定义指令封装的数据加载指令，是为了解决和优化elementUI下拉选择器加载数据过多出现卡顿问题的。<br>● 「filter-method」是下拉选择器的一个自定义属性，可以监听输入的变量，从而依据变量来实现数据的动态获取；</p><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义指令</span></span><br><span class="line"><span class="attr">directives</span>: &#123;</span><br><span class="line"><span class="string">&quot;el-select-loadmore&quot;</span>: <span class="function">(<span class="params">el, binding</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取element UI定义好的scroll元素</span></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SELECTWRAP_ROM</span> = el.<span class="title function_">querySelector</span>(<span class="string">&quot;.el-select-dropdown .el-select-dropdown__wrap&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable constant_">SELECTWRAP_ROM</span>) &#123;</span><br><span class="line">    <span class="comment">// 添加scroll事件</span></span><br><span class="line">    <span class="variable constant_">SELECTWRAP_ROM</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;scroll&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 判断滚动</span></span><br><span class="line">        <span class="keyword">const</span> condition = <span class="variable language_">this</span>.<span class="property">scrollHeight</span> - <span class="variable language_">this</span>.<span class="property">scrollTop</span> &lt;= <span class="variable language_">this</span>.<span class="property">clientHeight</span>;</span><br><span class="line">        condition &amp;&amp; binding.<span class="title function_">value</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注册指令（main-js引入文件）"><a href="#注册指令（main-js引入文件）" class="headerlink" title="注册指令（main.js引入文件）"></a>注册指令（main.js引入文件）</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> loadmore <span class="keyword">from</span> <span class="string">&#x27;...../el-select/loadmore&#x27;</span></span><br><span class="line"><span class="comment">// 注册</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;el-select-loadmore&#x27;</span>, loadmore)</span><br></pre></td></tr></table></figure><h2 id="相应的数据函数"><a href="#相应的数据函数" class="headerlink" title="相应的数据函数"></a>相应的数据函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">relatedOpen</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">options</span>: [] <span class="comment">/* 选择下拉框的值 */</span>,</span><br><span class="line">      <span class="attr">courseList</span>: [],</span><br><span class="line">      <span class="attr">rangeNumber</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="attr">searchLoad</span>: <span class="literal">false</span> <span class="comment">/* 下拉框的loading状态 */</span>,</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">timer</span>: <span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getOptions</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 按需加载</span></span><br><span class="line">    <span class="title function_">loadMore</span>(<span class="params">n</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> (<span class="variable language_">this</span>.<span class="property">rangeNumber</span> += <span class="number">5</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 过滤课件</span></span><br><span class="line">    <span class="title function_">filterMethod</span>(<span class="params">query</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">timer</span> != <span class="literal">null</span>) <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">timer</span>);</span><br><span class="line">      !<span class="variable language_">this</span>.<span class="property">searchLoad</span> &amp;&amp; (<span class="variable language_">this</span>.<span class="property">searchLoad</span> = <span class="literal">true</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">options</span> = !!query ? <span class="variable language_">this</span>.<span class="property">courseList</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">el</span> =&gt;</span> el.<span class="property">value</span>.<span class="title function_">toLowerCase</span>().<span class="title function_">includes</span>(query.<span class="title function_">toLowerCase</span>())) : <span class="variable language_">this</span>.<span class="property">courseList</span>;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">timer</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">searchLoad</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">rangeNumber</span> = <span class="number">10</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="literal">null</span>;</span><br><span class="line">      &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 监听select下拉框的显示和隐藏</span></span><br><span class="line">    <span class="title function_">visibleChange</span>(<span class="params">flag</span>) &#123;</span><br><span class="line">      <span class="comment">// 显示时初始化列表</span></span><br><span class="line">      flag &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">filterMethod</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">      <span class="comment">// 初始化默认值</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">rangeNumber</span> = <span class="number">10</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 获取选项</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">getOptions</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">searchCourseware</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> list = res.<span class="property">data</span> || [];</span><br><span class="line">        <span class="comment">// 默认展示的数据</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">options</span> = list;</span><br><span class="line">        <span class="comment">// 原始数据</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">courseList</span> = list;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：<br>● 定时器作用是防止输入筛选的关键字太过频繁，从而造成数据响应不及时；因为本次是一次性获取了全部的数据，所以这里只是用做渲染加载数据；<br>● 选择器的事件函数主要是用来初始化“获取焦点”和“失去焦点”时处理默认展示数据用的，若是获取的网络请求，此处需要做“函数截流”处理；目的是减少接口请求次数。</p>]]></content>
      
      
      <categories>
          
          <category> Element-UI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue,自适应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS数据类型判断</title>
      <link href="/2022/01/24/js-type/"/>
      <url>/2022/01/24/js-type/</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型分类"><a href="#数据类型分类" class="headerlink" title="数据类型分类"></a>数据类型分类</h1><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><blockquote><p>字符串（String）、数字(Number)、布尔(Boolean)、空（Null）、未定义（Undefined）、Symbol。</p></blockquote><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><blockquote><p>对象(Object)、数组(Array)、函数(Function)，还有两个特殊的对象：正则（RegExp）和日期（Date）</p></blockquote><p><img src="/img/md/pictures/Javascript-DataType.png" alt="JavaScript 数据类型"></p><p>注：Symbol 是 ES6 引入了一种新的原始数据类型，表示独一无二的值。</p><h1 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h1><blockquote><p>typeof 是一个操作符，其右侧跟一个一元表达式，并返回这个表达式的数据类型。返回的结果用该类型的字符串(全小写字母)形式表示，包括以下 7 种：number、boolean、symbol、string、object、undefined、function 等。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;&#x27;</span>; <span class="comment">// string 有效</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">1</span>; <span class="comment">// number 有效</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Symbol</span>(); <span class="comment">// symbol 有效</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span>; <span class="comment">//boolean 有效</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>; <span class="comment">//undefined 有效</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>; <span class="comment">//object 无效</span></span><br><span class="line"><span class="keyword">typeof</span> [] ; <span class="comment">//object 无效</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Function</span>(); <span class="comment">// function 有效</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">//object 无效</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(); <span class="comment">//object 无效</span></span><br></pre></td></tr></table></figure><p>有些时候，typeof 操作符会返回一些令人迷惑但技术上却正确的值：</p><ul><li>对于基本类型，除 null 以外，均可以返回正确的结果。</li><li>对于引用类型，除 function 以外，一律返回 object 类型。</li><li>对于 null ，返回 object 类型。</li><li>对于 function 返回  function 类型。</li></ul><p>其中，null 有属于自己的数据类型 Null ， 引用类型中的 数组、日期、正则 也都有属于自己的具体类型，而 typeof 对于这些类型的处理，只返回了处于其原型链最顶端的 Object 类型，没有错，但不是我们想要的结果。</p><p><font color='red'>typeof 对对象类型的值的类型不能作出准确判断，能准确判断出基本数据类型的值！</font></p><h1 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h1><blockquote><p>instanceof 是用来判断 A 是否为 B 的实例，表达式为：A instanceof B，如果 A 是 B 的实例，则返回 true,否则返回 false。 在这里需要特别注意的是：instanceof 检测的是原型，我们用一段伪代码来模拟其内部执行过程：</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">instanceof</span> (A,B) = &#123;</span><br><span class="line">    <span class="keyword">var</span> L = A.<span class="property">__proto__</span>;</span><br><span class="line">    <span class="keyword">var</span> R = B.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(L === R) &#123;</span><br><span class="line">        <span class="comment">// A的内部属性 __proto__ 指向 B 的原型对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上述过程可以看出，当 A 的 <strong>proto</strong> 指向 B 的 prototype 时，就认为 A 就是 B 的实例，我们再来看几个例子：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[] <span class="keyword">instanceof</span> <span class="title class_">Array</span>; <span class="comment">// true</span></span><br><span class="line">&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Object</span>;<span class="comment">// true</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>() <span class="keyword">instanceof</span> <span class="title class_">Date</span>;<span class="comment">// true</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Person</span>() <span class="keyword">instanceof</span> <span class="title class_">Person</span>;</span><br><span class="line"> </span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="title class_">Object</span>; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>() <span class="keyword">instanceof</span> <span class="title class_">Object</span>;<span class="comment">// true</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Person</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>;<span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>我们发现，虽然 instanceof 能够判断出 [ ] 是Array的实例，但它认为 [ ] 也是Object的实例，为什么呢？</p><p>我们来分析一下 [ ]、Array、Object 三者之间的关系：</p><p>从 instanceof 能够判断出 [ ].<strong>proto</strong>  指向 Array.prototype，而 Array.prototype.<strong>proto</strong> 又指向了Object.prototype，最终 Object.prototype.<strong>proto</strong> 指向了null，标志着原型链的结束。因此，[]、Array、Object 就在内部形成了一条原型链：</p><p><img src="/img/md/pictures/849589-20160112232510850-2003340583.png" alt="原型链"></p><p>从原型链可以看出，[] 的 <strong>proto</strong>  直接指向Array.prototype，间接指向 Object.prototype，所以按照 instanceof 的判断规则，[] 就是Object的实例。依次类推，类似的 new Date()、new Person() 也会形成一条对应的原型链 。<b>因此，instanceof 只能用来判断两个对象是否属于实例关系， 而不能判断一个对象实例具体属于哪种类型。</b></p><p>instanceof 操作符的问题在于，它假定只有一个全局执行环境。如果网页中包含多个框架，那实际上就存在两个以上不同的全局执行环境，从而存在两个以上不同版本的构造函数。如果你从一个框架向另一个框架传入一个数组，那么传入的数组与在第二个框架中原生创建的数组分别具有各自不同的构造函数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;iframe&#x27;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(iframe);</span><br><span class="line">xArray = <span class="variable language_">window</span>.<span class="property">frames</span>[<span class="number">0</span>].<span class="property">Array</span>;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title function_">xArray</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">// [1,2,3]</span></span><br><span class="line">arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><font color='red'>instanceof 只能用于判断对象，基本数据类型值不能判断，所以也不能准确的判断出所有的类型！</font></p><h1 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h1><p>当一个函数 F被定义时，JS引擎会为F添加 prototype 原型，然后再在 prototype上添加一个 constructor 属性，并让其指向 F 的引用。如下所示：<br><img src="/img/md/pictures/849589-20170508125250566-1896556617.png" alt="引用1"></p><p>当执行 var f &#x3D; new F() 时，F 被当成了构造函数，f 是F的实例对象，此时 F 原型上的 constructor 传递到了 f 上，因此 f.constructor &#x3D;&#x3D; F<br><img src="/img/md/pictures/849589-20170508125714941-1649387639.png" alt="引用2"></p><p>可以看出，F 利用原型对象上的 constructor 引用了自身，当 F 作为构造函数来创建对象时，原型上的 constructor 就被遗传到了新创建的对象上， 从原型链角度讲，构造函数 F 就是新对象的类型。这样做的意义是，让新对象在诞生以后，就具有可追溯的数据类型。</p><p>细节问题：<br><img src="/img/md/pictures/849589-20170508132757347-1999338357.png" alt="细节问题"></p><blockquote><ol><li>null 和 undefined 是无效的对象，因此是不会有 constructor 存在的，这两种类型的数据需要通过其他方式来判断。</li><li>函数的 constructor 是不稳定的，这个主要体现在自定义对象上，当开发者重写 prototype 后，原有的 constructor 引用会丢失，constructor 会默认为 Object</li></ol></blockquote><p><font color='red'>constructor能判断基本数据类型string、number、boolean和对象类型（array、function等等），但是它不能判断undefined和null。所以它判断类型值也不十分准确！</font></p><h1 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call()"></a>Object.prototype.toString.call()</h1><p>toString() 是 Object 的原型方法，调用该方法，默认返回当前对象的 [[Class]] 。这是一个内部属性，其格式为 [object Xxx] ，其中 Xxx 就是对象的类型。</p><p>对于 Object 对象，直接调用 toString()  就能返回 [object Object] 。而对于其他对象，则需要通过 call &#x2F; apply 来调用才能返回正确的类型信息。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="string">&#x27;&#x27;</span>) ;   <span class="comment">// [object String]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">1</span>) ;    <span class="comment">// [object Number]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">true</span>) ; <span class="comment">// [object Boolean]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="title class_">Symbol</span>()); <span class="comment">//[object Symbol]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">undefined</span>) ; <span class="comment">// [object Undefined]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">null</span>) ; <span class="comment">// [object Null]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">Function</span>()) ; <span class="comment">// [object Function]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()) ; <span class="comment">// [object Date]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([]) ; <span class="comment">// [object Array]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>()) ; <span class="comment">// [object RegExp]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">Error</span>()) ; <span class="comment">// [object Error]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="variable language_">document</span>) ; <span class="comment">// [object HTMLDocument]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="variable language_">window</span>) ; <span class="comment">//[object global] window 是全局对象 global 的引用</span></span><br></pre></td></tr></table></figure><h1 id="工具方式实现"><a href="#工具方式实现" class="headerlink" title="工具方式实现"></a>工具方式实现</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">type</span>(<span class="params">e</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> ret = <span class="keyword">typeof</span> e;</span><br><span class="line"><span class="keyword">var</span> template = &#123;</span><br><span class="line"><span class="comment">//引用值对象</span></span><br><span class="line"><span class="string">&#x27;[object Array]&#x27;</span>: <span class="string">&#x27;array&#x27;</span>, <span class="comment">//数组</span></span><br><span class="line"><span class="string">&#x27;[object Object]&#x27;</span>: <span class="string">&#x27;object&#x27;</span>, <span class="comment">//对象</span></span><br><span class="line"><span class="string">&#x27;[object Number]&#x27;</span>: <span class="string">&#x27;number-object&#x27;</span>, <span class="comment">//包装类</span></span><br><span class="line"><span class="string">&#x27;[object Boolean]&#x27;</span>: <span class="string">&#x27;boolean-object&#x27;</span>, <span class="comment">//包装类</span></span><br><span class="line"><span class="string">&#x27;[object String]&#x27;</span>: <span class="string">&#x27;string-object&#x27;</span>, <span class="comment">//包装类</span></span><br><span class="line"><span class="string">&#x27;[object Date]&#x27;</span>: <span class="string">&#x27;date-object&#x27;</span>, <span class="comment">//日期</span></span><br><span class="line"><span class="string">&#x27;[object RegExp]&#x27;</span>: <span class="string">&#x27;regexp-object&#x27;</span> <span class="comment">//正则表达式</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">if</span> (e == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret == <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> str = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(e);</span><br><span class="line"><span class="keyword">return</span> template[str];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">typeof</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端,JS,工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring设计模式-单例模式</title>
      <link href="/2022/01/14/spring-design-pattern-singleton/"/>
      <url>/2022/01/14/spring-design-pattern-singleton/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><blockquote><p>单例模式是一种确保每个应用程序仅存在一个对象实例的机制。在管理共享资源或提供跨领域服务（例如日志记录）时，此模式很有用。</p></blockquote><h2 id="优点和缺点"><a href="#优点和缺点" class="headerlink" title="优点和缺点"></a>优点和缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点:"></a>优点:</h3><ul><li>单例模式可以保证内存里只有一个实例，减少了内存的开销。</li><li>可以避免对资源的多重占用。</li><li>单例模式设置全局的访问点，可以优化和共享资源的访问。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点:"></a>缺点:</h3><ul><li>单例模式一般没有接口，扩展困难，如果要扩展，则除了修改原来的代码，没有第二种途径，违背开闭原则。</li><li>在并发测试中，单例模式不利于代码调试。在调试过程中。如果单例中的代码没有执行完，也不能拟生成一个新的对象。</li><li>单例模式的功能代码通常写在一个类中，如果功能设计不合理，则很容易违背单一职责原则。</li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><blockquote><p>开发工具类库中的很多工具类都应用了单例模式，比例线程池、缓存、日志对象、Bean等，它们都只需要创建一个对象。</p></blockquote><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="饿汉式（加锁）"><a href="#饿汉式（加锁）" class="headerlink" title="饿汉式（加锁）"></a>饿汉式（加锁）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (singleton) &#123;</span><br><span class="line">                <span class="keyword">if</span>(singleton == <span class="literal">null</span>) &#123; </span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> singleton;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA,SPRING,设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2 Element-UI 表格大数据加载渲染慢问题</title>
      <link href="/2022/01/07/el-table-big-data/"/>
      <url>/2022/01/07/el-table-big-data/</url>
      
        <content type="html"><![CDATA[<h1 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h1><blockquote><p>假设全部数据为initTable(数组)，现在使用一个tableData（数组），tableData &#x3D; initTable.slice(scorll, scorll+ displayCount)，scroll表示当前滚动到的index， displayCount表示要展示的行数。把tableData设为el-table的数据源，只渲染该部分数据。通过对表格添加滚动事件监听，来动态更新scroll，并且对scroll添加watch，当scroll发生变化，就自动更新tableData。采用虚拟滑动条方式触发。</p></blockquote><h1 id="创建指令"><a href="#创建指令" class="headerlink" title="创建指令"></a>创建指令</h1><h2 id="创建文件夹el-table，在其下面创建loadmore-js"><a href="#创建文件夹el-table，在其下面创建loadmore-js" class="headerlink" title="创建文件夹el-table，在其下面创建loadmore.js"></a>创建文件夹el-table，在其下面创建loadmore.js</h2><p>内容如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">let</span> flag = <span class="literal">true</span> <span class="comment">// 控制返回频度，以免内存消耗过大</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">bind</span>(<span class="params">el, binding, vnode</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      arg</span><br><span class="line">    &#125; = binding;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="string">&#x27;&lt;div class=&quot;content-height&quot; style=&quot;height: 0px;&quot;&gt;&amp;nbsp;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> divHtml = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: a</span><br><span class="line">    &#125;);</span><br><span class="line">    el.<span class="property">children</span>[<span class="number">0</span>].<span class="title function_">appendChild</span>(<span class="keyword">new</span> <span class="title function_">divHtml</span>().$mount().<span class="property">$el</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> sco = el.<span class="title function_">querySelector</span>(<span class="string">&#x27;.fictitious&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> cellHeihgt = <span class="built_in">parseInt</span>((arg &amp;&amp; arg[<span class="number">0</span>])) || <span class="number">50</span>;</span><br><span class="line">    sco.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="title function_">throttle</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      binding.<span class="title function_">value</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(sco.<span class="property">scrollTop</span> / cellHeihgt), <span class="title class_">Math</span>.<span class="title function_">floor</span>(sco.<span class="property">clientHeight</span> / cellHeihgt));</span><br><span class="line">    &#125;, <span class="number">300</span>));</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousewheel&#x27;</span>, <span class="keyword">function</span> (<span class="params">ev</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> ev = <span class="variable language_">window</span>.<span class="property">event</span> || ev;</span><br><span class="line">      sco.<span class="property">scrollTop</span> = -ev.<span class="property">wheelDelta</span>*<span class="number">2</span> + sco.<span class="property">scrollTop</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">update</span>: <span class="function">(<span class="params">el, binding</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      arg</span><br><span class="line">    &#125; = binding;</span><br><span class="line">    <span class="keyword">const</span> cellHeihgt = <span class="built_in">parseInt</span>((arg &amp;&amp; arg[<span class="number">0</span>])) || <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">if</span> (arg[<span class="number">0</span>] * arg[<span class="number">1</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> contentHeight = el.<span class="title function_">querySelector</span>(<span class="string">&#x27;.content-height&#x27;</span>);</span><br><span class="line">      <span class="keyword">const</span> sco = el.<span class="title function_">querySelector</span>(<span class="string">&#x27;.fictitious&#x27;</span>);</span><br><span class="line">      contentHeight.<span class="property">style</span>.<span class="property">height</span> = arg[<span class="number">0</span>] * (arg[<span class="number">1</span>] + <span class="number">1</span>) + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">      <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        binding.<span class="title function_">value</span>(<span class="number">0</span>, <span class="title class_">Math</span>.<span class="title function_">floor</span>((<span class="variable language_">window</span>.<span class="property">innerHeight</span> - <span class="number">316</span>) / cellHeihgt));</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      flag = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 节流</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, wait</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> context = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        fn.<span class="title function_">apply</span>(context, args);</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>fictitious：滑动条class</li><li>content-height：滑动内容区</li></ul><h2 id="注册指令（main-js引入文件）"><a href="#注册指令（main-js引入文件）" class="headerlink" title="注册指令（main.js引入文件）"></a>注册指令（main.js引入文件）</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> loadmore <span class="keyword">from</span> <span class="string">&#x27;...../el-table/loadmore&#x27;</span></span><br><span class="line"><span class="comment">// 注册</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;el-table-loadmore&#x27;</span>, loadmore)</span><br></pre></td></tr></table></figure><h1 id="创建滑动条外壳"><a href="#创建滑动条外壳" class="headerlink" title="创建滑动条外壳"></a>创建滑动条外壳</h1><p>在el-table的父层添加一下代码</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position: relative; padding-right: 12px;&quot;</span> <span class="attr">v-el-table-loadmore:</span>[[<span class="attr">rowHeight</span>,<span class="attr">initTable.length</span>]]=<span class="string">&quot;loadMore&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute;right: 0;margin-top: 49px;height: calc(100vh - 316px);overflow-y: auto;width: 12px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;fictitious&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;scollShow&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:key</span>=<span class="string">&quot;key&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">loadMore</span>(<span class="params">firstIndex, countPage</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> arr = []</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> index = firstIndex; index &lt; <span class="variable language_">this</span>.<span class="property">initTable</span>.<span class="property">length</span>; index++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> element = <span class="variable language_">this</span>.<span class="property">initTable</span>[index];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (index &lt; firstIndex + countPage) &#123;</span></span><br><span class="line"><span class="language-javascript">            arr.<span class="title function_">push</span>(element);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">tableData</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arr));</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">key</span> = !<span class="variable language_">this</span>.<span class="property">key</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 浏览器式样 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.fictitious</span>::-webkit-scrollbar-track-piece &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#f8f8f8</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.fictitious</span>::-webkit-scrollbar &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.fictitious</span>::-webkit-scrollbar-thumb &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#dddddd</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.fictitious</span>::-webkit-scrollbar-thumb:hover &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#bbb</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注： height: calc(100vh - 316px) 设置滑动条高度</p><ul><li>key：重新渲染表格</li><li>rowHeight: 表示每行的高度</li><li>initTable： 全部数据</li><li>loadMore： 滑动触发方法 （参数1：开始展示行，参数2：展示的条数）</li><li>scollShow：显示滚动条否</li></ul>]]></content>
      
      
      <categories>
          
          <category> Element-UI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue,大数据，渲染卡顿 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2 Element-UI 表格随浏览器缩放高度自适应</title>
      <link href="/2022/01/06/el-table-height/"/>
      <url>/2022/01/06/el-table-height/</url>
      
        <content type="html"><![CDATA[<h1 id="创建指令"><a href="#创建指令" class="headerlink" title="创建指令"></a>创建指令</h1><h2 id="创建文件夹el-table，在其下面创建adaptive-js"><a href="#创建文件夹el-table，在其下面创建adaptive-js" class="headerlink" title="创建文件夹el-table，在其下面创建adaptive.js"></a>创建文件夹el-table，在其下面创建adaptive.js</h2><p>内容如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; addResizeListener, removeResizeListener &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui/src/utils/resize-event&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置表格高度</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">doResize</span> = <span class="keyword">async</span>(<span class="params">el, binding, vnode</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 获取表格Dom对象</span></span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">componentInstance</span>: $table &#125; = <span class="keyword">await</span> vnode</span><br><span class="line">    <span class="comment">// 获取调用传递过来的数据</span></span><br><span class="line">    <span class="keyword">const</span> &#123; value &#125; = binding</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!$table.<span class="property">height</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`el-$table must set the height. Such as height=&#x27;100px&#x27;`</span>)</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">const</span> bottomOffset = (value &amp;&amp; value.<span class="property">bottomOffset</span>) || <span class="number">30</span></span><br><span class="line">    <span class="keyword">if</span> (!$table) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 计算列表高度并设置</span></span><br><span class="line">    <span class="keyword">const</span> height = <span class="variable language_">window</span>.<span class="property">innerHeight</span> - el.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span> - bottomOffset</span><br><span class="line">    $table.<span class="property">layout</span>.<span class="title function_">setHeight</span>(height)</span><br><span class="line">    $table.<span class="title function_">doLayout</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化设置</span></span><br><span class="line">    <span class="title function_">bind</span>(<span class="params">el, binding, vnode</span>) &#123;</span><br><span class="line">        <span class="comment">// 设置resize监听方法</span></span><br><span class="line">        el.<span class="property">resizeListener</span> = <span class="title function_">async</span>() =&gt; &#123;</span><br><span class="line">            <span class="keyword">await</span> <span class="title function_">doResize</span>(el, binding, vnode)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 绑定监听方法到addResizeListener</span></span><br><span class="line">        <span class="title function_">addResizeListener</span>(<span class="variable language_">window</span>.<span class="property">document</span>.<span class="property">body</span>, el.<span class="property">resizeListener</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 绑定默认高度</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">inserted</span>(<span class="params">el, binding, vnode</span>) &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">doResize</span>(el, binding, vnode)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 销毁时设置</span></span><br><span class="line">    <span class="title function_">unbind</span>(<span class="params">el</span>) &#123;</span><br><span class="line">        <span class="comment">// 移除resize监听</span></span><br><span class="line">        <span class="title function_">removeResizeListener</span>(el, el.<span class="property">resizeListener</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="注册指令"><a href="#注册指令" class="headerlink" title="注册指令"></a>注册指令</h1><h2 id="main-js引入文件"><a href="#main-js引入文件" class="headerlink" title="main.js引入文件"></a>main.js引入文件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">import</span> adaptive <span class="keyword">from</span> <span class="string">&#x27;...../el-table/adaptive&#x27;</span></span><br><span class="line"><span class="comment">// 注册</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;adaptive&#x27;</span>, adaptive)</span><br></pre></td></tr></table></figure><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">height</span>=<span class="string">&quot;100px&quot;</span> <span class="attr">v-adaptive</span>=<span class="string">&quot;&#123;bottomOffset: 30&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- bottomOffset 代表距离底部的距离 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注：height=&quot;100px&quot;属性是必填的，可以随意赋值 --&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Element-UI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue,自适应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iphoneX样式适配</title>
      <link href="/2021/12/24/css-iphoneX/"/>
      <url>/2021/12/24/css-iphoneX/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><blockquote><p>iPhoneX由于新增了刘海以及取消了按键采用了小黑条的形式，导致会出现以下的问题：样式边缘出现了空白（没有覆盖整个可视区域）</p></blockquote><p><img src="/img/md/css-iphoneX/default-inset-behavior.png" alt="可视区域"></p><p>我们可以通过meta设置解决这个问题</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&#x27;viewport&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;initial-scale=1, viewport-fit=cover&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/md/css-iphoneX/viewport-fit-cover.png" alt="全屏模式"></p><p>于是出现了新的问题，部分内容被刘海和黑条遮盖了，接下来就有两种解决方案：</p><h1 id="多媒体查询"><a href="#多媒体查询" class="headerlink" title="多媒体查询"></a>多媒体查询</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//iphoneX、iphoneXs</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">device-width</span>: <span class="number">375px</span>) <span class="keyword">and</span> (<span class="attribute">device-height</span>: <span class="number">812px</span>) <span class="keyword">and</span> (<span class="attribute">-webkit-device-pixel-ratio</span>: <span class="number">3</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line">即: 设备屏幕可见宽度为<span class="number">375px</span>， 可见高度为<span class="number">812px</span>及设备像素比为<span class="number">3</span></span><br><span class="line"> </span><br><span class="line">//iphone Xs Max</span><br><span class="line">@media only screen and (device-width: <span class="number">414px</span>) and (device-height: <span class="number">896px</span>) and (-webkit-device-pixel-ratio:<span class="number">3</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//iphone XR</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">device-width</span>: <span class="number">414px</span>) <span class="keyword">and</span> (<span class="attribute">device-height</span>: <span class="number">896px</span>) <span class="keyword">and</span> (<span class="attribute">-webkit-device-pixel-ratio</span>:<span class="number">2</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//横屏</span><br><span class="line"><span class="keyword">@media</span> all <span class="keyword">and</span> (<span class="attribute">orientation</span> : landscape) &#123; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">//竖屏</span><br><span class="line"><span class="keyword">@media</span> all <span class="keyword">and</span> (<span class="attribute">orientation</span> : portrait)&#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="苹果特定变量"><a href="#苹果特定变量" class="headerlink" title="苹果特定变量"></a>苹果特定变量</h1><blockquote><p><code>env()</code>最初由iOS浏览器提供，用于允许开发人员将其内容放置在视口的安全区域中，该规范中定义的<code>safe-area-inset-*</code> 值可用于确保内容即使在非矩形的视区中也可以完全显示。</p></blockquote><p><img src="/img/md/css-iphoneX/safe-areas-1.png" alt="全屏模式"></p><p>注意：viewport-fit&#x3D;cover和env(safe-area-inset-bottom)需要一起使用</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&#x27;viewport&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;initial-scale=1, viewport-fit=cover&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// <span class="keyword">@supports</span>意为支持</span><br><span class="line">// <span class="attribute">bottom</span>: constant(safe-area-inset-bottom)) 或 <span class="attribute">bottom</span>: env(safe-area-inset-bottom)</span><br><span class="line">// 语法的话，以下css可用</span><br><span class="line">  </span><br><span class="line">@supports (<span class="attribute">bottom</span>: constant(safe-area-inset-bottom)) <span class="keyword">or</span> (<span class="attribute">bottom</span>: env(safe-area-inset-bottom)) &#123;</span><br><span class="line">  <span class="selector-class">.iphone-x</span><span class="selector-pseudo">::after</span> &#123; // 给需要适配黑条的内容加上 iphone-x 的 class</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="built_in">constant</span>(safe-area-inset-bottom); <span class="comment">/* 兼容 iOS &lt; 11.2 */</span></span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="built_in">env</span>(safe-area-inset-bottom); <span class="comment">/* 兼容 iOS &gt;= 11.2 */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上适用于手机端底部设置tab栏，给tab加上特定的padding-bottom</p><p>官方给出了另一种css方案来解决整体的遮盖问题：</p><p><img src="/img/md/css-iphoneX/viewport-fit-cover.png" alt="全屏模式"></p><p>以下只解决了横版问题，竖屏时文章的padding仍然有问题（顶头了）：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="built_in">env</span>(safe-area-inset-left);</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="built_in">env</span>(safe-area-inset-right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>max()好用，但是太新了，需要注意自己浏览器的支持情况！</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@supports</span>(padding: max(<span class="number">0px</span>)) &#123; // <span class="keyword">@supports</span>意为支持padding max语法的话，以下css可用</span><br><span class="line">    .post &#123;</span><br><span class="line">        <span class="attribute">padding-left</span>: <span class="built_in">max</span>(<span class="number">12px</span>, <span class="built_in">env</span>(safe-area-inset-left));</span><br><span class="line">        <span class="attribute">padding-right</span>: <span class="built_in">max</span>(<span class="number">12px</span>, <span class="built_in">env</span>(safe-area-inset-right));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS,刘海 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue下载文件需要token校验</title>
      <link href="/2021/12/06/vue-download-token/"/>
      <url>/2021/12/06/vue-download-token/</url>
      
        <content type="html"><![CDATA[<h1 id="直接下载"><a href="#直接下载" class="headerlink" title="直接下载"></a>直接下载</h1><h2 id="前端创建超链接"><a href="#前端创建超链接" class="headerlink" title="前端创建超链接"></a>前端创建超链接</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&#x27;&quot;/user/downloadExcel&quot;&#x27;</span>&gt;</span>下载模板<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="点击事件触发"><a href="#点击事件触发" class="headerlink" title="点击事件触发"></a>点击事件触发</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">downloadExcel</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;/user/downloadExcel&quot;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="token下载"><a href="#token下载" class="headerlink" title="token下载"></a>token下载</h1><blockquote><p>注：数据返回类型必须为 responseType: ‘blob’</p></blockquote><blockquote><p>1.数据正常，后台返回 blob 文件流<br>2.数据异常，后台返回 blob 类型异常信息</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> downLoadFile = <span class="keyword">function</span> (<span class="params">response, fileName</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(response.<span class="property">type</span> === <span class="string">&#x27;jsonString&#x27;</span> || response.<span class="property">type</span> === <span class="string">&#x27;application/json&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">    reader.<span class="title function_">readAsText</span>(response, <span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">    reader.<span class="property">onload</span> = <span class="function"><span class="params">e</span> =&gt;</span>&#123;</span><br><span class="line">      <span class="comment">// 后台返回文件下载失败 处理</span></span><br><span class="line">      <span class="keyword">const</span> &#123; msg &#125;  = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(reader.<span class="property">result</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$Message</span>.<span class="title function_">error</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">msSaveOrOpenBlob</span>) &#123; <span class="comment">// IE10</span></span><br><span class="line">        navigator.<span class="title function_">msSaveBlob</span>(response, fileName);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> $body = <span class="variable language_">document</span>.<span class="property">body</span>;</span><br><span class="line">        <span class="keyword">let</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        link.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">        $body.<span class="title function_">appendChild</span>(link);</span><br><span class="line">        link.<span class="property">href</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(response); <span class="comment">//创建一个指向该参数对象的url</span></span><br><span class="line">        link.<span class="property">download</span> = fileName;</span><br><span class="line">        link.<span class="title function_">click</span>(); <span class="comment">// 触发下载</span></span><br><span class="line">        <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(link.<span class="property">href</span>); <span class="comment">// 释放创建的URL</span></span><br><span class="line">        $body.<span class="title function_">removeChild</span>(link)</span><br><span class="line">        link = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue,文件下载,token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git经典操作场景</title>
      <link href="/2021/11/24/git-scene/"/>
      <url>/2021/11/24/git-scene/</url>
      
        <content type="html"><![CDATA[<h1 id="我刚才提交了什么"><a href="#我刚才提交了什么" class="headerlink" title="我刚才提交了什么?"></a>我刚才提交了什么?</h1><blockquote><p>如果你用 git commit -a 提交了一次变化(changes)，而你又不确定到底这次提交了哪些内容。你就可以用下面的命令显示当前HEAD上的最近一次的提交(commit):</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git show</span><br><span class="line">git <span class="built_in">log</span> -n1 -p</span><br></pre></td></tr></table></figure><h1 id="我的提交信息-commit-message-写错了"><a href="#我的提交信息-commit-message-写错了" class="headerlink" title="我的提交信息(commit message)写错了"></a>我的提交信息(commit message)写错了</h1><blockquote><p>如果你的提交信息(commit message)写错了且这次提交(commit)还没有推(push), 你可以通过下面的方法来修改提交信息(commit message):</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend --only <span class="comment">#打开之后点击i键，进入编辑，最后:wq保存即可</span></span><br><span class="line">git commit --amend --only -m <span class="string">&#x27;xxxxxxx&#x27;</span> <span class="comment">#直接修改</span></span><br></pre></td></tr></table></figure><h1 id="我想从一个提交-commit-里移除一个文件"><a href="#我想从一个提交-commit-里移除一个文件" class="headerlink" title="我想从一个提交(commit)里移除一个文件"></a>我想从一个提交(commit)里移除一个文件</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout HEAD^ myfile</span><br><span class="line">git add -A  </span><br><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><h1 id="我不小心删除了我的分支"><a href="#我不小心删除了我的分支" class="headerlink" title="我不小心删除了我的分支"></a>我不小心删除了我的分支</h1><blockquote><p>如果你定期推送到远程, 多数情况下应该是安全的，但有些时候还是可能删除了还没有推到远程的分支。让我们先创建一个分支和一个新的文件:</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b my-branch  </span><br><span class="line">git branch  </span><br><span class="line"><span class="built_in">touch</span> foo.txt  </span><br><span class="line"><span class="built_in">ls</span>  </span><br><span class="line">README.md foo.txt</span><br></pre></td></tr></table></figure><p>添加文件并做一次提交</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .  </span><br><span class="line">git commit -m <span class="string">&#x27;foo.txt added&#x27;</span>  </span><br><span class="line">foo.txt added  </span><br><span class="line"> 1 files changed, 1 insertions(+)  </span><br><span class="line"> create mode 100644 foo.txt  </span><br><span class="line">git <span class="built_in">log</span>  </span><br><span class="line">  </span><br><span class="line">commit 4e3cd85a670ced7cc17a2b5d8d3d809ac88d5012  </span><br><span class="line">Author: siemiatj &lt;siemiatj@example.com&gt;  </span><br><span class="line">Date:   Wed Jul 30 00:34:10 2014 +0200  </span><br><span class="line">  </span><br><span class="line">    foo.txt added  </span><br><span class="line">  </span><br><span class="line">commit 69204cdf0acbab201619d95ad8295928e7f411d5  </span><br><span class="line">Author: Kate Hudson &lt;katehudson@example.com&gt;  </span><br><span class="line">Date:   Tue Jul 29 13:14:46 2014 -0400  </span><br><span class="line">  </span><br><span class="line">    Fixes <span class="comment">#6: Force pushing after amending commits</span></span><br></pre></td></tr></table></figure><p>现在我们切回到主(main)分支，‘不小心的’删除my-branch分支</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout main  </span><br><span class="line">Switched to branch <span class="string">&#x27;main&#x27;</span>  </span><br><span class="line">Your branch is up-to-date with <span class="string">&#x27;origin/main&#x27;</span>.  </span><br><span class="line">git branch -D my-branch  </span><br><span class="line">Deleted branch my-branch (was 4e3cd85).  </span><br><span class="line"><span class="built_in">echo</span> oh noes, deleted my branch!  </span><br><span class="line">oh noes, deleted my branch!</span><br></pre></td></tr></table></figure><p>在这时候你应该想起了reflog, 一个升级版的日志，它存储了仓库(repo)里面所有动作的历史。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reflog  </span><br><span class="line">69204cd HEAD@&#123;0&#125;: checkout: moving from my-branch to main  </span><br><span class="line">4e3cd85 HEAD@&#123;1&#125;: commit: foo.txt added  </span><br><span class="line">69204cd HEAD@&#123;2&#125;: checkout: moving from main to my-branch</span><br></pre></td></tr></table></figure><p>正如你所见，我们有一个来自删除分支的提交hash(commit hash)，接下来看看是否能恢复删除了的分支。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout -b my-branch-help  </span><br><span class="line">Switched to a new branch <span class="string">&#x27;my-branch-help&#x27;</span>  </span><br><span class="line">git reset --hard 4e3cd85  </span><br><span class="line">HEAD is now at 4e3cd85 foo.txt added  </span><br><span class="line"><span class="built_in">ls</span>  </span><br><span class="line">README.md foo.txt</span><br></pre></td></tr></table></figure><h1 id="我想删除一个分支"><a href="#我想删除一个分支" class="headerlink" title="我想删除一个分支"></a>我想删除一个分支</h1><p>删除一个远程分支:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin --delete my-branch</span><br></pre></td></tr></table></figure><p>你也可以:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin :my-branch</span><br></pre></td></tr></table></figure><p>删除一个本地分支:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -D my-branch </span><br></pre></td></tr></table></figure><h1 id="有冲突的情况"><a href="#有冲突的情况" class="headerlink" title="有冲突的情况"></a>有冲突的情况</h1><p>首先执行 git status 找出哪些文件有冲突:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status  </span><br><span class="line">On branch my-branch  </span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:  </span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)  </span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)  </span><br><span class="line">  </span><br><span class="line"> modified:   README.md</span><br></pre></td></tr></table></figure><p> 在你解决完所有冲突和测试过后, git add 变化了的(changed)文件, 然后用git rebase –continue 继续rebase。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add README.md  </span><br><span class="line">git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure><p>如果在解决完所有的冲突过后，得到了与提交前一样的结果, 可以执行git rebase –skip。</p>]]></content>
      
      
      <categories>
          
          <category> GIT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="/2021/08/06/js-closure/"/>
      <url>/2021/08/06/js-closure/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是闭包？"><a href="#什么是闭包？" class="headerlink" title="什么是闭包？"></a>什么是闭包？</h1><blockquote><p>由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，闭包就是能够读取其他函数内部变量的函数。所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p></blockquote><p>比如下面的代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">999</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">f1</span>();</span><br><span class="line"><span class="title function_">result</span>();<span class="comment">//999</span></span><br></pre></td></tr></table></figure><ul><li>函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1就是不可见的。</li><li>这就是Javascript语言特有的”链式作用域”结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</li><li>既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，就可以在f1外部读取它的内部变量了。</li></ul><h1 id="闭包的使用场景"><a href="#闭包的使用场景" class="headerlink" title="闭包的使用场景"></a>闭包的使用场景</h1><h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h2><blockquote><p>原生的setTimeout传递的第一个函数不能带参数，通过闭包可以实现传参效果。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fun = <span class="title function_">f1</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(fun,<span class="number">1000</span>);<span class="comment">//一秒之后打印出1</span></span><br></pre></td></tr></table></figure><h2 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h2><blockquote><p>定义行为，然后把它关联到某个用户事件上（点击或者按键）。代码通常会作为一个回调（事件触发时调用的函数）绑定到事件。<br>比如下面这段代码：</p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">id</span>=<span class="string">&quot;size-12&quot;</span>&gt;</span>12<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">id</span>=<span class="string">&quot;size-20&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">id</span>=<span class="string">&quot;size-30&quot;</span>&gt;</span>30<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">changeSize</span>(<span class="params">size</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">fontSize</span> = size + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> size12 = <span class="title function_">changeSize</span>(<span class="number">12</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> size14 = <span class="title function_">changeSize</span>(<span class="number">20</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> size16 = <span class="title function_">changeSize</span>(<span class="number">30</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;size-12&#x27;</span>).<span class="property">onclick</span> = size12;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;size-20&#x27;</span>).<span class="property">onclick</span> = size14;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;size-30&#x27;</span>).<span class="property">onclick</span> = size16;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当点击数字时，字体也会变成相应的大小。</p><h2 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h2><blockquote><p>在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。实现的关键就在于setTimeOut这个函数，由于还需要一个变量来保存计时，考虑维护全局纯净，可以借助闭包来实现。</p></blockquote><p>如下代码所示：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* fn [function] 需要防抖的函数</span></span><br><span class="line"><span class="comment">* delay [number] 毫秒，防抖期限值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn,delay</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>    <span class="comment">//借助闭包</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(timer)&#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer) <span class="comment">//进入该分支语句，说明当前正在一个计时过程中，并且又触发了相同事件。所以要取消当前的计时，重新开始计时</span></span><br><span class="line">            timer = <span class="title function_">setTimeOut</span>(fn,delay) </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            timer = <span class="title function_">setTimeOut</span>(fn,delay) <span class="comment">// 进入该分支说明当前并没有在计时，那么就开始一个计时</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="封装私有变量"><a href="#封装私有变量" class="headerlink" title="封装私有变量"></a>封装私有变量</h2><blockquote><p>用js创建一个计数器</p></blockquote><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">       <span class="attr">inc</span>:<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">           sum++;</span><br><span class="line">           <span class="keyword">return</span> sum;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">f1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="title function_">inc</span>());<span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="title function_">inc</span>());<span class="comment">//2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="title function_">inc</span>());<span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>在返回的对象中，实现了一个闭包，该闭包携带了局部变量x，并且，从外部代码根本无法访问到变量x。</p><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        sum++;</span><br><span class="line">        <span class="keyword">return</span> f2;</span><br><span class="line">    &#125;</span><br><span class="line">    f2.<span class="property">valueOf</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;;</span><br><span class="line">    f2.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> sum+<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行函数f1，返回的是函数f2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="title function_">f1</span>());<span class="comment">//0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="title function_">f1</span>()())<span class="comment">//1 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="title function_">f1</span>()()())<span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>所有js数据类型都拥有valueOf和toString这两个方法，null除外<br>valueOf()方法：返回指定对象的原始值。<br>toString()方法：返回对象的字符串表示。<br>在数值运算中，优先调用了valueOf，字符串运算中，优先调用toString<br>sum+’ ‘是一个字符串类型的数据</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端,JS,闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis服务集群配置</title>
      <link href="/2021/08/06/redis-colony/"/>
      <url>/2021/08/06/redis-colony/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis服务集群配置"><a href="#Redis服务集群配置" class="headerlink" title="Redis服务集群配置"></a>Redis服务集群配置</h1><blockquote><p>介绍安装环境与版本:<br>用两台物理机模拟6个节点，一台机器3个节点，创建出3 master、3 salve 环境。<br>redis 采用 redis-3.2.1 版本。<br>两台Linux物理机都是 CentOS ，一台 CentOS6.5 （IP:172.17.5.87），一台 CentOS6.5（IP:172.17.5.9）。</p></blockquote><h2 id="下载并解压"><a href="#下载并解压" class="headerlink" title="下载并解压"></a>下载并解压</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/redis</span><br><span class="line">wget http://download.redis.io/releases/redis-3.2.1.tar.gz</span><br><span class="line">tar -zxvf redis-3.2.1.tar.gz</span><br></pre></td></tr></table></figure><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> redis-3.2.1</span><br><span class="line">make&amp;make install</span><br></pre></td></tr></table></figure><h2 id="将-redis-trib-rb-复制到-x2F-usr-x2F-local-x2F-bin-目录下"><a href="#将-redis-trib-rb-复制到-x2F-usr-x2F-local-x2F-bin-目录下" class="headerlink" title="将 redis-trib.rb 复制到 &#x2F;usr&#x2F;local&#x2F;bin 目录下"></a>将 redis-trib.rb 复制到 &#x2F;usr&#x2F;local&#x2F;bin 目录下</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> src</span><br><span class="line"><span class="built_in">cp</span> redis-trib.rb  /user/local/bin/</span><br></pre></td></tr></table></figure><h2 id="创建Redis节点"><a href="#创建Redis节点" class="headerlink" title="创建Redis节点"></a>创建Redis节点</h2><p>首先在172.17.5.87服务器上&#x2F;usr&#x2F;local&#x2F;redis&#x2F;redis-3.2.1 目录下创建 redis_cluster目录；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> redis_cluster</span><br></pre></td></tr></table></figure><p>在 redis_cluster 目录下，创建名为7000、7001、7002的目录，并将 redis.conf 拷贝到这三个目录中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> 7000 7001 7002</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">cp</span> redis.conf  redis_cluster/7000</span><br><span class="line"><span class="built_in">cp</span> redis.conf  redis_cluster/7001</span><br><span class="line"><span class="built_in">cp</span> redis.conf  redis_cluster/7002</span><br></pre></td></tr></table></figure><p>分别修改这三个配置文件，修改如下内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">port  7000                                      //端口7000,7001,7002        </span><br><span class="line">bind 172.17.5.87                                //本机ip 默认ip为127.0.0.1 需要改为其他节点机器可访问的ip 否则创建集群时无法访问对应的端口，无法创建集群      </span><br><span class="line">daemonize    yes                                //redis后台运行</span><br><span class="line">pidfile  /var/run/redis_7000.pid                //pidfile文件对应7000,7001,7002</span><br><span class="line">cluster-enabled  yes                            //开启集群  把注释#去掉</span><br><span class="line">cluster-config-file  nodes_7000.conf            //集群的配置  配置文件首次启动自动生成 7000,7001,7002</span><br><span class="line">cluster-node-timeout  15000                     //请求超时  默认15秒，可自行设置</span><br><span class="line">appendonly  yes                                 //aof日志开启  有需要就开启，它会每次写操作都记录一条日志</span><br></pre></td></tr></table></figure><p>接着在另外一台机器上（172.17.5.9），的操作重复以上三步，只是把目录改为7003、7004、7005，对应的配置文件也按照这个规则修改即可。</p><h2 id="启动各个节点"><a href="#启动各个节点" class="headerlink" title="启动各个节点"></a>启动各个节点</h2><p>第一台机器上执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server redis_cluster/7000/redis.conf</span><br><span class="line">redis-server redis_cluster/7001/redis.conf</span><br><span class="line">redis-server redis_cluster/7002/redis.conf</span><br></pre></td></tr></table></figure><p>另外一台机器上执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server redis_cluster/7003/redis.conf</span><br><span class="line">redis-server redis_cluster/7004/redis.conf</span><br><span class="line">redis-server redis_cluster/7005/redis.conf</span><br></pre></td></tr></table></figure><h2 id="检查-redis-启动情况"><a href="#检查-redis-启动情况" class="headerlink" title="检查 redis 启动情况"></a>检查 redis 启动情况</h2><p>一台机器  172.17.5.87</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep redis</span><br><span class="line">root      9694     1  0 Jul27 ?        00:14:57 redis-server 172.17.5.87:7000 [cluster]   </span><br><span class="line">root      9705     1  0 Jul27 ?        00:15:10 redis-server 172.17.5.87:7001 [cluster]</span><br><span class="line">root     24955     1  0 Aug03 ?        00:03:16 redis-server 172.17.5.87:7002 [cluster]</span><br><span class="line"></span><br><span class="line">netstat -tnlp | grep redis</span><br><span class="line">tcp        0      0 172.17.5.87:17000           0.0.0.0:*                   LISTEN      9694/redis-server 1 </span><br><span class="line">tcp        0      0 172.17.5.87:17001           0.0.0.0:*                   LISTEN      9705/redis-server 1 </span><br><span class="line">tcp        0      0 172.17.5.87:17002           0.0.0.0:*                   LISTEN      24955/redis-server  </span><br><span class="line">tcp        0      0 0.0.0.0:6379                0.0.0.0:*                   LISTEN      762/./src/redis-ser </span><br><span class="line">tcp        0      0 172.17.5.87:7000            0.0.0.0:*                   LISTEN      9694/redis-server 1 </span><br><span class="line">tcp        0      0 172.17.5.87:7001            0.0.0.0:*                   LISTEN      9705/redis-server 1 </span><br><span class="line">tcp        0      0 172.17.5.87:7002            0.0.0.0:*                   LISTEN      24955/redis-server  </span><br></pre></td></tr></table></figure><p>另一台机器  172.17.5.9</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep redis</span><br><span class="line">root      9048     1  0 Jul27 ?        00:11:16 redis-server 172.17.5.9:7003 [cluster]    </span><br><span class="line">root      9053     1  0 Jul27 ?        00:11:05 redis-server 172.17.5.9:7004 [cluster]    </span><br><span class="line">root      9058     1  0 Jul27 ?        00:11:09 redis-server 172.17.5.9:7005 [cluster]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">netstat -tnlp | grep redis</span><br><span class="line">tcp        0      0 172.17.5.9:17003            0.0.0.0:*                   LISTEN      9048/redis-server 1 </span><br><span class="line">tcp        0      0 172.17.5.9:17004            0.0.0.0:*                   LISTEN      9053/redis-server 1 </span><br><span class="line">tcp        0      0 172.17.5.9:17005            0.0.0.0:*                   LISTEN      9058/redis-server 1 </span><br><span class="line">tcp        0      0 172.17.5.9:7003             0.0.0.0:*                   LISTEN      9048/redis-server 1 </span><br><span class="line">tcp        0      0 172.17.5.9:7004             0.0.0.0:*                   LISTEN      9053/redis-server 1 </span><br><span class="line">tcp        0      0 172.17.5.9:7005             0.0.0.0:*                   LISTEN      9058/redis-server 1</span><br></pre></td></tr></table></figure><h2 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h2><p>Redis 官方提供了 redis-trib.rb 这个工具，就在解压目录的 src 目录中，第三步中已将它复制到 &#x2F;usr&#x2F;local&#x2F;bin 目录中，可以直接在命令行中使用了。使用下面这个命令即可完成安装。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-trib.rb  create  --replicas  1  172.17.5.87:7000  172.17.5.87:7001  172.17.5.87:7002 172.17.5.9:7003  172.17.5.9:7004  172.17.5.9:7005</span><br></pre></td></tr></table></figure><p>其中，前三个 ip:port 为第一台机器的节点，剩下三个为第二台机器。</p><p>在创建集群时会出现错误，是因为这个工具是用 ruby 实现的，所以需要安装 ruby。安装命令如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install ruby ruby-devel rubygems rpm-build </span><br><span class="line"></span><br><span class="line">gem install redis</span><br></pre></td></tr></table></figure><p>安装工具之后再运行 redis-trib.rb 命令，会出现如下提示：</p><p>・・・・・・・・・・・</p><p>Can I Set the above configuration？（type ‘yes’ to accept）：<br>输入 yes 即可，然后出现如下内容，说明安装成功。</p><h2 id="集群验证"><a href="#集群验证" class="headerlink" title="集群验证"></a>集群验证</h2><p>在第一台机器上连接集群的7002端口的节点，在另外一台连接7005节点，连接方式为</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli -h 172.17.5.87 -c -p 7002     加参数 -C 可连接到集群，因为上面 redis.conf 将 <span class="built_in">bind</span> 改为了ip地址，所以 -h 参数不可以省略。</span><br></pre></td></tr></table></figure><p>在7002节点执行命令 set hello world ，执行结果如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">172.17.5.87:7002&gt; <span class="built_in">set</span> hello world</span><br><span class="line">-&gt; Redirected to slot [866] located at 172.17.5.87:7000</span><br><span class="line">OK</span><br><span class="line">172.17.5.87:7000&gt; keys * </span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">172.17.5.87:7000&gt; get hello</span><br><span class="line"><span class="string">&quot;world&quot;</span></span><br><span class="line">172.17.5.87:7000&gt;</span><br></pre></td></tr></table></figure><p>然后在另外一台7004端口，查看 key 为 hello 的内容， get hello ，执行结果如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># redis-cli -h 172.17.5.9 -c -p 7004</span></span><br><span class="line">172.17.5.9:7004&gt; keys *</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">172.17.5.9:7004&gt; get hello</span><br><span class="line">-&gt; Redirected to slot [866] located at 172.17.5.87:7000</span><br><span class="line"><span class="string">&quot;world&quot;</span></span><br><span class="line">172.17.5.87:7000&gt;</span><br></pre></td></tr></table></figure><p>说明集群运作正常。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote><p>redis cluster在设计的时候，就考虑到了去中心化，去中间件，也就是说，集群中的每个节点都是平等的关系，都是对等的，每个节点都保存各自的数据和整个集群的状态。每个节点都和其他所有节点连接，而且这些连接保持活跃，这样就保证了我们只需要连接集群中的任意一个节点，就可以获取到其他节点的数据。</p></blockquote><blockquote><p>Redis 集群没有并使用传统的一致性哈希来分配数据，而是采用另外一种叫做哈希槽 (hash slot)的方式来分配的。redis cluster 默认分配了 16384 个slot，当我们set一个key 时，会用CRC16算法来取模得到所属的slot，然后将这个key 分到哈希槽区间的节点上，具体算法就是：CRC16(key) % 16384。所以我们在测试的时候看到set 和 get 的时候，直接跳转到了7000端口的节点。</p></blockquote><blockquote><p>Redis 集群会把数据存在一个 master 节点，然后在这个 master 和其对应的salve 之间进行数据同步。当读取数据时，也根据一致性哈希算法到对应的 master 节点获取数据。只有当一个master 挂掉之后，才会启动一个对应的 salve 节点，充当 master 。</p></blockquote><blockquote><p>需要注意的是：必须要3个或以上的主节点，否则在创建集群时会失败，并且当存活的主节点数小于总节点数的一半时，整个集群就无法提供服务了。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis,集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue常用工具类-全局过滤器filter</title>
      <link href="/2021/07/16/vue-utils-filter/"/>
      <url>/2021/07/16/vue-utils-filter/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><blockquote><p>在项目中经常使用过滤器对数据进行格式化后显示在页面上，比如日期格式转化，数值转换成状态文字等过滤器，如果在每个.vue页面都复制同一个过滤器进行使用，虽然是没问题，但是如果过滤器方法中，需要追加新的情况判断或出现Bug时就要将每个.vue内的过滤器进行修改，既费时又费力，所以为了项目维护，可以优先考虑定义全局过滤器。</p></blockquote><h1 id="vue实现代码（日期格式转化、保留小数位）"><a href="#vue实现代码（日期格式转化、保留小数位）" class="headerlink" title="vue实现代码（日期格式转化、保留小数位）"></a>vue实现代码（日期格式转化、保留小数位）</h1><h2 id="创建filter-js"><a href="#创建filter-js" class="headerlink" title="创建filter.js"></a>创建filter.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间戳转日期格式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data &#123;number&#125; 时间戳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> format &#123;string&#125; 时间格式[完整格式：yyyy-MM-dd HH:mm:ss，默认yyyy-MM-dd]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> implementText &#123;string&#125; 缺省文字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">timeFormat</span> = <span class="function">(<span class="params">data, format, implementText</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (data === <span class="literal">null</span> || data === <span class="string">&#x27;&#x27;</span> || data === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> implementText || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  format = format || <span class="string">&#x27;yyyy-MM-dd&#x27;</span>;</span><br><span class="line">  <span class="keyword">let</span> week = [</span><br><span class="line">    <span class="string">&#x27;星期日&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;星期一&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;星期二&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;星期三&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;星期四&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;星期五&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;星期六&#x27;</span></span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(data);</span><br><span class="line">  <span class="keyword">let</span> o = &#123;</span><br><span class="line">    <span class="string">&#x27;M+&#x27;</span>: date.<span class="title function_">getMonth</span>() + <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;d+&#x27;</span>: date.<span class="title function_">getDate</span>(),</span><br><span class="line">    <span class="string">&#x27;h+&#x27;</span>: date.<span class="title function_">getHours</span>() % <span class="number">12</span>,</span><br><span class="line">    <span class="string">&#x27;H+&#x27;</span>: date.<span class="title function_">getHours</span>(),</span><br><span class="line">    <span class="string">&#x27;m+&#x27;</span>: date.<span class="title function_">getMinutes</span>(),</span><br><span class="line">    <span class="string">&#x27;s+&#x27;</span>: date.<span class="title function_">getSeconds</span>(),</span><br><span class="line">    <span class="string">&#x27;q+&#x27;</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>((date.<span class="title function_">getMonth</span>() + <span class="number">3</span>) / <span class="number">3</span>),</span><br><span class="line">    <span class="string">&#x27;S+&#x27;</span>: date.<span class="title function_">getMilliseconds</span>(),</span><br><span class="line">    <span class="string">&#x27;W+&#x27;</span>: week[date.<span class="title function_">getDay</span>()]</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/(y+)/</span>.<span class="title function_">test</span>(format))</span><br><span class="line">    format = format.<span class="title function_">replace</span>(</span><br><span class="line">      <span class="title class_">RegExp</span>.<span class="property">$1</span>,</span><br><span class="line">      (date.<span class="title function_">getFullYear</span>() + <span class="string">&#x27;&#x27;</span>).<span class="title function_">substr</span>(<span class="number">4</span> - <span class="title class_">RegExp</span>.<span class="property">$1</span>.<span class="property">length</span>)</span><br><span class="line">    );</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> o)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;(&#x27;</span> + k + <span class="string">&#x27;)&#x27;</span>).<span class="title function_">test</span>(format))</span><br><span class="line">      format = format.<span class="title function_">replace</span>(</span><br><span class="line">        <span class="title class_">RegExp</span>.<span class="property">$1</span>,</span><br><span class="line">        <span class="title class_">RegExp</span>.<span class="property">$1</span>.<span class="property">length</span> === <span class="number">1</span> ? o[k] : (<span class="string">&#x27;00&#x27;</span> + o[k]).<span class="title function_">substr</span>((<span class="string">&#x27;&#x27;</span> + o[k]).<span class="property">length</span>)</span><br><span class="line">      );</span><br><span class="line">  <span class="keyword">return</span> format;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保留小数位</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data 数值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> len 保留的位数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">toFixed</span> = <span class="function">(<span class="params">data, len</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (data) &#123;</span><br><span class="line">    <span class="keyword">typeof</span> data === <span class="string">&#x27;string&#x27;</span> ? (data = <span class="title class_">Number</span>(data)) : <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> data ? data.<span class="title function_">toFixed</span>(len || <span class="number">2</span>) : data;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局过滤器</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> filters <span class="keyword">from</span> <span class="string">&#x27;...../filter.js&#x27;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(filters).<span class="title function_">forEach</span>(<span class="function"><span class="params">k</span> =&gt;</span> <span class="title class_">Vue</span>.<span class="title function_">filter</span>(k, filters[k]));</span><br></pre></td></tr></table></figure><h2 id="全局使用"><a href="#全局使用" class="headerlink" title="全局使用"></a>全局使用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123; item.<span class="property">startTime</span> | <span class="title function_">timeFormat</span>(<span class="string">&#x27;yyyy-MM-dd HH:mm&#x27;</span>) &#125;&#125;</span><br><span class="line">&#123;&#123; item.<span class="property">endTime</span> | <span class="title function_">timeFormat</span>(<span class="string">&#x27;HH:mm&#x27;</span>) &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; item.<span class="property">one</span> | <span class="title function_">toFixed</span>(<span class="number">1</span>) &#125;&#125;</span><br><span class="line">&#123;&#123; item.<span class="property">two</span> | <span class="title function_">toFixed</span>(<span class="number">2</span>) &#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> filter,过滤 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue常用工具类-Cookie</title>
      <link href="/2021/07/15/vue-utils-cookie/"/>
      <url>/2021/07/15/vue-utils-cookie/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><blockquote><p>一个保存在客户机中的简单的文本文件, 这个文件与特定的 Web 文档关联在一起, 保存了该客户机访问这个Web 文档时的信息, 当客户机再次访问这个 Web 文档时这些信息可供该文档使用。</p></blockquote><h1 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h1><blockquote><p>Cookie是一段不超过4KB的小型文本数据，由一个名称（Name）、一个值（Value）和其它几个用于控制Cookie有效期、安全性、使用范围的可选属性组成。</p></blockquote><h1 id="vue实现token验证"><a href="#vue实现token验证" class="headerlink" title="vue实现token验证"></a>vue实现token验证</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save js-cookie</span><br></pre></td></tr></table></figure><h2 id="创建cookie-js"><a href="#创建cookie-js" class="headerlink" title="创建cookie.js"></a>创建cookie.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Cookie</span> <span class="keyword">from</span> <span class="string">&#x27;js-cookie&#x27;</span>;</span><br><span class="line"><span class="comment">// name: cookie存储的名字</span></span><br><span class="line"><span class="comment">// val: 需要存储的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCookie</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Cookie</span>.<span class="title function_">get</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setCookie</span>(<span class="params">name, val</span>) &#123;</span><br><span class="line">  <span class="title class_">Cookie</span>.<span class="title function_">set</span>(name, val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeCookie</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="title class_">Cookie</span>.<span class="title function_">remove</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  getCookie,</span><br><span class="line">  setCookie,</span><br><span class="line">  removeCookie</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cookie,存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue常用工具类-全局公共函数function</title>
      <link href="/2021/07/07/vue-utils-function/"/>
      <url>/2021/07/07/vue-utils-function/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><blockquote><p>如果你需要让一个工具函数在每个组件可用，可以把方法挂载到 Vue.prototype上。</p></blockquote><h1 id="vue实现代码（获取URL参数-防抖函数）"><a href="#vue实现代码（获取URL参数-防抖函数）" class="headerlink" title="vue实现代码（获取URL参数, 防抖函数）"></a>vue实现代码（获取URL参数, 防抖函数）</h1><h2 id="创建util-js"><a href="#创建util-js" class="headerlink" title="创建util.js"></a>创建util.js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * URL编码;</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">参数</span>&#125; <span class="variable">param</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">toParams</span>: <span class="keyword">function</span>(<span class="params">param</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> name <span class="keyword">in</span> param) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> param[name] != <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (param[name] === <span class="literal">null</span>) &#123;</span><br><span class="line">          result += <span class="string">&#x27;&amp;&#x27;</span> + name + <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          result += <span class="string">&#x27;&amp;&#x27;</span> + name + <span class="string">&#x27;=&#x27;</span> + <span class="built_in">encodeURI</span>(param[name]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.<span class="title function_">substring</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 防抖函数</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> fn 高频函数</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> wait 等待时间</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> &#123;<span class="type">Function</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">debounce</span>: <span class="keyword">function</span>(<span class="params">fn, wait</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="variable language_">this</span>,</span><br><span class="line">      args = <span class="variable language_">arguments</span>,</span><br><span class="line">      timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      context = <span class="variable language_">this</span>;</span><br><span class="line">      args = <span class="variable language_">arguments</span>;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        fn.<span class="title function_">apply</span>(context, args);</span><br><span class="line">      &#125;, wait || <span class="number">250</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局方法</span></span><br><span class="line"><span class="keyword">import</span> util <span class="keyword">from</span> <span class="string">&#x27;..../util.js&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">util</span> = util;</span><br></pre></td></tr></table></figure><h2 id="全局使用"><a href="#全局使用" class="headerlink" title="全局使用"></a>全局使用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">util</span>.<span class="title function_">toParams</span>(name);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">util</span>.<span class="title function_">debounce</span>(<span class="keyword">function</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> function,函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中数组处理常用方法</title>
      <link href="/2021/06/06/js-commonly-use/"/>
      <url>/2021/06/06/js-commonly-use/</url>
      
        <content type="html"><![CDATA[<h1 id="filter-不会改变原始数组"><a href="#filter-不会改变原始数组" class="headerlink" title="filter(不会改变原始数组)"></a>filter(不会改变原始数组)</h1><blockquote><p>通过 callback 测试的元素会被跳过，不会被包含在新数组中。筛选出过滤出数组中符合条件的项，组成新数组。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">var</span> morearr = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">number</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> number &gt; <span class="number">3</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="every"><a href="#every" class="headerlink" title="every"></a>every</h1><blockquote><p>用于检测数组中的所有元素是否都满足指定条件（该条件为一个函数）。如果有一项不满足条件，则表达式返回false,剩余的项将不会再执行检测；如果遍历完数组后，每一项都符合条件，则返回true。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">array.<span class="title function_">every</span>(<span class="keyword">function</span>(<span class="params">currentValue,index,arr</span>), thisValue)</span><br></pre></td></tr></table></figure><p>参数说明：</p><p>第一个参数为一个回调函数，必传，数组中的每一项都会遍历执行该函数。<br>currentValue：必传，当前项的值<br>index：选传，当前项的索引值<br>arr：选传，当前项所属的数组对象<br>第二个参数thisValue为可选参数，回调函数中的this会指向该参数对象。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1000</span>, <span class="number">2000</span>, <span class="number">3000</span>]</span><br><span class="line"><span class="keyword">var</span> flag = arr.<span class="title function_">every</span>(<span class="keyword">function</span> (<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + <span class="string">&quot;===&quot;</span> + b + <span class="string">&quot;====&quot;</span> + c) <span class="comment">//1000===0====1000,2000,3000</span></span><br><span class="line">    <span class="keyword">return</span> a &gt; <span class="number">2000</span>;<span class="comment">//数组中的每个元素的值都要大于2000的情况,最后才返回true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flag)   <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h1 id="some"><a href="#some" class="headerlink" title="some"></a>some</h1><blockquote><p>用于检测数组中的元素是否满足指定条件（函数提供）。如果有一个元素满足条件，则表达式返回true, 剩余的元素不会再执行检测。如果没有满足条件的元素，则返回false。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1000</span>, <span class="number">2000</span>, <span class="number">3000</span>]</span><br><span class="line"><span class="keyword">var</span> flag = arr.<span class="title function_">some</span>(<span class="keyword">function</span> (<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + <span class="string">&quot;===&quot;</span> + b + <span class="string">&quot;====&quot;</span> + c) <span class="comment">//1000===0====1000,2000,3000</span></span><br><span class="line">    <span class="keyword">return</span> a &gt; <span class="number">2000</span>;<span class="comment">//如果有一个元素满足条件，则表达式返回true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flag)   <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h1 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h1><blockquote><p>返回一个索引【下标】</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr7 = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;lining&#x27;</span>, <span class="attr">price</span>: <span class="number">100</span>, <span class="attr">num</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;anta&#x27;</span>, <span class="attr">price</span>: <span class="number">200</span>, <span class="attr">num</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;nike&#x27;</span>, <span class="attr">price</span>: <span class="number">300</span>, <span class="attr">num</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;tebu&#x27;</span>, <span class="attr">price</span>: <span class="number">400</span>, <span class="attr">num</span>: <span class="number">1</span> &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> index = arr7.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item.<span class="property">id</span> === <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index) <span class="comment">//0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="find"><a href="#find" class="headerlink" title="find"></a>find</h1><blockquote><p>返回一个对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr8 = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;lining&#x27;</span>, <span class="attr">price</span>: <span class="number">100</span>, <span class="attr">num</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;anta&#x27;</span>, <span class="attr">price</span>: <span class="number">200</span>, <span class="attr">num</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;nike&#x27;</span>, <span class="attr">price</span>: <span class="number">300</span>, <span class="attr">num</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&#x27;tebu&#x27;</span>, <span class="attr">price</span>: <span class="number">400</span>, <span class="attr">num</span>: <span class="number">1</span> &#125;,</span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> obj = arr8.<span class="title function_">find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item.<span class="property">id</span> === <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">//&#123; id: 2, name: &#x27;anta&#x27;, price: 200, num: 2 &#125;</span></span><br></pre></td></tr></table></figure><h1 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h1><blockquote><p>1个参数：截取数组中的数据返回一个新的数组，会影响原数组;从当前参数的索引开始往后截取;打印原数组返回的是没有被截取的部分数组<br>2个参数：从参数1开始，到参数2的前一位结束 ，包头不包尾</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr9 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr9.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">3</span>)) <span class="comment">//[ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr9) <span class="comment">//[ &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27; ]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端,JS,工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js几种循环方式</title>
      <link href="/2021/06/05/js-for/"/>
      <url>/2021/06/05/js-for/</url>
      
        <content type="html"><![CDATA[<h1 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h1><blockquote><p>最基本的循环方式，不多说。这种最基本的循环才是速度最快的，效率最高的。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for in循环"></a>for in循环</h1><blockquote><p>用来遍历对象的。要知道JavaScript对象的所有属性都是字符串，不过属性对应的值可以是任意数据类型。（注意：遍历时不仅能读取对象自身上面的成员属性，也能遍历出对象的原型属性）</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> obj) &#123;  <span class="comment">//prop指对象的属性名</span></span><br><span class="line">  <span class="comment">//输出: a,1 b,2 c,3</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(prop, obj[prop]);</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><h1 id="for-of循环"><a href="#for-of循环" class="headerlink" title="for of循环"></a>for of循环</h1><blockquote><p>作为ES6新增的循环方法，这个方法避开了for-in循环的所有缺陷。而且，它可以正确响应break、continue和return语句。for-of循环不仅支持数组，还支持大多数类数组对象，例如DOM NodeList对象。但是for of也有一个致命伤，就像例子看到的，没有索引。对，这是优点也是缺点。遍历数组对象，直接就是item.属性(或者item[属性]),而不用像for循环那样arr[index].属性(arrindex)。但是你有的时候真的就得用到index。不好意思，只能把数组转成Map()。但我觉得真的需要用到index，还是换成forEach吧。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;qwewq&#x27;</span>,<span class="string">&#x27;sfds&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> arr)&#123;</span><br><span class="line">  <span class="comment">//输出 &#x27;123&#x27; &#x27;qwewq&#x27; &#x27;sfds&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item); <span class="comment">//item指的的就是数组每一项的值。不是索引。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="forEach循环"><a href="#forEach循环" class="headerlink" title="forEach循环"></a>forEach循环</h1><blockquote><p>里面没办法用break跳出循环。而且在IE中无法实现，需要做兼容处理。没有 return 返回值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;qwewq&#x27;</span>,<span class="string">&#x27;sfds&#x27;</span>];</span><br><span class="line">myArray.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">value, index</span>) &#123;</span><br><span class="line">  <span class="comment">// 输出结果 &#x27;123&#x27;,1  &#x27;qwewq&#x27;,2  &#x27;sfds&#x27;,3</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value,index);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="map循环"><a href="#map循环" class="headerlink" title="map循环"></a>map循环</h1><blockquote><p>将原有的数组映射成一个新数组，不操作原数组，返回新数组，回调函数中返回什么这一项就是什么。forEach、map都是ECMA5新增数组的方法。map支持return。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;qwewq&#x27;</span>,<span class="string">&#x27;sfds&#x27;</span>];</span><br><span class="line">arr.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">value,index</span>)&#123;</span><br><span class="line">  <span class="comment">// 输出结果 &#x27;123&#x27;,1  &#x27;qwewq&#x27;,2  &#x27;sfds&#x27;,3</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value,index);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="性能排序"><a href="#性能排序" class="headerlink" title="性能排序"></a>性能排序</h1><p>for &gt; for-of &gt; forEach &gt; filter &gt; map &gt; for-in</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端,JS,循环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js复制函数</title>
      <link href="/2021/06/04/js-copy/"/>
      <url>/2021/06/04/js-copy/</url>
      
        <content type="html"><![CDATA[<h1 id="一键复制函数"><a href="#一键复制函数" class="headerlink" title="一键复制函数"></a>一键复制函数</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">copy</span>=(<span class="params">e:any</span>)=&gt;&#123;</span><br><span class="line">  <span class="keyword">const</span> copyDOM =e.<span class="property">currentTarget</span>;  <span class="comment">// 需要复制文字的节点</span></span><br><span class="line">  <span class="keyword">const</span> range = <span class="variable language_">document</span>.<span class="title function_">createRange</span>(); <span class="comment">// 创建一个range</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">getSelection</span>()?.<span class="title function_">removeAllRanges</span>();   <span class="comment">// 清楚页面中已有的selection</span></span><br><span class="line">  range.<span class="title function_">selectNode</span>(copyDOM);    <span class="comment">// 选中需要复制的节点</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">getSelection</span>()?.<span class="title function_">addRange</span>(range);   <span class="comment">// 执行选中元素</span></span><br><span class="line">  <span class="keyword">const</span> successful = <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&#x27;copy&#x27;</span>);    <span class="comment">// 执行 copy 操作</span></span><br><span class="line">  <span class="keyword">if</span>(successful)&#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;复制成功！&#x27;</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;复制失败，请手动复制！&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 移除选中的元素 </span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">getSelection</span>()?.<span class="title function_">removeAllRanges</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端,JS,复制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 布局</title>
      <link href="/2021/05/24/css-layout/"/>
      <url>/2021/05/24/css-layout/</url>
      
        <content type="html"><![CDATA[<h1 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h1><ul><li>左右两栏 上下高度自适应</li><li>中间一栏 宽度自适应</li></ul><p><img src="/img/md/pictures/css-layout1.png" alt="圣杯布局"></p><h2 id="float版本"><a href="#float版本" class="headerlink" title="float版本"></a>float版本</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* reset */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">max-height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">min-width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">min-height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 修饰代码 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#left</span> <span class="selector-tag">ul</span>, <span class="selector-id">#right</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">list-style</span>: decimal;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding-inline-start</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#left</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>, <span class="selector-id">#right</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>: <span class="number">2</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#center</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>: <span class="number">3</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: <span class="number">#555555</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 圣杯布局核心 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#header</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">0</span> <span class="number">150px</span> <span class="number">0</span> <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#container</span> <span class="selector-class">.column</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#center</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#right</span>, <span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#ffff66</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">right</span>: <span class="number">200px</span></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#ff7777</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-right</span>: -<span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#footer</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span>header<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;center&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>center<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容</span><br><span class="line">这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容</span><br><span class="line">这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容</span><br><span class="line">这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容</span><br><span class="line">这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="float版本-1"><a href="#float版本-1" class="headerlink" title="float版本"></a>float版本</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* reset */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">min-width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">min-height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 修饰代码 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#left</span> <span class="selector-tag">ul</span>, <span class="selector-id">#right</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">list-style</span>: decimal;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding-inline-start</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#left</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>, <span class="selector-id">#right</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>: <span class="number">2</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#center</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>: <span class="number">3</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: <span class="number">#555555</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 圣杯布局核心 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css"><span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#header</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">flex</span>: none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">flex</span>: auto;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow-y</span>: auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#center</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow-y</span>: auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#right</span>, <span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">flex</span>: none;</span></span><br><span class="line"><span class="language-css"><span class="attribute">align-items</span>: stretch;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow-y</span>: auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#ffff66</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#ff7777</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#footer</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">flex</span>: none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span>header<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;center&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>center<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容</span><br><span class="line">这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容</span><br><span class="line">这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容</span><br><span class="line">这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容</span><br><span class="line">这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="grid版本"><a href="#grid版本" class="headerlink" title="grid版本"></a>grid版本</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>圣杯布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* reset */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">min-width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">min-height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 修饰代码 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#left</span> <span class="selector-tag">ul</span>, <span class="selector-id">#right</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">list-style</span>: decimal;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding-inline-start</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#left</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>, <span class="selector-id">#right</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>: <span class="number">2</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#center</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">line-height</span>: <span class="number">3</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: <span class="number">#555555</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#header</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#center</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#ffff66</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#ff7777</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 圣杯布局核心 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css"><span class="attribute">grid-column</span>: <span class="number">3</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css"><span class="attribute">grid-template-columns</span>: <span class="number">200px</span> auto <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">grid-template-rows</span>: <span class="number">100px</span> auto <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">place-items: stretch stretch; <span class="comment">/* align-items: stretch; justify-items: stretch; */</span></span></span><br><span class="line"><span class="language-css"><span class="attribute">max-height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#header</span>, <span class="selector-id">#footer</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">grid-column-end</span>: <span class="number">4</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#left</span>, <span class="selector-id">#center</span>, <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow-y</span>: auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span>header<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>center<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容</span><br><span class="line">这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容</span><br><span class="line">这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容</span><br><span class="line">这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容</span><br><span class="line">这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容这是内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h1><ul><li>容器高度自适应</li><li>左右两栏上下自适应</li><li>中间宽度和高度自适应</li></ul><p><img src="/img/md/pictures/css-layout2.png" alt="双飞翼布局"></p><h2 id="float版本-2"><a href="#float版本-2" class="headerlink" title="float版本"></a>float版本</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* reset */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">min-width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">min-height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 双飞布局核心代码 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.col</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#main</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#main-wrap</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>: <span class="number">0</span> <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#33f</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#f33</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-left</span>: -<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main-wrap&quot;</span>&gt;</span></span><br><span class="line">main</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span> <span class="attr">class</span>=<span class="string">&quot;col&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="flex版本"><a href="#flex版本" class="headerlink" title="flex版本"></a>flex版本</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* reset */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">max-height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">min-width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">min-height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 样式修饰 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#left</span> <span class="selector-tag">ul</span>, <span class="selector-id">#right</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">list-style</span>: decimal;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding-left</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#main</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: <span class="number">#888888</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 双飞翼布局核心 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow-y</span>: auto;</span></span><br><span class="line"><span class="language-css"><span class="attribute">align-items</span>: stretch;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#main</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">flex</span>: auto;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#cccccc</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow-y</span>: auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#left</span>, <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">flex</span>: none;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow-y</span>: auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: antiquewhite;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: cornflowerblue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>main<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一段文字内容这是一段文字内容这是一段文字内容这是一段文字内容这是一段文字内容这是一段文字内容</span><br><span class="line">这是一段文字内容这是一段文字内容这是一段文字内容这是一段文字内容这是一段文字内容这是一段文字内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="grid版本-1"><a href="#grid版本-1" class="headerlink" title="grid版本"></a>grid版本</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* reset */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">min-width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">min-height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#main</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#33f</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#f33</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 双飞布局核心代码 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css"><span class="attribute">grid-template-columns</span>: <span class="number">200px</span> auto <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;center&quot;</span>&gt;</span>center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="居中布局"><a href="#居中布局" class="headerlink" title="居中布局"></a>居中布局</h1><h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><ul><li>子容器高度宽度自适应</li></ul><p><img src="/img/md/pictures/css-layout3.png" alt="水平居中"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>水平居中<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 修饰代码 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">240px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#eeeeee</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#3333ff</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 水平居中核心代码（容器宽度不确定）*/</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 方案1 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 方案2 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>: <span class="number">0</span> auto</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/*方案三*/</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.container3</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/*方案四*/</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.container4</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box4</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-left</span>:  <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/*方案五*/</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.container5</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css"><span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box5</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">flex</span>: none;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css"><span class="attribute">align-self</span>: flex-start;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/*方案六*/</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.container6</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css"><span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box6</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">align-self</span>: flex-start;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>水平居中（容器）的实现方式<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box1&quot;</span>&gt;</span></span><br><span class="line">方式一 <span class="tag">&lt;<span class="name">br</span>&gt;</span>&#123;margin: 0 auto;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">缺点是需要手动指定自容器宽度和高度</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container container2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box2&quot;</span>&gt;</span></span><br><span class="line">方式二： <span class="tag">&lt;<span class="name">br</span>&gt;</span>&#123;margin:0 auto;&#125;改进</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">子容器设置display: table，子容器会自适应</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">该方案兼容性好，改成table标签即可兼容IE</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container container3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box3&quot;</span>&gt;</span></span><br><span class="line">方式三： 绝对定位</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container container4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box4&quot;</span>&gt;</span></span><br><span class="line">方式四： 浮动和margin</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container container5&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box5&quot;</span>&gt;</span></span><br><span class="line">方式五： flex</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container container6&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box6&quot;</span>&gt;</span></span><br><span class="line">方式6：grid</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><ul><li>子容器高度、宽度自适应</li></ul><p><img src="/img/md/pictures/css-layout4.png" alt="垂直居中"></p><p>方案三算一种方式是因为，方式二中transform 是 css3样式在古老的浏览器上存在兼容问题，后面就不再提这种方式</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span> 垂直居中 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 修饰代码 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">240px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#eeeeee</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#3333ff</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 垂直居中核心代码（容器高度不确定）*/</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 方案1 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.container1</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box-wrapper1</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="language-css"><span class="attribute">vertical-align</span>: middle;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 方案2 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.container2</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 方案3 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.container3</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box3</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>: auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 方案4 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.container4</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css"><span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 方案5 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.container5</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css"><span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box5</span> &#123;</span></span><br><span class="line"><span class="language-css">justify-self: flex-start;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>垂直居中（容器）的实现方式<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container container1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-wrapper1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box1&quot;</span>&gt;</span></span><br><span class="line">方式一 display: table<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">该方案兼容性最好，<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">换成table标签即可支持IE</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container container2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box2&quot;</span>&gt;</span></span><br><span class="line">方式二 绝对定位</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container container3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box3&quot;</span>&gt;</span></span><br><span class="line">方式三 绝对定位 + margin</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">缺点：要给容器设置高度</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container container4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box4&quot;</span>&gt;</span></span><br><span class="line">方案四 flex</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container container5&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box5&quot;</span>&gt;</span></span><br><span class="line">方案五 grid</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h2><ul><li>子容器的高度自适应</li></ul><p><img src="/img/md/pictures/css-layout5.png" alt="水平垂直居中"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>水平居中<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 修饰代码 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">240px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#eeeeee</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#3333ff</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 水平垂直居中核心代码（容器宽度宽度都不确定）*/</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 方案1 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.container1</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box-wrapper1</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="language-css"><span class="attribute">vertical-align</span>: middle;</span></span><br><span class="line"><span class="language-css"><span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 方案2 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.container2</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css"><span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 方案3 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.container3</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css"><span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="comment">/* 方案4 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.container4</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css"><span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>水平居中（容器）的实现方式<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container container1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-wrapper1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box1&quot;</span>&gt;</span></span><br><span class="line">方式一 display: table;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container container2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box2&quot;</span>&gt;</span></span><br><span class="line">方式二 绝对定位</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container container3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">方式三 flex</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container container4&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">方式四 grid</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS,布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web性能优化</title>
      <link href="/2021/04/04/web-performance-optimization/"/>
      <url>/2021/04/04/web-performance-optimization/</url>
      
        <content type="html"><![CDATA[<h1 id="web性能优化"><a href="#web性能优化" class="headerlink" title="web性能优化"></a>web性能优化</h1><blockquote><p>基于现代Web前端框架的应用，其原理是通过浏览器向服务器发送网络请求，获取必要的index.html和打包好的JS、CSS等资源，在浏览器内执行JS，动态获取数据并渲染页面，从而将结果呈现给用户。</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><img src="/img/md/pictures/ea84ee35fdc2b00983fd4a02231421a1.png" alt="网页渲染过程"></p><p>在这个过程中，有两个步骤可能较为耗时：一个是<code>网络资源的加载</code>，另一个是<code>浏览器内代码执行</code>和<code>DOM渲染</code>。</p><p>针对上述两种耗时的情况，常见的优化方向有：</p><ul><li>缩短请求耗时</li><li>减少重排重绘</li><li>改善JS性能</li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="缩短请求耗时"><a href="#缩短请求耗时" class="headerlink" title="缩短请求耗时"></a>缩短请求耗时</h3><h4 id="优化打包资源"><a href="#优化打包资源" class="headerlink" title="优化打包资源"></a>优化打包资源</h4><blockquote><p>减少或延迟模块引用，以减少网络负荷。</p></blockquote><p>常用工具：<br>webpack<br>webpack-bundle-analyzer可视化分析工具</p><p>常用方法：  </p><ul><li>减小体积：减少非必要的import；压缩JS代码；配置服务器gzip等；使用WebP图片；</li><li>按需加载：可根据“路由”、“是否可见”按需加载JS代码，减少初次加载JS体积。比如可以使用import()进行代码分割，按需加载；</li><li>分开打包：利用浏览器缓存机制，依据模块更新频率分层打包。</li></ul><p>其他方法：</p><ul><li>雪碧图：每个HTTP&#x2F;1.1请求都是独立的TCP连接，最大6个并发，所以合并图片资源可以优化加载速度。HTTP&#x2F;2已经不需要这么做了。</li></ul><h4 id="CDN加速"><a href="#CDN加速" class="headerlink" title="CDN加速"></a>CDN加速</h4><blockquote><p>通过分布式的边缘网络节点，缩短资源到终端用户的访问延迟。</p></blockquote><p>常用工具：</p><ul><li>Cloudflare</li><li>AWS CloudFront</li><li>Aliyun CDN</li></ul><p>常用方法：<br>加速图片、视频等大体积文件</p><h4 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h4><blockquote><p>避免重复传输相同的数据，节省网络带宽，加速资源获取。</p></blockquote><p>常用工具：</p><ul><li>Nginx</li></ul><p>常用方法：</p><p>可以通过设置HTTP Header来控制缓存策略，一般有如下几种。</p><ul><li>强缓存</li><li>Expires：HTTP&#x2F;1.0</li><li>Cache-Control：HTTP&#x2F;1.1</li><li>协商缓存</li><li>ETag + If-None-Match</li><li>Last-Modified + If-Modified-Since</li></ul><h4 id="更高版本的HTTP"><a href="#更高版本的HTTP" class="headerlink" title="更高版本的HTTP"></a>更高版本的HTTP</h4><blockquote><p>使用高版本HTTP提升性能。</p></blockquote><p>常用工具：</p><ul><li>HTTP&#x2F;2</li></ul><p>HTTP&#x2F;2较HTTP&#x2F;1.1最大的改进在于：</p><ul><li>多路复用：单一TCP连接，多HTTP请求，有Demo；</li><li>头部压缩：减少HTTP头体积；</li><li>请求优先级：优先获取重要的数据；</li><li>服务端推送：主动推送CSS等静态资源。</li></ul><p>其他方法：<br>HTTP&#x2F;3：基于UDP，有很多方面的性能改进，如多路复用无队头阻塞，响应更快。</p><h4 id="Web-Socket"><a href="#Web-Socket" class="headerlink" title="Web Socket"></a>Web Socket</h4><blockquote><p>解决HTTP协议无法实时通信的问题。</p></blockquote><p>Web Socket是一条有状态的TCP长连接，用于实现实时通信、实时响应。</p><h4 id="服务器端渲染（SSR）"><a href="#服务器端渲染（SSR）" class="headerlink" title="服务器端渲染（SSR）"></a>服务器端渲染（SSR）</h4><blockquote><p>第一次访问时，服务器端直接返回渲染好的页面。</p></blockquote><p>一般流程：</p><ul><li>浏览器向 URL 发送请求；</li><li>服务器端返回“空白”index.html；</li><li>浏览器不能呈现页面，需要继续下载依赖；</li><li>加载所有脚本后，组件才能被渲染。</li></ul><p>SSR流程：</p><ul><li>浏览器向 URL 发送请求；</li><li>服务器端执行JS完成首屏渲染并返回；</li><li>浏览器直接呈现页面，然后继续下载其他依赖；</li><li>加载所有脚本后，组件将再次在客户端呈现。它将对现有View进行合并。</li></ul><p>常用工具：</p><ul><li>Node.js，用于服务器端执行代码，输出HTML给浏览器，支持所有主流前端框架</li><li>Next.js，用于服务器端渲染React的框架</li><li>gatsby，用React生成静态网站的工具</li></ul><p>除了可以提升页面用户体验，还能应用于<code>SEO</code>。</p><h3 id="减少重排重绘"><a href="#减少重排重绘" class="headerlink" title="减少重排重绘"></a>减少重排重绘</h3><blockquote><p>除了网络资源以外，另一个影响前端性能的因素就是前端页面的渲染绘制效率。<br>虽然不同的前端框架有一些差异，但整体的优化思路是一致的，这里将以React举例。</p></blockquote><h4 id="减少渲染量"><a href="#减少渲染量" class="headerlink" title="减少渲染量"></a>减少渲染量</h4><blockquote><p>不渲染未展示的部分。</p></blockquote><p>常用工具：</p><ul><li>react-window</li><li>react-loadable</li><li>JS原生，如IntersectionObserver</li><li>框架提供，如React.lazy、react-intersection-observer</li></ul><p>常用方法：</p><ul><li>虚拟列表：只渲染可见区；</li><li>惰性加载：无限滚动；</li><li>按需加载：页面只在切换过去时才加载。</li></ul><h4 id="减少渲染次数"><a href="#减少渲染次数" class="headerlink" title="减少渲染次数"></a>减少渲染次数</h4><blockquote><p>避免重复的渲染。</p></blockquote><p>常用工具：</p><ul><li>lodash</li><li>JS或框架自带</li></ul><p>常用方法：</p><ul><li>防抖与节流；</li><li>对于React函数组件来说，合理使用副作用，拆分无关联的副作用；</li><li>对于React类组件来说，可以使用shouldComponentUpdate或使用PureComponent来优化渲染；</li><li>利用缓存，如React.memo；</li><li>使用requestAnimationFrame替代setInterval执行动画。</li></ul><h3 id="改善JS性能"><a href="#改善JS性能" class="headerlink" title="改善JS性能"></a>改善JS性能</h3><blockquote><p>因为浏览器是单线程异步模型，长时间的运算会阻塞渲染过程，所以改善复杂运算有助于改善前端的整体性能。</p></blockquote><h4 id="缓存复杂计算"><a href="#缓存复杂计算" class="headerlink" title="缓存复杂计算"></a>缓存复杂计算</h4><blockquote><p>避免重复计算。</p></blockquote><p>常用方法：</p><p>对于React函数组件来说，可以使用useMemo缓存复杂计算值。<br>举例如下，memoizedValue需要经过复杂计算才能得到，此时就可以使用useMemo缓存，仅仅在输入参数发生变化时才重新计算，避免计算阻塞页面渲染，从而避免页面卡顿。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">MyFunctionalComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> memoizedValue = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">computeExpensiveValue</span>(a, b);</span><br><span class="line">  &#125;, [a, b]);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">AComponent</span> <span class="attr">value</span>=<span class="string">&#123;memoizedValue&#125;/</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但useMemo自身也有性能消耗，需要视情况使用，某些场景可以利用React的渲染机制避免性能问题，可以参考<a href="https://overreacted.io/before-you-memo/">《Before You memo()》</a>。</p><h4 id="Web-Worker"><a href="#Web-Worker" class="headerlink" title="Web Worker"></a>Web Worker</h4><blockquote><p>多线程思想。</p></blockquote><p>常用方法：</p><ul><li>Dedicated Workers，处理与UI无关的密集型数学计算：大数据集合排序、数据压缩、音视频处理；</li><li>Service Worker，服务端推送，或者PWA中配合CacheStorage在前端控制缓存资源；</li><li>Shared Worker，Tab间通信。</li></ul><p>JS语言在设计之初就是单线程异步模型，好处是可以高效处理I&#x2F;O操作，但坏处是无法利用多核CPU。</p><p>Web Worker会启动系统级别的线程，可进行多线程编程，发挥多核的性能。</p><h4 id="Web-Assembly"><a href="#Web-Assembly" class="headerlink" title="Web Assembly"></a>Web Assembly</h4><blockquote><p>将复杂的计算逻辑编译为Web Assembly，避免JS类型推断过程中的性能开销，可用于性能的极限优化。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>\</p>]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端,优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 开头的全局标准代码</title>
      <link href="/2021/03/24/css-common/"/>
      <url>/2021/03/24/css-common/</url>
      
        <content type="html"><![CDATA[<h1 id="PC"><a href="#PC" class="headerlink" title="PC"></a>PC</h1><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;<span class="attribute">padding</span>:<span class="number">0</span>;<span class="attribute">margin</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">div</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">form</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">img</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">li</span>,<span class="selector-tag">table</span>,<span class="selector-tag">th</span>,<span class="selector-tag">td</span>,<span class="selector-tag">p</span>,<span class="selector-tag">span</span>,<span class="selector-tag">a</span>&#123;<span class="attribute">border</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">img</span>,<span class="selector-tag">input</span>&#123;<span class="attribute">border</span>:none;<span class="attribute">vertical-align</span>:middle;&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;<span class="attribute">font-family</span>:Tahoma,Arial,Helvetica,<span class="string">&quot;宋体&quot;</span>;<span class="attribute">font-size</span>:<span class="number">12px</span>;<span class="attribute">text-align</span>:center;<span class="attribute">background</span>:<span class="number">#FFF</span>;<span class="attribute">color</span>:<span class="number">#000</span>;&#125;</span><br><span class="line"><span class="selector-tag">html</span>&#123;<span class="attribute">overflow-y</span>:scroll;&#125;</span><br><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>&#123;<span class="attribute">list-style-type</span>:none;&#125;</span><br><span class="line"><span class="selector-tag">th</span>,<span class="selector-tag">td</span>,<span class="selector-tag">input</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>;&#125;</span><br><span class="line"><span class="selector-tag">h3</span>&#123;<span class="attribute">font-size</span>:<span class="number">14px</span>;&#125;</span><br><span class="line"><span class="selector-tag">button</span>&#123;<span class="attribute">border</span>:none;<span class="attribute">cursor</span>:pointer;<span class="attribute">font-size</span>:<span class="number">12px</span>;<span class="attribute">background-color</span>:transparent;&#125;</span><br><span class="line">select&#123;<span class="attribute">border-width</span>:<span class="number">1px</span>;_zoom:<span class="number">1</span>;<span class="attribute">border-style</span>:solid;<span class="attribute">padding-top</span>:<span class="number">2px</span>;<span class="attribute">font-size</span>:<span class="number">12px</span>;&#125;</span><br><span class="line"><span class="selector-class">.clear</span>&#123;<span class="attribute">clear</span>:both;<span class="attribute">font-size</span>:<span class="number">1px</span>;<span class="attribute">height</span>:<span class="number">0</span>;<span class="attribute">visibility</span>:hidden;<span class="attribute">line-height</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;<span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;<span class="attribute">display</span>:block;<span class="attribute">clear</span>:both;&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span>&#123;zoom:<span class="number">1</span>;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;<span class="attribute">text-decoration</span>:none;<span class="attribute">color</span>:<span class="number">#333</span>;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;<span class="attribute">text-decoration</span>:underline;<span class="attribute">color</span>:<span class="number">#f60</span>;&#125;</span><br></pre></td></tr></table></figure><h1 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h1><h2 id="CSS-1"><a href="#CSS-1" class="headerlink" title="CSS"></a>CSS</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>&#123;-ms-text-size-adjust:<span class="number">100%</span>;-webkit-text-size-adjust:<span class="number">100%</span>&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;<span class="attribute">line-height</span>:<span class="number">1.6</span>;<span class="attribute">font-family</span>:<span class="string">&quot;Helvetica Neue&quot;</span>,Helvetica,Arial,sans-serif&#125;</span><br><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">p</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">fieldset</span>,<span class="selector-tag">textarea</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>&#125;</span><br><span class="line"><span class="selector-tag">fieldset</span>,<span class="selector-tag">legend</span>,<span class="selector-tag">textarea</span>,<span class="selector-tag">input</span>,<span class="selector-tag">button</span>&#123;<span class="attribute">padding</span>:<span class="number">0</span>&#125;</span><br><span class="line"><span class="selector-tag">button</span>,<span class="selector-tag">input</span>,select,<span class="selector-tag">textarea</span>&#123;<span class="attribute">font-family</span>:inherit;<span class="attribute">font-size</span>:<span class="number">100%</span>;<span class="attribute">margin</span>:<span class="number">0</span>;*<span class="attribute">font-family</span>:<span class="string">&quot;Helvetica Neue&quot;</span>,Helvetica,Arial,sans-serif&#125;</span><br><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>&#123;<span class="attribute">padding-left</span>:<span class="number">0</span>;<span class="attribute">list-style-type</span>:none&#125;</span><br><span class="line"><span class="selector-tag">a</span> <span class="selector-tag">img</span>,<span class="selector-tag">fieldset</span>&#123;<span class="attribute">border</span>:<span class="number">0</span>&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123;<span class="attribute">text-decoration</span>:none&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS,基础,共通 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聚合支付H5</title>
      <link href="/2021/03/14/integration-payment/"/>
      <url>/2021/03/14/integration-payment/</url>
      
        <content type="html"><![CDATA[<h1 id="聚合支付-商家二维码"><a href="#聚合支付-商家二维码" class="headerlink" title="聚合支付-商家二维码"></a>聚合支付-商家二维码</h1><blockquote><p>聚合支付：也称“融合支付”，是指只从事“支付、结算、清算”服务之外的“支付服务”，依托银行、非银机构或清算组织，借助银行、非银机构或清算组织的支付通道与清结算能力，利用自身的技术与服务集成能力，将一个以上的银行、非银机构或清算组织的支付服务，整合到一起，为商户提供包括但不限于“支付通道服务”、“集合对账服务”、“技术对接服务”、“差错处理服务”、“金融服务引导”、“会员账户服务”、“作业流程软件服务”、“运行维护服务”、“终端提供与维护”等服务内容，以此减少商户接入、维护支付结算服务时面临的成本支出，提高商户支付结算系统运行效率的，并收取增值收益的支付服务。</p></blockquote><h2 id="实现目标"><a href="#实现目标" class="headerlink" title="实现目标"></a>实现目标</h2><p>扫描二维码–&gt;识别支付平台–&gt;展现支付画面–&gt;完成支付</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>1.JavaScript<br>2.java<br>3.<a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_1">微信</a><br>4.<a href="https://opendocs.alipay.com/open/203">支付宝</a><br>5.<a href="https://openhome.alipay.com/platform/appDaily.htm?tab=info">支付宝沙箱环境</a></p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="判断扫码平台展示不同页面"><a href="#判断扫码平台展示不同页面" class="headerlink" title="判断扫码平台展示不同页面"></a>判断扫码平台展示不同页面</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isAlipayOrWechat</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> userAgent = navigator.<span class="property">userAgent</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line"><span class="keyword">if</span> (userAgent.<span class="title function_">match</span>(<span class="regexp">/Alipay/i</span>) == <span class="string">&#x27;alipay&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;Alipay&#x27;</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (userAgent.<span class="title function_">match</span>(<span class="regexp">/MicroMessenger/i</span>) == <span class="string">&#x27;micromessenger&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;Weixin&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="微信JSAPI"><a href="#微信JSAPI" class="headerlink" title="微信JSAPI"></a>微信JSAPI</h3><h4 id="开发前准备"><a href="#开发前准备" class="headerlink" title="开发前准备"></a>开发前准备</h4><ul><li>获取微信支付所需要的参数（appid、appsecret、mch_id、paternerKey）</li><li>首先要想支持微信支付,必须拥有两个账号：①微信公众已认证的服务号；②微信商户平台账号。</li></ul><p>微信公众平台：<br>    公众APPID：wx15*****<strong><strong>a8<br>    APPSECEPT ：</strong></strong>  </p><p>微信商户平台：<br>    商户ID：14<strong><strong><strong>42<br>    API密钥：5d5</strong></strong></strong>******b35b </p><p>【注】</p><ul><li>商户的API密钥:在商户平台的账户中心下:需要用户自行下载证书及安装。</li><li>对于调取微信退款还需要微信的商户证书，获取步骤见文章“微信退款”小节部分。</li><li>微信只接受80端口</li></ul><p><a href="https://natapp.cn/">内网穿透工具</a><br><a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=20_1">支付接口签名校验工具</a></p><h4 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h4><p><img src="/img/md/pictures/1557069758593-575ee124-6e4d-4198-8601-1e61b095313b.jpeg" alt="开发图解"></p><blockquote><ol><li>设置支付目录</li></ol></blockquote><ol><li>设置授权域名</li><li>获取openId</li><li>统一下单</li><li>微信内H5调起支付</li></ol><h5 id="设置支付目录"><a href="#设置支付目录" class="headerlink" title="设置支付目录"></a>设置支付目录</h5><p>● 配置支付目录：微信商户平台-&gt;产品中心-&gt;开发配置-&gt;公众号支付授权目录<br>     配置此目录是项目代码中“微信支付”所在支付页面地址.目录必须以“&#x2F;”结尾，至少设置二级以上目录。<br>eg: 如发起支付页面为：<a href="http://baidu.com/wxpay/index.html,%E5%88%99%E7%9B%AE%E5%BD%95%E9%85%8D%E7%BD%AE%E4%B8%BA%EF%BC%9Ahttp://baidu.com/">http://baidu.com/wxpay/index.html,则目录配置为：http://baidu.com/</a>;<br>下面“代码实例”中的配置为：  <a href="http://dvnq2b.natappfree.cc/">http://dvnq2b.natappfree.cc/</a></p><h5 id="设置授权域名"><a href="#设置授权域名" class="headerlink" title="设置授权域名"></a>设置授权域名</h5><p>● 配置授权域名:微信公众平台-&gt;设置-&gt;公众号设置<br>1、支付过程需要获取用户openid,必须经过网页授权配置才可以,要不然获取不到openid。<br>2、查看网页回调地址是否已经配置好，在这里我将所有的域名配置都配置好了。<br>（腾讯的坑）必须将MP_verify_MHYOHtHKmJzSkCj0.txt文件放置到项目的根目录下，如配置域名：dvnq2b.natappfree.cc,则访问<a href="http://dvnq2b.natappfree.cc/MP_verify_MHYOHtHKmJzSkCj0.txt%E6%97%B6%E8%AE%BF%E9%97%AE%E5%BE%97%E5%88%B0%E5%B0%B1%E8%A1%A8%E7%A4%BA%E9%85%8D%E7%BD%AE%E6%88%90%E5%8A%9F%E3%80%82">http://dvnq2b.natappfree.cc/MP_verify_MHYOHtHKmJzSkCj0.txt时访问得到就表示配置成功。</a></p><h5 id="获取openId"><a href="#获取openId" class="headerlink" title="获取openId"></a>获取openId</h5><p><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html">授权获取用户信息官方文档</a></p><p>用户同意授权地址，获取code</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect</span><br><span class="line"></span><br><span class="line">链接中情求参数说明：</span><br><span class="line">1. redirect_uri参数：授权后重定向的回调链接地址, 请使用 urlEncode 对链接进行处理。</span><br><span class="line">2. scope: 应用授权作用域，snsapi_base （不弹出授权页面，直接跳转，只能获取用户openid），snsapi_userinfo （弹出授权页面，可通过openid拿到昵称、性别、所在地。并且， 即使在未关注的情况下，只要用户授权，也能获取其信息 ）</span><br></pre></td></tr></table></figure><p>使用上面获取的code作为请求参数，请求下面链接来获取openid</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code</span><br><span class="line"></span><br><span class="line">链接中参数说明：</span><br><span class="line">1、secret： 公众号的appsecret</span><br><span class="line">2、grant_type： 填写为authorization_code</span><br></pre></td></tr></table></figure><p>请求后会有如下的返回结果：  </p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line"><span class="attr">&quot;access_token&quot;</span><span class="punctuation">:</span><span class="string">&quot;ACCESS_TOKEN&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;expires_in&quot;</span><span class="punctuation">:</span><span class="number">7200</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;refresh_token&quot;</span><span class="punctuation">:</span><span class="string">&quot;REFRESH_TOKEN&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;openid&quot;</span><span class="punctuation">:</span><span class="string">&quot;******&quot;</span><span class="punctuation">,</span><span class="comment">//拿到这个openid的值</span></span><br><span class="line"><span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span><span class="string">&quot;SCOPE&quot;</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="统一下单"><a href="#统一下单" class="headerlink" title="统一下单"></a>统一下单</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> 微信浏览器内微信支付/公众号支付(JSAPI)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> AjaxResult</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;orders&quot;, method = &#123; RequestMethod.POST, RequestMethod.GET &#125;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> AjaxResult <span class="title function_">orders</span> <span class="params">(<span class="meta">@RequestParam(&quot;total_fee&quot;)</span> String total_fee, HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">openId</span> <span class="operator">=</span> (String) request.getSession().getAttribute(<span class="string">&quot;openId&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;支付接口，从session获取的openid:&quot;</span>+openId);</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isNotEmpty(openId)) &#123;</span><br><span class="line">        result.addError(<span class="string">&quot;openId is null&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//拼接统一下单地址参数</span></span><br><span class="line">        Map&lt;String, String&gt; paraMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">        <span class="comment">//获取请求ip地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> WXPayUtil.getIp(request);</span><br><span class="line"></span><br><span class="line">        paraMap.put(<span class="string">&quot;appid&quot;</span>, appId);</span><br><span class="line">        paraMap.put(<span class="string">&quot;body&quot;</span>, <span class="string">&quot;订单支付&quot;</span>);</span><br><span class="line">        paraMap.put(<span class="string">&quot;mch_id&quot;</span>, mchId);</span><br><span class="line">        paraMap.put(<span class="string">&quot;nonce_str&quot;</span>, WXPayUtil.generateNonceStr());</span><br><span class="line">        paraMap.put(<span class="string">&quot;openid&quot;</span>, openId);</span><br><span class="line">        paraMap.put(<span class="string">&quot;out_trade_no&quot;</span>, WXPayUtil.generateNonceStr());<span class="comment">//订单号</span></span><br><span class="line">        paraMap.put(<span class="string">&quot;spbill_create_ip&quot;</span>, ip);</span><br><span class="line">        paraMap.put(<span class="string">&quot;total_fee&quot;</span>,total_fee);</span><br><span class="line">        paraMap.put(<span class="string">&quot;trade_type&quot;</span>, String.valueOf(WxPayApi.TradeType.JSAPI));</span><br><span class="line">        paraMap.put(<span class="string">&quot;notify_url&quot;</span>, notifyUrl);<span class="comment">// 此路径是微信服务器调用支付结果通知路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sign</span> <span class="operator">=</span> WXPayUtil.generateSignature(paraMap, paternerKey);</span><br><span class="line">        paraMap.put(<span class="string">&quot;sign&quot;</span>, sign);</span><br><span class="line">        <span class="type">String</span> <span class="variable">xml</span> <span class="operator">=</span> WXPayUtil.mapToXml(paraMap);<span class="comment">//将所有参数(map)转xml格式</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 统一下单</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">unifiedorder_url</span> <span class="operator">=</span> WxPayApi.unifiedorder_url;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">xmlStr</span> <span class="operator">=</span> HttpRequest.sendPost(unifiedorder_url, xml);<span class="comment">//发送post请求&quot;统一下单接口&quot;返回预支付id:prepay_id</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//以下内容是返回前端页面的json数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">prepay_id</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;<span class="comment">//预支付id</span></span><br><span class="line">        <span class="keyword">if</span> (xmlStr.indexOf(<span class="string">&quot;SUCCESS&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">            Map&lt;String, String&gt; map = WXPayUtil.xmlToMap(xmlStr);</span><br><span class="line"><span class="comment">//                String return_code = map.get(&quot;return_code&quot;);</span></span><br><span class="line"><span class="comment">//                String return_msg = map.get(&quot;return_msg&quot;);</span></span><br><span class="line">            prepay_id = (String) map.get(<span class="string">&quot;prepay_id&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, String&gt; payMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line">        payMap.put(<span class="string">&quot;appId&quot;</span>, appId);</span><br><span class="line">        payMap.put(<span class="string">&quot;timeStamp&quot;</span>, WXPayUtil.getCurrentTimestamp()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        payMap.put(<span class="string">&quot;nonceStr&quot;</span>, WXPayUtil.generateNonceStr());</span><br><span class="line">        payMap.put(<span class="string">&quot;signType&quot;</span>, <span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">        payMap.put(<span class="string">&quot;package&quot;</span>, <span class="string">&quot;prepay_id=&quot;</span> + prepay_id);</span><br><span class="line">        <span class="type">String</span> <span class="variable">paySign</span> <span class="operator">=</span> WXPayUtil.generateSignature(payMap, paternerKey);</span><br><span class="line">        payMap.put(<span class="string">&quot;paySign&quot;</span>, paySign);</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> JSON.toJSONString(payMap);</span><br><span class="line">        result.success(jsonStr);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="微信内H5调起支付"><a href="#微信内H5调起支付" class="headerlink" title="微信内H5调起支付"></a>微信内H5调起支付</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="keyword">var</span> appId,timeStamp,nonceStr,package,signType,paySign;  </span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">pay</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> code = $(<span class="string">&quot;#total_fee&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;total_fee&quot;</span>);<span class="comment">//支付金额</span></span><br><span class="line"><span class="keyword">if</span>(code)&#123;</span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&quot;http://***/orders?total_fee&quot;</span>+total_fee;</span><br><span class="line">  $.<span class="title function_">get</span>(url,<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">code</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> data = $.<span class="title function_">parseJSON</span>(res.<span class="property">data</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">WeixinJSBridge</span> == <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">addEventListener</span>) &#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;WeixinJSBridgeReady&#x27;</span>,</span><br><span class="line"><span class="title function_">onBridgeReady</span>(data), <span class="literal">false</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">attachEvent</span>) &#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">attachEvent</span>(<span class="string">&#x27;WeixinJSBridgeReady&#x27;</span>,</span><br><span class="line"><span class="title function_">onBridgeReady</span>(data));</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">attachEvent</span>(<span class="string">&#x27;onWeixinJSBridgeReady&#x27;</span>,</span><br><span class="line"><span class="title function_">onBridgeReady</span>(data));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_">onBridgeReady</span>(data);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (res.<span class="property">code</span> == <span class="number">2</span>) &#123;</span><br><span class="line">layer.<span class="title function_">alert</span>(res.<span class="property">message</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">layer.<span class="title function_">msg</span>(<span class="string">&quot;error：&quot;</span> + res.<span class="property">message</span>, &#123;</span><br><span class="line">shift : <span class="number">6</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_">alert</span>(“服务器错误”)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onBridgeReady</span>(<span class="params">json</span>) &#123;</span><br><span class="line">    <span class="title class_">WeixinJSBridge</span>.<span class="title function_">invoke</span>(<span class="string">&#x27;getBrandWCPayRequest&#x27;</span>, json, <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="comment">// 使用以上方式判断前端返回,微信团队郑重提示：res.err_msg将在用户支付成功后返回    ok，但并不保证它绝对可靠。</span></span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">err_msg</span> == <span class="string">&quot;get_brand_wcpay_request:ok&quot;</span>) &#123;</span><br><span class="line">            layer.<span class="title function_">msg</span>(<span class="string">&quot;支付成功&quot;</span>, &#123;</span><br><span class="line">                shift : <span class="number">6</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            self.<span class="property">location</span> = <span class="string">&quot;#(ctxPath)/success&quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            layer.<span class="title function_">msg</span>(<span class="string">&quot;支付失败&quot;</span>, &#123;</span><br><span class="line">                shift : <span class="number">6</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>微信付款后回调返回数据示例：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">----接收到的数据如下：---</span><br><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span><span class="tag">&lt;<span class="name">appid</span>&gt;</span>&lt;![CDATA[wxc293f61341667af1]]&gt;<span class="tag">&lt;/<span class="name">appid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bank_type</span>&gt;</span>&lt;![CDATA[CFT]]&gt;<span class="tag">&lt;/<span class="name">bank_type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cash_fee</span>&gt;</span>&lt;![CDATA[1]]&gt;<span class="tag">&lt;/<span class="name">cash_fee</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fee_type</span>&gt;</span>&lt;![CDATA[CNY]]&gt;<span class="tag">&lt;/<span class="name">fee_type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">is_subscribe</span>&gt;</span>&lt;![CDATA[Y]]&gt;<span class="tag">&lt;/<span class="name">is_subscribe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mch_id</span>&gt;</span>&lt;![CDATA[1532968631]]&gt;<span class="tag">&lt;/<span class="name">mch_id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nonce_str</span>&gt;</span>&lt;![CDATA[Pklbx7HIrnsytXqR3aelHrRsGfr6gz7Q]]&gt;<span class="tag">&lt;/<span class="name">nonce_str</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">openid</span>&gt;</span>&lt;![CDATA[o54ZOwPhVmMP4_7xgU7jHgXsXzMw]]&gt;<span class="tag">&lt;/<span class="name">openid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">out_trade_no</span>&gt;</span>&lt;![CDATA[HTorCq5g4ATpnlWVoltuSRXKIyPS6B8H]]&gt;<span class="tag">&lt;/<span class="name">out_trade_no</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result_code</span>&gt;</span>&lt;![CDATA[SUCCESS]]&gt;<span class="tag">&lt;/<span class="name">result_code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">return_code</span>&gt;</span>&lt;![CDATA[SUCCESS]]&gt;<span class="tag">&lt;/<span class="name">return_code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sign</span>&gt;</span>&lt;![CDATA[FE665BD9303D2015DE294B54133269D5]]&gt;<span class="tag">&lt;/<span class="name">sign</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time_end</span>&gt;</span>&lt;![CDATA[20190423172200]]&gt;<span class="tag">&lt;/<span class="name">time_end</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">total_fee</span>&gt;</span>1<span class="tag">&lt;/<span class="name">total_fee</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">trade_type</span>&gt;</span>&lt;![CDATA[JSAPI]]&gt;<span class="tag">&lt;/<span class="name">trade_type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transaction_id</span>&gt;</span>&lt;![CDATA[4200000296201904233313608005]]&gt;<span class="tag">&lt;/<span class="name">transaction_id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="微信回调"><a href="#微信回调" class="headerlink" title="微信回调"></a>微信回调</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 微信支付成功回调</span></span><br><span class="line"><span class="comment">    * 处理自己的业务</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;callback&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">callBack</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span>&#123;</span><br><span class="line">    <span class="comment">//System.out.println(&quot;微信支付成功,微信发送的callback信息,请注意修改订单信息&quot;);</span></span><br><span class="line">    response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">    response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        is = request.getInputStream();<span class="comment">//获取请求的流信息(这里是微信发的xml格式所有只能使用流来读)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">xml</span> <span class="operator">=</span> WXPayUtil.inputStream2String(is, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;----接收到的数据如下：---&quot;</span> + xml);</span><br><span class="line">        Map&lt;String, String&gt; notifyMap = WXPayUtil.xmlToMap(xml);<span class="comment">//将微信发的xml转map</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(notifyMap.get(<span class="string">&quot;return_code&quot;</span>).equals(<span class="string">&quot;SUCCESS&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span>(notifyMap.get(<span class="string">&quot;result_code&quot;</span>).equals(<span class="string">&quot;SUCCESS&quot;</span>))&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">ordersSn</span> <span class="operator">=</span> notifyMap.get(<span class="string">&quot;out_trade_no&quot;</span>);<span class="comment">//商户订单号</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">amountpaid</span> <span class="operator">=</span> notifyMap.get(<span class="string">&quot;total_fee&quot;</span>);<span class="comment">//实际支付的订单金额:单位 分</span></span><br><span class="line">                <span class="type">BigDecimal</span> <span class="variable">amountPay</span> <span class="operator">=</span> (<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(amountpaid).divide(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;100&quot;</span>))).setScale(<span class="number">2</span>);<span class="comment">//将分转换成元-实际支付金额:元</span></span><br><span class="line">                <span class="comment">//String openid = notifyMap.get(&quot;openid&quot;);  //如果有需要可以获取</span></span><br><span class="line">                <span class="comment">//String trade_type = notifyMap.get(&quot;trade_type&quot;);</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">/*以下是自己的业务处理------仅做参考</span></span><br><span class="line"><span class="comment">                    * 更新order对应字段/已支付金额/状态码</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line"><span class="comment">//                    Orders order = ordersService.selectOrdersBySn(ordersSn);</span></span><br><span class="line"><span class="comment">//                    if(order != null) &#123;</span></span><br><span class="line"><span class="comment">//                        order.setLastmodifieddate(new Date());</span></span><br><span class="line"><span class="comment">//                        order.setVersion(order.getVersion().add(BigDecimal.ONE));</span></span><br><span class="line"><span class="comment">//                        order.setAmountpaid(amountPay);//已支付金额</span></span><br><span class="line"><span class="comment">//                        order.setStatus(2L);//修改订单状态为待发货</span></span><br><span class="line"><span class="comment">//                        int num = ordersService.updateOrders(order);//更新order</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                        String amount = amountPay.setScale(0, BigDecimal.ROUND_FLOOR).toString();//实际支付金额向下取整-123.23--123</span></span><br><span class="line"><span class="comment">//                /*</span></span><br><span class="line"><span class="comment">//                 * 更新用户经验值</span></span><br><span class="line"><span class="comment">//                 */</span></span><br><span class="line"><span class="comment">//                        Member member = accountService.findObjectById(order.getMemberId());</span></span><br><span class="line"><span class="comment">//                        accountService.updateMemberByGrowth(amount, member);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                /*</span></span><br><span class="line"><span class="comment">//                 * 添加用户积分数及添加积分记录表记录</span></span><br><span class="line"><span class="comment">//                 */</span></span><br><span class="line"><span class="comment">//                        pointService.updateMemberPointAndLog(amount, member, &quot;购买商品,订单号为:&quot;+ordersSn);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//                    &#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//告诉微信服务器收到信息了，不要在调用回调action了========这里很重要回复微信服务器信息用流发送一个xml即可</span></span><br><span class="line">        response.getWriter().write(<span class="string">&quot;&lt;xml&gt;&lt;return_code&gt;&lt;![CDATA[SUCCESS]]&gt;&lt;/return_code&gt;&lt;return_msg&gt;&lt;![CDATA[OK]]&gt;&lt;/return_msg&gt;&lt;/xml&gt;&quot;</span>);</span><br><span class="line">        is.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="问题点"><a href="#问题点" class="headerlink" title="问题点"></a>问题点</h4><ul><li>支付报错mch_id与appid不匹配<br>商户号现在和微信公众号是分开的。所以，需要再商户号中的产品中心-》APPID授权管理中绑定微信公众号。</li></ul><h3 id="支付宝支付（Java）"><a href="#支付宝支付（Java）" class="headerlink" title="支付宝支付（Java）"></a>支付宝支付（Java）</h3><h4 id="测试环境开发逻辑"><a href="#测试环境开发逻辑" class="headerlink" title="测试环境开发逻辑"></a>测试环境开发逻辑</h4><ul><li>配置沙箱环境</li><li>服务端实现（maven项目）</li></ul><h5 id="对于测试环境，配置沙箱环境如下"><a href="#对于测试环境，配置沙箱环境如下" class="headerlink" title="对于测试环境，配置沙箱环境如下"></a>对于测试环境，配置沙箱环境如下</h5><p>开发者调用接口前需要先生成RSA密钥，RSA密钥包含应用私钥(APP_PRIVATE_KEY)、应用公钥(APP_PUBLIC_KEY）。生成密钥后在开放平台管理中心进行密钥配置，配置完成后可以获取支付宝公钥(ALIPAY_PUBLIC_KEY)。</p><p><a href="https://docs.open.alipay.com/291/105971">官方生成密钥文档及工具</a></p><p>将生成的<strong>应用公钥</strong>填于此处来获取<strong>支付宝公钥</strong>：<br><img src="/img/md/pictures/1556591394826-cca04e50-6091-4597-9fb5-eafa66d869af.png" alt="操作方法"></p><p>下载沙箱app,支付提供了沙箱app的登录账号</p><h5 id="对于正式环境，配置步骤如下"><a href="#对于正式环境，配置步骤如下" class="headerlink" title="对于正式环境，配置步骤如下"></a>对于正式环境，配置步骤如下</h5><p><strong>服务端实现</strong></p><ul><li>pom.xml中引入相关依赖</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--支付宝相关依赖--&gt;</span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/com.alipay.sdk/alipay-sdk-java --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alipay.sdk&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;alipay-sdk-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.7</span><span class="number">.4</span>.ALL&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>支付所需要的基本信息</li></ul><blockquote><p>配置注意两点，一个是使用“应用私钥”，一个是使用“支付宝公钥”而不是“应用公钥”</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">## 支付宝配置</span><br><span class="line"># appid</span><br><span class="line">alipay.APPID=2016093000629739</span><br><span class="line"># 应用私钥</span><br><span class="line">alipay.RSA_PRIVATE_KEY=***</span><br><span class="line"># 支付宝公钥</span><br><span class="line">alipay.ALIPAY_PUBLIC_KEY=***</span><br><span class="line"># 支付宝网关</span><br><span class="line">alipay.URL=https://openapi.alipaydev.com/gateway.do</span><br><span class="line"># 商户网关地址</span><br><span class="line">alipay.domain = http://gzue.natapp1.cc</span><br><span class="line"># 服务器异步通知页面路径</span><br><span class="line">alipay.notify_url=http://gzue.natapp1.cc/alipay/notify_url</span><br><span class="line"># 页面跳转同步通知页面路径</span><br><span class="line">alipay.return_url=http://gzue.natapp1.cc/alipay/return_url</span><br></pre></td></tr></table></figure><ul><li>创建一个实体直接读取配置文件信息</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@PropertySource(value = &quot;classpath:alipayconfig.properties&quot;)</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;alipay&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlipayConfig</span> &#123;</span><br><span class="line"><span class="comment">// 商户appid</span></span><br><span class="line"><span class="keyword">public</span>  String APPID;</span><br><span class="line"><span class="comment">//私钥</span></span><br><span class="line"><span class="keyword">public</span>  String RSA_PRIVATE_KEY;</span><br><span class="line"><span class="comment">//公钥</span></span><br><span class="line"><span class="keyword">public</span>  String ALIPAY_PUBLIC_KEY ;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span>  String notify_url;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span>  String return_url;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span>  String URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  String domain;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">CHARSET</span> <span class="operator">=</span> <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">FORMAT</span> <span class="operator">=</span> <span class="string">&quot;json&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="type">String</span> <span class="variable">log_path</span> <span class="operator">=</span> <span class="string">&quot;/log&quot;</span>;</span><br><span class="line"><span class="comment">// RSA2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="type">String</span> <span class="variable">SIGNTYPE</span> <span class="operator">=</span> <span class="string">&quot;RSA2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  AlipayClient alipayClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">//public AlipayConfig() &#123;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> AlipayConfig <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.alipayClient = <span class="keyword">new</span> <span class="title class_">DefaultAlipayClient</span>(URL, APPID, RSA_PRIVATE_KEY, FORMAT, CHARSET, ALIPAY_PUBLIC_KEY, SIGNTYPE);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//public  static  AlipayConfig NEW()&#123;</span></span><br><span class="line"><span class="comment">//return new AlipayConfig();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> AlipayClient <span class="title function_">getAlipayClient</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.alipayClient == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;alipayClient null&quot;</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;alipayClient null&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(alipayClient);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.alipayClient;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此处省略get set 方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>处理wabpay支付请求接口、同步通知和异步通知路径接口</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Controller</span><br><span class="line"><span class="meta">@RequestMapping(&quot;alipay&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlipayController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AlipayConfig alipayConfig;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AliPayApi aliPayApi;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * alipayClient只需要初始化一次，后续调用不同的API都可以使用同一个alipayClient对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    AlipayClient alipayClient = new DefaultAlipayClient(&quot;https://openapi.alipay.com/gateway.do&quot;,APP_ID,APP_PRIVATE_KEY,&quot;json&quot;,CHARSET,ALIPAY_PUBLIC_KEY);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    public AlipayConfig getAlipayConfig() &#123;</span></span><br><span class="line"><span class="comment">//        return alipayConfig.build();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机web支付</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/wapPay&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wapPay</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line"><span class="comment">//        getAlipayConfig();</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;测试数据&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">subject</span> <span class="operator">=</span> <span class="string">&quot;支付测试&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">totalAmount</span> <span class="operator">=</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">passbackParams</span> <span class="operator">=</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">returnUrl</span> <span class="operator">=</span>   alipayConfig.getReturn_url();</span><br><span class="line">        <span class="type">String</span> <span class="variable">notifyUrl</span> <span class="operator">=</span>  alipayConfig.getNotify_url();</span><br><span class="line"></span><br><span class="line">        <span class="type">AlipayTradeWapPayModel</span> <span class="variable">model</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlipayTradeWapPayModel</span>();</span><br><span class="line">        model.setBody(body);</span><br><span class="line">        model.setSubject(subject);</span><br><span class="line">        model.setTotalAmount(totalAmount);</span><br><span class="line">        model.setPassbackParams(passbackParams);</span><br><span class="line">        <span class="type">String</span> <span class="variable">outTradeNo</span> <span class="operator">=</span> StringUtils.getOutTradeNo();</span><br><span class="line">        System.out.println(<span class="string">&quot;wap outTradeNo&gt;&quot;</span>+outTradeNo);</span><br><span class="line">        model.setOutTradeNo(outTradeNo);</span><br><span class="line">        model.setProductCode(<span class="string">&quot;QUICK_WAP_PAY&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            aliPayApi.wapPay(response, model, returnUrl, notifyUrl);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/return_url&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">return_url</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取支付宝GET过来反馈信息</span></span><br><span class="line">            Map&lt;String, String&gt; map = AliPayApi.toMap(request);</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">                System.out.println(entry.getKey() + <span class="string">&quot; = &quot;</span> + entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">verify_result</span> <span class="operator">=</span> AlipaySignature.rsaCheckV1(map, alipayConfig.getALIPAY_PUBLIC_KEY(), <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;RSA2&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (verify_result) &#123;<span class="comment">// 验证成功</span></span><br><span class="line">                <span class="comment">// TODO 请在这里加上商户的业务逻辑程序代码</span></span><br><span class="line">                System.out.println(<span class="string">&quot;return_url 验证成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;return_url 验证失败&quot;</span>);</span><br><span class="line">                <span class="comment">// TODO</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;failure&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlipayApiException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;failure&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/notify_url&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String  <span class="title function_">notify_url</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取支付宝POST过来反馈信息</span></span><br><span class="line">            Map&lt;String, String&gt; params = AliPayApi.toMap(request);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : params.entrySet()) &#123;</span><br><span class="line">                System.out.println(entry.getKey() + <span class="string">&quot; = &quot;</span> + entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">verify_result</span> <span class="operator">=</span> AlipaySignature.rsaCheckV1(params, alipayConfig.getALIPAY_PUBLIC_KEY(), <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;RSA2&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (verify_result) &#123;<span class="comment">// 验证成功</span></span><br><span class="line">                <span class="comment">// TODO 请在这里加上商户的业务逻辑程序代码 异步通知可能出现订单重复通知 需要做去重处理</span></span><br><span class="line">                System.out.println(<span class="string">&quot;notify_url 验证成功succcess&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;notify_url 验证失败&quot;</span>);</span><br><span class="line">                <span class="comment">// TODO</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;failure&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlipayApiException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;failure&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面所使用到的一个请求api接口</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliPayApi</span>  &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AlipayConfig alipayConfig;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    private static final String ALIPAY_GATEWAY_NEW = &quot;https://mapi.alipay.com/gateway.do?&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    private static final String ALIPAY_GATEWAY_NEW = alipayConfig.getURL();</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AliPayApi</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  AlipayConfig <span class="title function_">getAlipayConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> alipayConfig.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">wapPay</span><span class="params">(HttpServletResponse response, AlipayTradeWapPayModel model, String returnUrl, String notifyUrl)</span> <span class="keyword">throws</span> AlipayApiException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">form</span> <span class="operator">=</span> wapPayStr(response, model, returnUrl, notifyUrl);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=&quot;</span> + AlipayConfig.CHARSET);</span><br><span class="line">        response.getWriter().write(form);</span><br><span class="line">        response.getWriter().flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  String <span class="title function_">wapPayStr</span><span class="params">(HttpServletResponse response, AlipayTradeWapPayModel model, String returnUrl, String notifyUrl)</span> <span class="keyword">throws</span> AlipayApiException, IOException &#123;</span><br><span class="line">        getAlipayConfig();</span><br><span class="line"><span class="comment">//        AlipayClient alipayClient = new DefaultAlipayClient(alipayConfig.getURL(), alipayConfig.getAPPID(), alipayConfig.getRSA_PRIVATE_KEY(), AlipayConfig.FORMAT, AlipayConfig.CHARSET, alipayConfig.getALIPAY_PUBLIC_KEY(), AlipayConfig.SIGNTYPE);</span></span><br><span class="line">        <span class="type">AlipayTradeWapPayRequest</span> <span class="variable">alipayRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlipayTradeWapPayRequest</span>();</span><br><span class="line">        alipayRequest.setReturnUrl(returnUrl);</span><br><span class="line">        alipayRequest.setNotifyUrl(notifyUrl);</span><br><span class="line">        alipayRequest.setBizModel(model);</span><br><span class="line">        <span class="keyword">return</span> ((AlipayTradeWapPayResponse)alipayConfig.getAlipayClient().pageExecute(alipayRequest)).getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title function_">toMap</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map&lt;String, String[]&gt; requestParams = request.getParameterMap();</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iter</span> <span class="operator">=</span> requestParams.keySet().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String)iter.next();</span><br><span class="line">            String[] values = (String[])((String[])requestParams.get(name));</span><br><span class="line">            <span class="type">String</span> <span class="variable">valueStr</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; values.length; ++i) &#123;</span><br><span class="line">                valueStr = i == values.length - <span class="number">1</span> ? valueStr + values[i] : valueStr + values[i] + <span class="string">&quot;,&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            params.put(name, valueStr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>调用支付请求接口<a href="http://gzue.natapp1.cc/alipay/wapPay">http://gzue.natapp1.cc/alipay/wapPay</a> 进行测试</li></ul><h4 id="问题点-1"><a href="#问题点-1" class="headerlink" title="问题点"></a>问题点</h4><ul><li>当我们自定义了支付页面，并在支付宝中直接访问，调取支付接口后，支付宝会返回一个支付表单给我们，那么此时，我们要进行页面覆盖：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    支付宝支付start</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">alipay</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">showLoading</span>(<span class="string">&quot;正在加载...&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> totalAmount = $.<span class="title function_">trim</span>($(<span class="string">&quot;#web_money&quot;</span>).<span class="title function_">val</span>());</span><br><span class="line">    $.<span class="title function_">post</span>(<span class="string">&quot;#(ctxPath)/alipay/wapPay&quot;</span>, &#123;</span><br><span class="line">        totalAmount : totalAmount,</span><br><span class="line">    &#125;, <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="comment">//返回的支付表单页面res</span></span><br><span class="line"><span class="comment">//            alert(res);</span></span><br><span class="line">        $.<span class="title function_">hideLoading</span>();</span><br><span class="line">        <span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        div.<span class="property">innerHTML</span> = res; <span class="comment">// html code</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(div);</span><br><span class="line"><span class="comment">//            document.forms[0].setAttribute(&#x27;target&#x27;, &#x27;_blank&#x27;);</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">forms</span>[<span class="number">0</span>].<span class="title function_">submit</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    支付宝支付end</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="支付宝JSAPI"><a href="#支付宝JSAPI" class="headerlink" title="支付宝JSAPI"></a>支付宝JSAPI</h3><blockquote></blockquote><p>1.引入资源文件<br>2.授权获取用户信息<br>3.获取userid<br>4.<del>服务端调用接口发起下单请求获取 trade_no</del><br>5.支付宝内H5调起支付  </p><h4 id="引入资源文件"><a href="#引入资源文件" class="headerlink" title="引入资源文件"></a>引入资源文件</h4><ul><li>页面引入：</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src = <span class="string">&quot;https://gw.alipayobjects.com/as/g/h5-lib/alipayjsapi/3.1.1/alipayjsapi.min.js&quot;</span>&gt; &lt;/script&gt; </span><br></pre></td></tr></table></figure><h4 id="授权获取用户信息"><a href="#授权获取用户信息" class="headerlink" title="授权获取用户信息"></a>授权获取用户信息</h4><p>如上图所示，对于开发者而言，需要完成以下工作：</p><blockquote></blockquote><ol><li>按照规则拼接授权页面的链接，并且引导用户跳转至该链接；</li><li>用户在授权页面上确认授权后，将跳转到开发者指定的回调页，并且带上 auth_code；</li><li>开发者通过 auth_code 换取 access_token 及用户的 userId；</li><li>如果需要除 userId 以外的其他信息，则使用access_token调用用户信息共享接口获取。</li></ol><p>url 拼接规则：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://openauth.alipay.com/oauth2/publicAppAuthorize.htm?app_id=APPID&amp;scope=SCOPE&amp;redirect_uri=ENCODED_URL&amp;state=state</span><br><span class="line"></span><br><span class="line">url 参数说明：</span><br><span class="line">app_id</span><br><span class="line">是</span><br><span class="line">开发者应用的app_id</span><br><span class="line"></span><br><span class="line">scope</span><br><span class="line">是</span><br><span class="line">接口权限值，目前只支持auth_userinfo和auth_base两个值</span><br><span class="line"></span><br><span class="line">redirect_uri</span><br><span class="line">是</span><br><span class="line">回调页面，是 经过转义 的url链接（url必须以http或者https开头），比如：http%3A%2F%2Fexample.com 在请求之前，开发者需要先到开发者中心对应应用内，配置授权回调地址。</span><br><span class="line"></span><br><span class="line">state</span><br><span class="line">否</span><br><span class="line">商户自定义参数，用户授权后，重定向到redirect_uri时会原样回传给商户。 为防止CSRF攻击，建议开发者请求授权时传入state参数，该参数要做到既不可预测，又可以证明客户端和当前第三方网站的登录认证状态存在关联。</span><br></pre></td></tr></table></figure><p>使用场景举例：开发者通过URL拼接方案，构造授权页面，并且引导用户授权。</p><h4 id="获取userid"><a href="#获取userid" class="headerlink" title="获取userid"></a>获取userid</h4><ul><li>前端使用 my.getAuthCode 获取授权码</li><li>后端使用 alipay.system.oauth.token 接口获取用户userid</li></ul><p><a href="https://opendocs.alipay.com/support/01rb05">文档地址</a></p><h4 id="服务端调用接口发起下单请求获取-trade-no"><a href="#服务端调用接口发起下单请求获取-trade-no" class="headerlink" title="服务端调用接口发起下单请求获取 trade_no"></a>服务端调用接口发起下单请求获取 trade_no</h4><h4 id="支付宝内H5调起支付"><a href="#支付宝内H5调起支付" class="headerlink" title="支付宝内H5调起支付"></a>支付宝内H5调起支付</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">callAliPay</span>(<span class="params">tradeNO</span>) &#123;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ready</span>(<span class="params">callback</span>) &#123;</span><br><span class="line"><span class="comment">// 如果jsbridge已经注入则直接调用</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">AlipayJSBridge</span>) &#123;</span><br><span class="line">callback &amp;&amp; <span class="title function_">callback</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 如果没有注入则监听注入的事件</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;AlipayJSBridgeReady&#x27;</span>, callback, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title class_">AlipayJSBridge</span>.<span class="title function_">call</span>(<span class="string">&#x27;tradePay&#x27;</span>, &#123;</span><br><span class="line"><span class="attr">tradeNO</span>: tradeNO</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(result.<span class="property">resultCode</span> == <span class="number">9000</span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&#x27;支付成功&#x27;</span>)</span><br><span class="line"><span class="title class_">AlipayJSBridge</span>.<span class="title function_">call</span>(<span class="string">&#x27;closeWebview&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&#x27;支付失败&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="js关闭当前页面"><a href="#js关闭当前页面" class="headerlink" title="js关闭当前页面"></a>js关闭当前页面</h3><blockquote></blockquote><p>在微信 , 支付宝 , app 中打开外部链接 , 都是使用webview打开页面的 , 所以需要app提供映射方法。<br>对于微信  , 支付宝 , 我们能通过开放平台找到对应的方法。</p><h4 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">WeixinJSBridge</span>.<span class="title function_">call</span>(<span class="string">&#x27;closeWindow&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="支付宝"><a href="#支付宝" class="headerlink" title="支付宝"></a>支付宝</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">AlipayJSBridge</span>.<span class="title function_">call</span>(<span class="string">&#x27;closeWebview&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WEBAPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML,JS,支付 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
